<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getGroup" path="/shared/ASAssets/Utilities/repository/user/getGroup" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getGroup:

    Get the list of privileges for a given group name and domain and whether the group exists or not.
 
	Input:
    		debug - Y=debug on, N=debug off 
			groupName - name of the group to be created
			groupDomain - domain for the group - default is &apos;composite&apos;
			groupPrivileges - space separated list of privileges for the group chosen from this list:
				ACCESS_TOOLS MODIFY_ALL_CONFIG MODIFY_ALL_RESOURCES MODIFY_ALL_STATUS MODIFY_ALL_USERS READ_ALL_CONFIG READ_ALL_RESOURCES READ_ALL_STATUS READ_ALL_USERS UNLOCK_RESOURCE


	Output:
		groupExists				- 0=group does not exist, 1=group exists
		groupExplicitRights		- explicit privilges for this group
		groupEffectiveRights	- effective (combined) privileges for this group
		groupInheritedRights	- inherited privileges for this group


	Exceptions:  Exception may be thrown.

	Modified Date:	Modified By:		CSW Version:	Reason:
	10/20/2014		Mike Tinius			6.2.6			Created new.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="groupName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupDomain" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupExists" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="groupExplicitRights" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupEffectiveRights" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupInheritedRights" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/user/operations/getDomainGroups" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="getDomainGroups" direction="IN">
        <datatype name="getDomainGroups" extendedName="{http://www.compositesw.com/services/system/admin/user}getDomainGroups" namespace="http://www.compositesw.com/services/system/admin/user" referenceDefinitionSet="/services/webservices/system/admin/user/operations/UserSchema" referenceType="{http://www.compositesw.com/services/system/admin/user}getDomainGroups" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/user}getDomainGroups">
          <schemaDatatype>
            <datatype name="getDomainGroups" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="getDomainGroupsRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/user" subType="ELEMENT_DECL" type="TREE" refId="2">
              <element name="domainName" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="scope" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="scopeValue" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="getDomainGroupsResponse" direction="OUT">
        <datatype name="getDomainGroupsResponse" extendedName="{http://www.compositesw.com/services/system/admin/user}getDomainGroupsResponse" namespace="http://www.compositesw.com/services/system/admin/user" referenceDefinitionSet="/services/webservices/system/admin/user/operations/UserSchema" referenceType="{http://www.compositesw.com/services/system/admin/user}getDomainGroupsResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/user}getDomainGroupsResponse">
          <schemaDatatype>
            <datatype name="getDomainGroupsResponse" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="getDomainGroupsResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/user" subType="ELEMENT_DECL" type="TREE" refId="3">
              <element name="groups" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="groupList" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="4">
                  <element name="group" namespace="http://www.compositesw.com/services/system/admin/user" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="group" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="5">
                      <element name="name" namespace="http://www.compositesw.com/services/system/admin/user">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="domainName" namespace="http://www.compositesw.com/services/system/admin/user">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="id" namespace="http://www.compositesw.com/services/system/admin/user">
                        <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2207" maxValue="2147483647"/>
                      </element>
                      <element name="explicitRights" namespace="http://www.compositesw.com/services/system/admin/user">
                        <datatype name="userRightsList" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="effectiveRights" namespace="http://www.compositesw.com/services/system/admin/user">
                        <datatype name="userRightsList" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="inheritedRights" namespace="http://www.compositesw.com/services/system/admin/user">
                        <datatype name="userRightsList" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/user" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="userNames" namespace="http://www.compositesw.com/services/system/admin/user" minOccurs="0">
                        <datatype name="domainMemberReferenceList" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="6">
                          <element name="entry" namespace="http://www.compositesw.com/services/system/admin/user" maxOccurs="2147483647" minOccurs="0">
                            <datatype name="domainMemberReference" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="7">
                              <element name="name" namespace="http://www.compositesw.com/services/system/admin/user">
                                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="domain" namespace="http://www.compositesw.com/services/system/admin/user" minOccurs="0">
                                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                              </element>
                            </datatype>
                          </element>
                        </datatype>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="8">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="9">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getGroup:

    Get the list of privileges for a given group name and domain and whether the group exists or not.
 
	Input:
    		debug - Y=debug on, N=debug off 
			groupName - name of the group to be created
			groupDomain - domain for the group - default is &apos;composite&apos;
			groupPrivileges - space separated list of privileges for the group chosen from this list:
				ACCESS_TOOLS MODIFY_ALL_CONFIG MODIFY_ALL_RESOURCES MODIFY_ALL_STATUS MODIFY_ALL_USERS READ_ALL_CONFIG READ_ALL_RESOURCES READ_ALL_STATUS READ_ALL_USERS UNLOCK_RESOURCE


	Output:
		groupExists				- 0=group does not exist, 1=group exists
		groupExplicitRights		- explicit privilges for this group
		groupEffectiveRights	- effective (combined) privileges for this group
		groupInheritedRights	- inherited privileges for this group


	Exceptions:  Exception may be thrown.

	Modified Date:	Modified By:		CSW Version:	Reason:
	10/20/2014		Mike Tinius			6.2.6			Created new.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getGroup(
	IN debug 					CHAR(1),-- e.g. Y or N
	IN groupName				VARCHAR(255),
	IN groupDomain 				VARCHAR(255),
	OUT groupExists				BIT,
	OUT groupExplicitRights		VARCHAR(255),
	OUT groupEffectiveRights	VARCHAR(255),
	OUT groupInheritedRights	VARCHAR(255)
)
BEGIN
	DECLARE moduleName 				VARCHAR DEFAULT &apos;getGroup&apos;;
	DECLARE request 				VARCHAR(4096);
	DECLARE response 				XML;
	DECLARE fault 					XML;
    DECLARE i 						INTEGER DEFAULT 1;
	DECLARE groupName_				VARCHAR DEFAULT groupName;
	DECLARE idstring				VARCHAR;
	DECLARE id						INTEGER;
	DECLARE groupDomain_			VARCHAR DEFAULT groupDomain;
	DECLARE message					LONGVARCHAR;
    DECLARE ex 						EXCEPTION;

   /*
    * Step one: make sure the appropriate groups exist, and create them if they don&apos;t exist
    */
    BEGIN
		if (groupName is null or LENGTH(groupName) = 0) then
			raise ex value &apos;The &quot;groupName&quot; parameter may not be null or empty.&apos;;
		end if;
		if (groupDomain is null or LENGTH(groupDomain) = 0) then
			raise ex value &apos;The &quot;groupDomain&quot; parameter may not be null or empty.&apos;;
		end if;

		-- when the domain is composite use all lower case for domains and group names
		if (LOWER(groupDomain_) = &apos;composite&apos;) then
			set groupName_ = LOWER(groupName_);
		end if;
		if (LOWER(groupDomain_) = &apos;composite&apos;) then
			set groupDomain_ = LOWER(groupDomain_);
		end if;

		set request =
	       &apos;&lt;ns1:getDomainGroups xmlns:ns1=&quot;http://www.compositesw.com/services/system/admin/user&quot;
    	         xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
        	     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
	           &lt;ns1:domainName&gt;&apos;||groupDomain_||&apos;&lt;/ns1:domainName&gt;
    	       &lt;ns1:scope&gt;ALL&lt;/ns1:scope&gt;
        	&lt;/ns1:getDomainGroups&gt;&apos;;

		IF (debug IS NOT NULL AND UPPER(debug) = &apos;Y&apos;) THEN
           	set message = &apos;Retrieve Groups.  request: &apos;||request;
			call log  (moduleName || &apos; : &apos; || message);
			call print(moduleName || &apos; : &apos; || message);
		END IF;

		CALL /services/webservices/system/admin/&quot;user&quot;/operations/getDomainGroups(request, response, fault);
/* response:
&lt;user:getDomainGroupsResponse xmlns:user=&quot;http://www.compositesw.com/services/system/admin/user&quot;&gt;
	&lt;user:groups&gt;
		&lt;user:group&gt;
			&lt;user:name&gt;admin&lt;/user:name&gt;
			&lt;user:domainName&gt;composite&lt;/user:domainName&gt;
			&lt;user:id&gt;1&lt;/user:id&gt;
			&lt;user:explicitRights&gt;ACCESS_TOOLS MODIFY_ALL_CONFIG MODIFY_ALL_RESOURCES MODIFY_ALL_STATUS MODIFY_ALL_USERS READ_ALL_CONFIG READ_ALL_RESOURCES READ_ALL_STATUS READ_ALL_USERS UNLOCK_RESOURCE&lt;/user:explicitRights&gt;
			&lt;user:effectiveRights&gt;ACCESS_TOOLS MODIFY_ALL_CONFIG MODIFY_ALL_RESOURCES MODIFY_ALL_STATUS MODIFY_ALL_USERS READ_ALL_CONFIG READ_ALL_RESOURCES READ_ALL_STATUS READ_ALL_USERS UNLOCK_RESOURCE&lt;/user:effectiveRights&gt;
			&lt;user:inheritedRights&gt;NONE&lt;/user:inheritedRights&gt;
			&lt;user:annotation&gt;Administrator group&lt;/user:annotation&gt;
			&lt;user:userNames&gt;
			&lt;user:entry&gt;
				&lt;user:name&gt;admin&lt;/user:name&gt;
			&lt;/user:entry&gt;
			&lt;/user:userNames&gt;
		&lt;/user:group&gt;
	&lt;/user:groups&gt;
&lt;/user:getDomainGroupsResponse&gt;

		call print(&apos;response:&apos;||CHR(10)||cast(response as longvarchar));
*/

		set groupExists = 0;
		set i = 1; 
		domainGroupsLoop:
		LOOP
			SET groupName_ = CAST(XPATH(response,&apos;//*[local-name()=&quot;group&quot;][&apos;|| i || &apos;]/*[local-name()=&quot;name&quot;]/text()&apos;) AS VARCHAR(4000));
			SET idstring = CAST(XPATH(response,&apos;//*[local-name()=&quot;group&quot;][&apos;|| i || &apos;]/*[local-name()=&quot;id&quot;]/text()&apos;) AS VARCHAR(4000));
			IF groupName_ IS NULL THEN
				LEAVE domainGroupsLoop;
			END IF;
			SET groupExplicitRights = CAST(XPATH(response,&apos;//*[local-name()=&quot;group&quot;][&apos;|| i || &apos;]/*[local-name()=&quot;explicitRights&quot;]/text()&apos;) AS VARCHAR(4000));
			SET groupEffectiveRights = CAST(XPATH(response,&apos;//*[local-name()=&quot;group&quot;][&apos;|| i || &apos;]/*[local-name()=&quot;effectiveRights&quot;]/text()&apos;) AS VARCHAR(4000));
			SET groupInheritedRights = CAST(XPATH(response,&apos;//*[local-name()=&quot;group&quot;][&apos;|| i || &apos;]/*[local-name()=&quot;inheritedRights&quot;]/text()&apos;) AS VARCHAR(4000));

			set id = 0;
			IF idstring IS NOT NULL THEN
				set id = CAST(idstring AS INTEGER);
			END IF;
			--call print(&apos;id=&apos;||id || &apos;  groupName=&apos;|| groupName_);
			IF (groupName = groupName_ and id != 0) then
				set groupExists = 1;
				IF (debug IS NOT NULL AND UPPER(debug) = &apos;Y&apos;) THEN
        		   	set message = &apos;Group Exists: &apos;||groupName;
					call log  (moduleName || &apos; : &apos; || message);
					call print(moduleName || &apos; : &apos; || message);
				END IF;
				LEAVE domainGroupsLoop;
			ELSEIF (groupName = groupName_ and id = 0) then
				IF (debug IS NOT NULL AND UPPER(debug) = &apos;Y&apos;) THEN
        		   	set message = &apos;Group Does Not Exist: &apos;||groupName;
					call log  (moduleName || &apos; : &apos; || message);
					call print(moduleName || &apos; : &apos; || message);
				END IF;
				LEAVE domainGroupsLoop;
			END IF;
			set i = i + 1;
		END LOOP;
     EXCEPTION                         
        WHEN System.SOAPFaultException THEN
			set message = &apos;EXCEPTION: &apos;||CURRENT_EXCEPTION.TRACE;
			call log  (moduleName || &apos; : &apos; || message);
			call print(moduleName || &apos; : &apos; || message);
			raise ex value CURRENT_EXCEPTION.TRACE;
     END; 
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/149</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/92</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/93</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/150</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/160</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/157</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>