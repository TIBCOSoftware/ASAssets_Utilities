<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getResourcePrivilegeDependencies" path="/shared/ASAssets/Utilities/repository/getResourcePrivilegeDependencies" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getResourcePrivilegeDependencies

	This procedure displays &quot;Dependency Privileges&quot; for a passed in resource path.  There is a similar capability in the Composite Manager which shows which resources
	have issues with privileges.   This procedure provides more in-depth information as it shows the privileges for each name+nameType+domain combination.  This procedure 
	returns a recursive list of used resources or &quot;dependency resources&quot; and the ancestor resources.  The ancestor resources are the containers which hold the dependency 
	resources.  This procedure returns a list of user/group resource privileges for a specified resource path and its dependencies given various inclusion and exclusion 
	filters.  This procedure excludes the system paths shown here: 	/, /shared, /services, /services/databases, /services/webservices.  This procedure performs an analysis 
	on the privileges for each row and returns a privilegeStatus=[PASS, FAIL, WARNING, NOACCESS, UNKNOWN] which indicates the following:
			PASS=The combined privileges matches the required privileges for the type of resource specified by this row.  
			FAIL=The combined privileges are lacking the required privileges for the type of resource specified by this row.
			WARNING=The combined privileges are additional privileges as compared to the parent having combinedPrivs=NONE or no access.   
					This may or may not mean anything so the results must be interpreted.
			NOACCESS=The combined privileges indicate no access or combinedPrivs=NONE for name+nameType+domain.
					This is consistent with the parent which also has no access or combinedPrivs=NONE.  The status is neither a PASS or FAIL but simply a statement of fact.
			UNKNOWN=The status could not be determined.

	Container and Resource Privileges
	---------------------------------
	Privileges fall into two groups, design-time and run-time. Read privilege belongs to both groups, and must be granted to users/groups
	  for all enclosing containers (parent or folder objects) of the resource the user wants to access or manipulate.
	Read, Write, and Grant are design-time privileges that determine access to objects for users/groups of CIS and other Composite components.
	Read, Execute, Select, Insert, Update, and Delete are run-time, data manipulation privileges that determine resource security for 
	  client-interface access to data through CIS.

	Column-Level Restrictions on Privileges
	-----------------------------------------
	Column-level restrictions set in CIS exhibit different behavior when the resource is accessed through a client interface, depending on 
	  whether the restriction is set for a table or for a view.

		Restriction Set For 		What Happens if User Accesses through a Client Interface
		-----------------------		-----------------------------------------------------------------------------------------------------------------
		Table: 						The restricted column and/or metadata does not appear via the client interface, and an access error is generated.
		View: 						The restricted column and/or metadata does not appear via the client interface.

	Privileges Required for Resource Dependencies
	---------------------------------------------
	When a resource has a dependency, the user who requests the view or invokes the procedure must have privileges to view the dependency, 
	  and to Select or Execute to retrieve data from the dependent resource.

	Note You can use the lineage feature in Composite Studio to learn about the resource relationships, dependencies, and references. 
		See “Exploring Data Lineage” in the CIS User’s Guide.

	For example, a user might want to see the data of View_A, where View_A executes Procedure_B (which draws on data from physical source Table_D) 
	  and also selects from physical source Table_C. To perform a SELECT on View_A, the user needs these privileges.

		On the Resource 													Privilege Required
		--------------------------------------------------------------		-------------------
		All parent containers of View_A, Procedure_B, Table_C, Table_D 		Read
		View_A, Table_C, Table_D 											Select
		Procedure_B 														Execute

    Dependencies:
    =============
    none

    Input:
        resourcePath - path to resource
		resourceType - type of resource (e.g. LINK, CONTAINER, TABLE, PROCEDURE, TREE, DEFINITION_SET, TRIGGER, etc.)
		excludePathsList - comma separated list of resource paths or partials paths to exclude
		inIgnoreResourceDoesNotExist - Ignore any resources that do not exist
										1 = Bypass the processing of that resource.
										0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
		nameTypeFilter - (optional) A filter that is set to null, USER or GROUP.
		domainFilter - (optional) A filter that is set to null or the domain such as composite, dynamic or an LDAP domain name.
		includeNameEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name =&quot; the incoming string.
								When a list of names are passed in the where clause constructs &quot;OR&quot; statements where (name = &apos;name1&apos; or nanme = &apos;name2&apos;).
		includeNameLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name LIKE&quot; the incoming string.
								When a list of name are passed in the where clause constructs &quot;OR&quot; statements where (name LIKE &apos;name%&apos; or name LIKE &apos;myname%&apos;).
		excludeNameNotEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name !=&quot; to the incoming string.
								When a list of name are passed in the where clause constructs &quot;AND&quot; statements where name != &apos;name&apos; AND name != &apos;myname&apos;.
		excludeNameNotLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name NOT LIKE&quot; the incoming string.
								When a list of name are passed in the where clause constructs &quot;AND&quot; statements where name NOT LIKE &apos;name%&apos; AND name NOT LIKE &apos;myname%&apos;.

		includePrivsEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs =&quot; the incoming string.
								When a list of privs are passed in the where clause constructs &quot;OR&quot; statements where (privs = &apos;NONE&apos; or privs = &apos;READ&apos;).
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		includePrivsLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs LIKE&quot; the incoming string.
								When a list of privs are passed in the where clause constructs &quot;OR&quot; statements where (privs LIKE &apos;READ EXECUTE%&apos; or privs LIKE &apos;READ%&apos;).
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		excludePrivsNotEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs !=&quot; to the incoming string.
								When a list of privs are passed in the where clause constructs &quot;AND&quot; statements where privs != &apos;NONE&apos; AND privs != &apos;READ&apos;.
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		excludePrivsNotLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs NOT LIKE&quot; the incoming string.
								When a list of privs are passed in the where clause constructs &quot;AND&quot; statements where privs NOT LIKE &apos;READ EXECUTE%&apos; AND privs NOT LIKE &apos;READ%&apos;.
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		includeColumnPrivs - (optional) A bit (1 or 0) that instructs whether to return column level privileges for resources such as tables that contain columns.
								1=yes include column privileges, 0=no do not include column privileges
		displayStatusType - (optional) A varchar that instructs what status to return.  
								Null or empty return all status rows.  This input field may contain any combination of [PASS FAIL WARNING NOACCESS UNKNOWN] depending on what the requestor wants to view.
													PASS=The combined privileges matches the required privileges for the type of resource specified by this row.  
													FAIL=The combined privileges are lacking the required privileges for the type of resource specified by this row.
													WARNING=The combined privileges are additional privileges as compared to the parent having combinedPrivs=NONE or no access.   
															This may or may not mean anything so the results must be interpreted.
													NOACCESS=The combined privileges indicate no access or combinedPrivs=NONE for name+nameType+domain.
															This is consistent with the parent which also has no access or combinedPrivs=NONE.  The status is neither a PASS or FAIL but simply a statement of fact.
													UNKNOWN=The status could not be determined.
		debug - (optional) A char(1) (null, Y or N) indicating whether to output debug statements like the SQL Stateement that will be executed.

    Output (cursor):
		resourceID					INTEGER,      - The unique resource identifier
		treeType					VARCHAR(255), - Parent=the first record that is initiated based on the passed in resourcePath and resourceType.  
														There may be multiple records for each user/group found.
													Child=A dependent child resource of the parent or another child.
													Ancestor=The ancestor is typically a folder (container) or a data source (container) for the parent or child resources.  
														An ancestor may be contained within another ancestor.  The parent or child is contained within an ancestor.
        resName						VARCHAR(255), - The name of the resource
        &quot;path&quot; 						/lib/resource/ResourceDefs.ResourcePath, - Path for this resource (the same as resPath input parameter)
        &quot;type&quot; 						/lib/resource/ResourceDefs.ResourceType, - Type of resource (e.g. CONTAINER, PROCEDURE)
		subType						VARCHAR(255), - The subtype of the resource
		enabled						BIT,          - 1=enabled, 0=disabled
        name						VARCHAR(255), - CIS username or group. 
        nameType 					VARCHAR(255), - CIS name type (USER, GROUP)
        &quot;domain&quot; 					VARCHAR(255), - CIS user domain such as composite or a custom ldap group.
		privilegeStatus				VARCHAR(255), - The status for this resource, type and name + nameType + domain combination
													PASS=The combined privileges matches the required privileges for the type of resource specified by this row.  
													FAIL=The combined privileges are lacking the required privileges for the type of resource specified by this row.
													WARNING=The combined privileges are additional privileges as compared to the parent having combinedPrivs=NONE or no access.   
															This may or may not mean anything so the results must be interpreted.
													NOACCESS=The combined privileges indicate no access or combinedPrivs=NONE for name+nameType+domain.
															This is consistent with the parent which also has no access or combinedPrivs=NONE.  The status is neither a PASS or FAIL but simply a statement of fact.
													UNKNOWN=The status could not be determined.
		privilegeRunTimeAnalysis 	VARCHAR(255), - Provides a space separated list of privileges lacking such as -READ -SELECT
		privilegeDesignTimeAnalysis VARCHAR(255), - Provides a space separated list of extra or additional privileges that are set but do not necessarily need to be set such as +READ +SELECT
        privs 						VARCHAR(255), - explicitly defined privs for the user or group
        combinedPrivs 				VARCHAR(255), - combined (both explicit and inherited) privs for the user or group
        inheritedPrivs 				VARCHAR(255)  - inherited (through groups) privs for the user or group
		-- privs
		p_N					BIT,-- NONE
		p_R					BIT,-- READ
		p_W					BIT,-- WRITE
		p_E					BIT,-- EXECUTE
		p_S					BIT,-- SELECT
		p_U					BIT,-- UPDATE
		p_I					BIT,-- INSERT
		p_D					BIT,-- DELETE
		p_G					BIT,-- GRANT
		-- combined privs
		c_N					BIT,-- NONE
		c_R					BIT,-- READ
		c_W					BIT,-- WRITE
		c_E					BIT,-- EXECUTE
		c_S					BIT,-- SELECT
		c_U					BIT,-- UPDATE
		c_I					BIT,-- INSERT
		c_D					BIT,-- DELETE
		c_G					BIT,-- GRANT
		-- inherited privs
		i_N					BIT,-- NONE
		i_R					BIT,-- READ
		i_W					BIT,-- WRITE
		i_E					BIT,-- EXECUTE
		i_S					BIT,-- SELECT
		i_U					BIT,-- UPDATE
		i_I					BIT,-- INSERT
		i_D					BIT,-- DELETE
		i_G					BIT -- GRANT

   Exceptions: ex

	Modified Date:	Modified By:		CSW Version:	Reason:
	05/22/2014		Mike Tinius			6.2.0			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inIgnoreResourceDoesNotExist" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="nameTypeFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="domainFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="includeNameEqualFilter" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="includeNameLikeFilter" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludeNameNotEqualFilter" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludeNameNotLikeFilter" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="includePrivsEqualFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="includePrivsLikeFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="excludePrivsNotEqualFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="excludePrivsNotLikeFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="includeColumnPrivs" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="displayStatusType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="privilegeDependencies" type="TABLE" refId="1">
        <element name="resourceID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="treeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="path">
          <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
        </element>
        <element name="type">
          <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
        </element>
        <element name="subType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="nameType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="domain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="privilegeStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="privilegeRunTimeAnalysis">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="privilegeDesignTimeAnalysis">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="privs">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="combinedPrivs">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="inheritedPrivs">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="p_N">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_R">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_W">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_E">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_S">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_U">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_I">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_D">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="p_G">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_N">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_R">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_W">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_E">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_S">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_U">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_I">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_D">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="c_G">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_N">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_R">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_W">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_E">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_S">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_U">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_I">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_D">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="i_G">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageRecursiveAncestors" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="returnUniqueRows" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="ignoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourcePrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="nameTypeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="domainFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeNameEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includeNameLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includePrivsEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includePrivsLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeColumnPrivs" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="path">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nameType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="privs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="combinedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="inheritedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="p_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getResourcePrivilegeDependencies

	This procedure displays &quot;Dependency Privileges&quot; for a passed in resource path.  There is a similar capability in the Composite Manager which shows which resources
	have issues with privileges.   This procedure provides more in-depth information as it shows the privileges for each name+nameType+domain combination.  This procedure 
	returns a recursive list of used resources or &quot;dependency resources&quot; and the ancestor resources.  The ancestor resources are the containers which hold the dependency 
	resources.  This procedure returns a list of user/group resource privileges for a specified resource path and its dependencies given various inclusion and exclusion 
	filters.  This procedure excludes the system paths shown here: 	/, /shared, /services, /services/databases, /services/webservices.  This procedure performs an analysis 
	on the privileges for each row and returns a privilegeStatus=[PASS, FAIL, WARNING, NOACCESS, UNKNOWN] which indicates the following:
			PASS=The combined privileges matches the required privileges for the type of resource specified by this row.  
			FAIL=The combined privileges are lacking the required privileges for the type of resource specified by this row.
			WARNING=The combined privileges are additional privileges as compared to the parent having combinedPrivs=NONE or no access.   
					This may or may not mean anything so the results must be interpreted.
			NOACCESS=The combined privileges indicate no access or combinedPrivs=NONE for name+nameType+domain.
					This is consistent with the parent which also has no access or combinedPrivs=NONE.  The status is neither a PASS or FAIL but simply a statement of fact.
			UNKNOWN=The status could not be determined.

	Container and Resource Privileges
	---------------------------------
	Privileges fall into two groups, design-time and run-time. Read privilege belongs to both groups, and must be granted to users/groups
	  for all enclosing containers (parent or folder objects) of the resource the user wants to access or manipulate.
	Read, Write, and Grant are design-time privileges that determine access to objects for users/groups of CIS and other Composite components.
	Read, Execute, Select, Insert, Update, and Delete are run-time, data manipulation privileges that determine resource security for 
	  client-interface access to data through CIS.

	Column-Level Restrictions on Privileges
	-----------------------------------------
	Column-level restrictions set in CIS exhibit different behavior when the resource is accessed through a client interface, depending on 
	  whether the restriction is set for a table or for a view.

		Restriction Set For 		What Happens if User Accesses through a Client Interface
		-----------------------		-----------------------------------------------------------------------------------------------------------------
		Table: 						The restricted column and/or metadata does not appear via the client interface, and an access error is generated.
		View: 						The restricted column and/or metadata does not appear via the client interface.

	Privileges Required for Resource Dependencies
	---------------------------------------------
	When a resource has a dependency, the user who requests the view or invokes the procedure must have privileges to view the dependency, 
	  and to Select or Execute to retrieve data from the dependent resource.

	Note You can use the lineage feature in Composite Studio to learn about the resource relationships, dependencies, and references. 
		See “Exploring Data Lineage” in the CIS User’s Guide.

	For example, a user might want to see the data of View_A, where View_A executes Procedure_B (which draws on data from physical source Table_D) 
	  and also selects from physical source Table_C. To perform a SELECT on View_A, the user needs these privileges.

		On the Resource 													Privilege Required
		--------------------------------------------------------------		-------------------
		All parent containers of View_A, Procedure_B, Table_C, Table_D 		Read
		View_A, Table_C, Table_D 											Select
		Procedure_B 														Execute

    Dependencies:
    =============
    none

    Input:
        resourcePath - path to resource
		resourceType - type of resource (e.g. LINK, CONTAINER, TABLE, PROCEDURE, TREE, DEFINITION_SET, TRIGGER, etc.)
		excludePathsList - comma separated list of resource paths or partials paths to exclude
		inIgnoreResourceDoesNotExist - Ignore any resources that do not exist
										1 = Bypass the processing of that resource.
										0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
		nameTypeFilter - (optional) A filter that is set to null, USER or GROUP.
		domainFilter - (optional) A filter that is set to null or the domain such as composite, dynamic or an LDAP domain name.
		includeNameEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name =&quot; the incoming string.
								When a list of names are passed in the where clause constructs &quot;OR&quot; statements where (name = &apos;name1&apos; or nanme = &apos;name2&apos;).
		includeNameLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name LIKE&quot; the incoming string.
								When a list of name are passed in the where clause constructs &quot;OR&quot; statements where (name LIKE &apos;name%&apos; or name LIKE &apos;myname%&apos;).
		excludeNameNotEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name !=&quot; to the incoming string.
								When a list of name are passed in the where clause constructs &quot;AND&quot; statements where name != &apos;name&apos; AND name != &apos;myname&apos;.
		excludeNameNotLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;name NOT LIKE&quot; the incoming string.
								When a list of name are passed in the where clause constructs &quot;AND&quot; statements where name NOT LIKE &apos;name%&apos; AND name NOT LIKE &apos;myname%&apos;.

		includePrivsEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs =&quot; the incoming string.
								When a list of privs are passed in the where clause constructs &quot;OR&quot; statements where (privs = &apos;NONE&apos; or privs = &apos;READ&apos;).
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		includePrivsLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs LIKE&quot; the incoming string.
								When a list of privs are passed in the where clause constructs &quot;OR&quot; statements where (privs LIKE &apos;READ EXECUTE%&apos; or privs LIKE &apos;READ%&apos;).
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		excludePrivsNotEqualFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs !=&quot; to the incoming string.
								When a list of privs are passed in the where clause constructs &quot;AND&quot; statements where privs != &apos;NONE&apos; AND privs != &apos;READ&apos;.
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		excludePrivsNotLikeFilter - (optional) A comma separated filter list that is used to retrieve privileges where the &quot;privs NOT LIKE&quot; the incoming string.
								When a list of privs are passed in the where clause constructs &quot;AND&quot; statements where privs NOT LIKE &apos;READ EXECUTE%&apos; AND privs NOT LIKE &apos;READ%&apos;.
								&quot;privs&quot; should be in this order: READ WRITE EXECUTE SELECT UPDATE INSERT DELETE GRANT
								       &quot;privs&quot; with no settings: NONE
		includeColumnPrivs - (optional) A bit (1 or 0) that instructs whether to return column level privileges for resources such as tables that contain columns.
								1=yes include column privileges, 0=no do not include column privileges
		displayStatusType - (optional) A varchar that instructs what status to return.  
								Null or empty return all status rows.  This input field may contain any combination of [PASS FAIL WARNING NOACCESS UNKNOWN] depending on what the requestor wants to view.
													PASS=The combined privileges matches the required privileges for the type of resource specified by this row.  
													FAIL=The combined privileges are lacking the required privileges for the type of resource specified by this row.
													WARNING=The combined privileges are additional privileges as compared to the parent having combinedPrivs=NONE or no access.   
															This may or may not mean anything so the results must be interpreted.
													NOACCESS=The combined privileges indicate no access or combinedPrivs=NONE for name+nameType+domain.
															This is consistent with the parent which also has no access or combinedPrivs=NONE.  The status is neither a PASS or FAIL but simply a statement of fact.
													UNKNOWN=The status could not be determined.
		debug - (optional) A char(1) (null, Y or N) indicating whether to output debug statements like the SQL Stateement that will be executed.

    Output (cursor):
		resourceID					INTEGER,      - The unique resource identifier
		treeType					VARCHAR(255), - Parent=the first record that is initiated based on the passed in resourcePath and resourceType.  
														There may be multiple records for each user/group found.
													Child=A dependent child resource of the parent or another child.
													Ancestor=The ancestor is typically a folder (container) or a data source (container) for the parent or child resources.  
														An ancestor may be contained within another ancestor.  The parent or child is contained within an ancestor.
        resName						VARCHAR(255), - The name of the resource
        &quot;path&quot; 						/lib/resource/ResourceDefs.ResourcePath, - Path for this resource (the same as resPath input parameter)
        &quot;type&quot; 						/lib/resource/ResourceDefs.ResourceType, - Type of resource (e.g. CONTAINER, PROCEDURE)
		subType						VARCHAR(255), - The subtype of the resource
		enabled						BIT,          - 1=enabled, 0=disabled
        name						VARCHAR(255), - CIS username or group. 
        nameType 					VARCHAR(255), - CIS name type (USER, GROUP)
        &quot;domain&quot; 					VARCHAR(255), - CIS user domain such as composite or a custom ldap group.
		privilegeStatus				VARCHAR(255), - The status for this resource, type and name + nameType + domain combination
													PASS=The combined privileges matches the required privileges for the type of resource specified by this row.  
													FAIL=The combined privileges are lacking the required privileges for the type of resource specified by this row.
													WARNING=The combined privileges are additional privileges as compared to the parent having combinedPrivs=NONE or no access.   
															This may or may not mean anything so the results must be interpreted.
													NOACCESS=The combined privileges indicate no access or combinedPrivs=NONE for name+nameType+domain.
															This is consistent with the parent which also has no access or combinedPrivs=NONE.  The status is neither a PASS or FAIL but simply a statement of fact.
													UNKNOWN=The status could not be determined.
		privilegeRunTimeAnalysis 	VARCHAR(255), - Provides a space separated list of privileges lacking such as -READ -SELECT
		privilegeDesignTimeAnalysis VARCHAR(255), - Provides a space separated list of extra or additional privileges that are set but do not necessarily need to be set such as +READ +SELECT
        privs 						VARCHAR(255), - explicitly defined privs for the user or group
        combinedPrivs 				VARCHAR(255), - combined (both explicit and inherited) privs for the user or group
        inheritedPrivs 				VARCHAR(255)  - inherited (through groups) privs for the user or group
		-- privs
		p_N					BIT,-- NONE
		p_R					BIT,-- READ
		p_W					BIT,-- WRITE
		p_E					BIT,-- EXECUTE
		p_S					BIT,-- SELECT
		p_U					BIT,-- UPDATE
		p_I					BIT,-- INSERT
		p_D					BIT,-- DELETE
		p_G					BIT,-- GRANT
		-- combined privs
		c_N					BIT,-- NONE
		c_R					BIT,-- READ
		c_W					BIT,-- WRITE
		c_E					BIT,-- EXECUTE
		c_S					BIT,-- SELECT
		c_U					BIT,-- UPDATE
		c_I					BIT,-- INSERT
		c_D					BIT,-- DELETE
		c_G					BIT,-- GRANT
		-- inherited privs
		i_N					BIT,-- NONE
		i_R					BIT,-- READ
		i_W					BIT,-- WRITE
		i_E					BIT,-- EXECUTE
		i_S					BIT,-- SELECT
		i_U					BIT,-- UPDATE
		i_I					BIT,-- INSERT
		i_D					BIT,-- DELETE
		i_G					BIT -- GRANT

   Exceptions: ex

	Modified Date:	Modified By:		CSW Version:	Reason:
	05/22/2014		Mike Tinius			6.2.0			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getResourcePrivilegeDependencies(
	IN resourcePath 				/lib/resource/ResourceDefs.ResourcePath, -- actual resource path and not a folder path
	IN resourceType					/lib/resource/ResourceDefs.ResourceType, -- The resource type
	IN excludePathsList				LONGVARCHAR, 	-- comma separated list of resource paths or partials paths to exclude
	IN inIgnoreResourceDoesNotExist	INTEGER, 		-- Ignore any resources that do not exist
													-- 1 = Bypass the processing of that resource.
													-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	IN nameTypeFilter 				VARCHAR,	--[optional]
	IN domainFilter					VARCHAR, 	--[optional]
	IN includeNameEqualFilter 		LONGVARCHAR,--[optional]
	IN includeNameLikeFilter 		LONGVARCHAR,--[optional]
	IN excludeNameNotEqualFilter	LONGVARCHAR,--[optional]
	IN excludeNameNotLikeFilter		LONGVARCHAR,--[optional]
	IN includePrivsEqualFilter		VARCHAR, 	--[optional]
	IN includePrivsLikeFilter		VARCHAR, 	--[optional]
	IN excludePrivsNotEqualFilter	VARCHAR, 	--[optional]
	IN excludePrivsNotLikeFilter	VARCHAR, 	--[optional]
	IN includeColumnPrivs			BIT,	 	--[optional]
	IN displayStatusType			VARCHAR,	--[optional]
	IN debug						CHAR(1), 	--[optional]
	OUT result						PIPE privilegeDependencies
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;getResourcePrivilegeDependencies&apos;;
	DECLARE ignoreResourceDoesNotExist	INTEGER DEFAULT NVL(inIgnoreResourceDoesNotExist,0);
	DECLARE debug1						CHAR(1) DEFAULT UPPER(TRIM(NVL(debug,&apos;N&apos;)));
	DECLARE debug2						CHAR(2) DEFAULT &apos;N&apos;; -- This debug is passed into the downstream procedures for secondary debugging.
	DECLARE PUBLIC TYPE privilegeDependencies ROW (
		resourceID						INTEGER,
		treeType						VARCHAR(255), -- Parent, Child, Ancestor
        resName							VARCHAR(255), 
       &quot;path&quot; 							/lib/resource/ResourceDefs.ResourcePath, 
        &quot;type&quot; 							/lib/resource/ResourceDefs.ResourceType, 
		subType							VARCHAR(255),
		enabled							BIT,
        name							VARCHAR(255), 
        nameType 						VARCHAR(255), 
        &quot;domain&quot; 						VARCHAR(255), 
		privilegeStatus					VARCHAR(255),
		privilegeRunTimeAnalysis 		VARCHAR(255),
		privilegeDesignTimeAnalysis 	VARCHAR(255), -- Future place-holder
        privs 							VARCHAR(255), 
        combinedPrivs 					VARCHAR(255), 
        inheritedPrivs 					VARCHAR(255),
		-- privs
		p_N								BIT,-- NONE
		p_R								BIT,-- READ
		p_W								BIT,-- WRITE
		p_E								BIT,-- EXECUTE
		p_S								BIT,-- SELECT
		p_U								BIT,-- UPDATE
		p_I								BIT,-- INSERT
		p_D								BIT,-- DELETE
		p_G								BIT,-- GRANT
		-- combined privs	
		c_N								BIT,-- NONE
		c_R								BIT,-- READ
		c_W								BIT,-- WRITE
		c_E								BIT,-- EXECUTE
		c_S								BIT,-- SELECT
		c_U								BIT,-- UPDATE
		c_I								BIT,-- INSERT
		c_D								BIT,-- DELETE
		c_G								BIT,-- GRANT
		-- inherited privs
		i_N								BIT,-- NONE
		i_R								BIT,-- READ
		i_W								BIT,-- WRITE
		i_E								BIT,-- EXECUTE
		i_S								BIT,-- SELECT
		i_U								BIT,-- UPDATE
		i_I								BIT,-- INSERT
		i_D								BIT,-- DELETE
		i_G								BIT -- GRANT
	);
	DECLARE privsDepRec					privilegeDependencies;
	DECLARE i							INTEGER DEFAULT 0;
	DECLARE privilegeStatus				VARCHAR(255);
	DECLARE privilegeRunTimeAnalysis 	VARCHAR(255);
	DECLARE privilegeDesignTimeAnalysis VARCHAR(255);
	DECLARE resourceIdList				LONGVARCHAR;
	DECLARE noAccessList1				LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE noAccessList2				LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE noAccessItem				VARCHAR(500);
	DECLARE message						LONGVARCHAR;

	/************************************************************************
     * Retrieve the basic resource information
	 ************************************************************************/
	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, resourceType) DO
		SET privsDepRec.resourceID = r.id;
		SET privsDepRec.resName = r.name;
		SET privsDepRec.treeType = &apos;Parent&apos;;
		SET privsDepRec.&quot;path&quot; = r.&quot;path&quot;;
		SET privsDepRec.&quot;type&quot; = r.&quot;type&quot;;
		SET privsDepRec.subType = r.subType;
		SET privsDepRec.enabled = r.enabled;
		SET resourceIdList = r.id||&apos; &apos;;
	END FOR;

	/************************************************************************
     * Retrieve the privilege list for the input resource
	 ************************************************************************/
	FOR p AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourcePrivileges(
		resourcePath, resourceType, nameTypeFilter, domainFilter, 
		includeNameEqualFilter, includeNameLikeFilter, excludeNameNotEqualFilter, excludeNameNotLikeFilter,
		includePrivsEqualFilter, includePrivsLikeFilter, excludePrivsNotEqualFilter, excludePrivsNotLikeFilter, includeColumnPrivs, debug2) 
	DO
		-- Initialize loop variables
		SET i = i + 1;
		IF (p.&quot;path&quot; != privsDepRec.&quot;path&quot;) THEN
			SET privsDepRec.&quot;path&quot; = p.&quot;path&quot;;
			SET privsDepRec.&quot;type&quot; = p.&quot;type&quot;;
			SET privsDepRec.subType = &apos;&apos;;
			SET privsDepRec.enabled = 0;
		END IF;
		SET privsDepRec.name = p.name;
		SET privsDepRec.nameType = p.nameType;
		SET privsDepRec.&quot;domain&quot; = p.&quot;domain&quot;;
		SET privsDepRec.privilegeStatus = &apos;UNKNOWN&apos;;
		SET privsDepRec.privilegeRunTimeAnalysis = &apos;&apos;;
		SET privsDepRec.privilegeDesignTimeAnalysis = &apos;&apos;;
		SET privsDepRec.privs = p.privs;
		SET privsDepRec.combinedPrivs = p.combinedPrivs;
		SET privsDepRec.inheritedPrivs = p.inheritedPrivs;
		-- privs
		SET privsDepRec.p_N = p.p_N;
		SET privsDepRec.p_R = p.p_R;
		SET privsDepRec.p_W = p.p_W;
		SET privsDepRec.p_E = p.p_E;
		SET privsDepRec.p_S = p.p_S;
		SET privsDepRec.p_U = p.p_U;
		SET privsDepRec.p_I = p.p_I;
		SET privsDepRec.p_D = p.p_D;
		SET privsDepRec.p_G = p.p_G;
		-- combined privs
		SET privsDepRec.c_N = p.c_N;
		SET privsDepRec.c_R = p.c_R;
		SET privsDepRec.c_W = p.c_W;
		SET privsDepRec.c_E = p.c_E;
		SET privsDepRec.c_S = p.c_S;
		SET privsDepRec.c_U = p.c_U;
		SET privsDepRec.c_I = p.c_I;
		SET privsDepRec.c_D = p.c_D;
		SET privsDepRec.c_G = p.c_G;
		-- inherited privs
		SET privsDepRec.i_N = p.i_N;
		SET privsDepRec.i_R = p.i_R;
		SET privsDepRec.i_W = p.i_W;
		SET privsDepRec.i_E = p.i_E;
		SET privsDepRec.i_S = p.i_S;
		SET privsDepRec.i_U = p.i_U;
		SET privsDepRec.i_I = p.i_I;
		SET privsDepRec.i_D = p.i_D;
		SET privsDepRec.i_G = p.i_G;

		-- Run-time privileges: Check for NONE on passed-in, analyzed resource path
		--   The purpose of keeping track of which users or groups have privileges=NONE is to be able to cross-reference this list against the ancestors and dependent resources.
		IF (privsDepRec.combinedPrivs = &apos;NONE&apos;) THEN
			SET noAccessItem = privsDepRec.name||&apos;:&apos;||privsDepRec.nameType||&apos;:&apos;||privsDepRec.&quot;domain&quot;||&apos; &apos;;
			-- Track which name+nameType+domain have privileges=NONE and spread this across two LONGVARCHAR lists which allow for a total of 4,294,967,294 characters.
			IF (LENGTH(noAccessItem) + LENGTH(noAccessList1) &lt; 2147483647) THEN
				SET noAccessList1 = noAccessList1 || noAccessItem;
			ELSE
				SET noAccessList2 = noAccessList2 || noAccessItem;
			END IF;
			SET privsDepRec.privilegeStatus = &apos;NOACCESS&apos;;

		-- Analyze CONTAINERs or DATA_SOURCEs or LINKs or DEFINITION_SETs or TRIGGERs or MODELs
		ELSEIF (privsDepRec.&quot;type&quot; = &apos;CONTAINER&apos; or privsDepRec.&quot;type&quot; = &apos;DATA_SOURCE&apos; or privsDepRec.&quot;type&quot; = &apos;LINK&apos; or privsDepRec.&quot;type&quot; = &apos;DEFINITION_SET&apos; or privsDepRec.&quot;type&quot; = &apos;TRIGGER&apos; or privsDepRec.&quot;type&quot; = &apos;MODEL&apos; or privsDepRec.&quot;type&quot; = &apos;POLICY&apos;) THEN
			-- Run-time privileges: Check for READ on passed-in, analyzed resource path
			if     (privsDepRec.c_R = 1) THEN
				SET privsDepRec.privilegeStatus = &apos;PASS&apos;;
			-- Check for NO READ on analyzed resource
			ELSEIF (privsDepRec.c_R = 0) THEN
				SET privsDepRec.privilegeStatus = &apos;FAIL&apos;;
				SET privsDepRec.privilegeRunTimeAnalysis = privsDepRec.privilegeRunTimeAnalysis || &apos;-READ &apos;;	
			END IF;

			-- Design-time privileges
			IF (privsDepRec.c_R = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+READ &apos;;
			END IF;
			IF (privsDepRec.c_W = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
			END IF;
			IF (privsDepRec.c_G = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
			END IF;

		-- Analyze PROCEDUREs
		ELSEIF (privsDepRec.&quot;type&quot; = &apos;PROCEDURE&apos;) THEN
			-- Run-time privileges: Check for EXECUTE on passed-in, analyzed resource path
			if     (privsDepRec.c_E = 1) THEN
				SET privsDepRec.privilegeStatus = &apos;PASS&apos;;
			ELSEIF (privsDepRec.c_E = 0) THEN
				SET privsDepRec.privilegeStatus = &apos;FAIL&apos;;
				SET privsDepRec.privilegeRunTimeAnalysis = privsDepRec.privilegeRunTimeAnalysis || &apos;-EXECUTE &apos;;	
			END IF;

			-- Design-time privileges
			IF (privsDepRec.c_R = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+READ &apos;;
			END IF;
			IF (privsDepRec.c_W = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
			END IF;
			IF (privsDepRec.c_G = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
			END IF;

		-- Analyze TABLEs and TREEs
		ELSEIF (privsDepRec.&quot;type&quot; = &apos;TABLE&apos; or privsDepRec.&quot;type&quot; = &apos;COLUMN&apos; or privsDepRec.&quot;type&quot; = &apos;TREE&apos;) THEN
			-- Run-time privileges: Check for SELECT on passed-in, analyzed resource path
			if     (privsDepRec.c_S = 1) THEN
				SET privsDepRec.privilegeStatus = &apos;PASS&apos;;
			ELSEIF (privsDepRec.c_S = 0) THEN
				SET privsDepRec.privilegeStatus = &apos;FAIL&apos;;
				SET privsDepRec.privilegeRunTimeAnalysis = privsDepRec.privilegeRunTimeAnalysis || &apos;-SELECT &apos;;	
			END IF;

			-- Design-time privileges
			IF (privsDepRec.c_R = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+READ &apos;;
			END IF;
			IF (privsDepRec.c_W = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
			END IF;
			IF (privsDepRec.c_G = 1) THEN
				SET privsDepRec.privilegeDesignTimeAnalysis = privsDepRec.privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
			END IF;
		END IF;

		-- Validate the current status with the displayStatusType being passed in.
		IF (displayStatusType is null or LENGTH(TRIM(displayStatusType)) = 0 or POSITION(privsDepRec.privilegeStatus IN UPPER(displayStatusType)) &gt; 0) THEN
			-- The first rows output is the resource itself
			INSERT INTO result VALUES (privsDepRec);
		END IF;

		IF (debug1 is not null and debug1 = &apos;Y&apos;) THEN
			SET message = moduleName || &apos; : PARENT: i=&apos;||i||&apos; PATH=&apos;||privsDepRec.&quot;path&quot;||&apos;_______&apos;||privsDepRec.name||&apos;:&apos;||privsDepRec.nameType||&apos;:&apos;||privsDepRec.&quot;domain&quot;||&apos;_______&apos;||
				&apos;  privilegeStatus=&apos;||NVL(privsDepRec.privilegeStatus, &apos; &apos;)||
				&apos;  privilegeRunTimeAnalysis=&apos;||NVL(privsDepRec.privilegeRunTimeAnalysis, &apos; &apos;)||
				&apos;  privilegeDesignTimeAnalysis=&apos;||NVL(privsDepRec.privilegeDesignTimeAnalysis, &apos; &apos;);
			CALL print(message);
			CALL log(message);
		END IF;
	END FOR;

	/************************************************************************
     * Retrieve the list of lineage dependencies and ancestors for the input resource
	 ************************************************************************/
	FOR r AS 
		SELECT resourceID, treeType, resName, resPath, resType, subtype, enabled 
			FROM /shared/ASAssets/Utilities/repository/getResourceLineageRecursiveAncestors(
				null,					-- null to start with
				null, 					-- null to start with
				null, 					-- null to start with
				null,					-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
										-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
				resourcePath, 			-- actual resource path and not a folder path
				resourceType, 			-- The resource type
				1,						-- return a unique list of resources and ancestors
				excludePathsList, 		-- comma separate list of resource paths or partials paths to exclude
				0,					 	-- flag to get the data source ancestory (1=yes, 0=no)
				inIgnoreResourceDoesNotExist -- Ignore any resources that do not exist
			) 
		WHERE resPath != &apos;/&apos; 
		  AND resPath != &apos;/shared&apos; 
		  AND resPath != &apos;/services&apos; 
		  AND resPath != &apos;/services/databases&apos; 
		  AND resPath != &apos;/services/webservices&apos;
	DO
		-- If the resource has not been used before then add it to the list of resources to be returned
		IF (POSITION(r.resourceID IN resourceIdList) = 0) THEN
			/************************************************************************
 		    * Retrieve the privileges for each dependency and ancestor resource.
			 ***********************************************************************/
			SET resourceIdList = resourceIdList || r.resourceID || &apos; &apos;;

			-- Make sure the current resource is not the starting parent resource. 
			IF (r.resourceID != privsDepRec.resourceID) THEN
				-- Retrieve the privileges for the given resource based on filters that were passed in.
				FOR p AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourcePrivileges(
					r.resPath, r.resType, nameTypeFilter, domainFilter, 
					includeNameEqualFilter, includeNameLikeFilter, excludeNameNotEqualFilter, excludeNameNotLikeFilter,
					includePrivsEqualFilter, includePrivsLikeFilter, excludePrivsNotEqualFilter, excludePrivsNotLikeFilter, includeColumnPrivs, debug2) 
				DO
					-- Initialize loop variables
					SET i = i + 1;
					SET privilegeStatus = &apos;UNKNOWN&apos;;
					SET privilegeRunTimeAnalysis = &apos;&apos;;
					SET privilegeDesignTimeAnalysis = &apos;&apos;;
					SET privsDepRec.resourceID = r.resourceID;
					SET privsDepRec.treeType = r.treeType;
					SET privsDepRec.resName = r.resName;
					SET privsDepRec.&quot;path&quot; = r.resPath;
					SET privsDepRec.&quot;type&quot; = r.resType;
					SET privsDepRec.subType = r.subtype;
					SET privsDepRec.enabled = r.enabled;
					-- If the path chnages such as COLUMNS then save the new path for display.  COLUMNS do not have subtypes.  They are given the resourceID of the parent table.
					IF (r.resPath != p.&quot;path&quot;) THEN
						SET privsDepRec.&quot;path&quot; = p.&quot;path&quot;;
						SET privsDepRec.&quot;type&quot; = p.&quot;type&quot;;
						CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(privsDepRec.&quot;path&quot;, &apos;R&apos;, &apos;/&apos;, 1, 1, privsDepRec.resName);
						SET privsDepRec.subType = &apos;&apos;;
					END IF;

					/************************************************************************
 				    * Evaluate the privileges:
					 ***********************************************************************/
					-- Check to see if the privilege identified by name+nameType+domain exists in the no access list cross-referenced from the passed in resource path.
					--  If this resource name+nameType+domain combination has no access or combined privs=NONE and so does the parent resource name+nameType+domain combination
					--    then it is given a privilegeStatus=NOACCESS which is consistent with the parent resource.
					--  If this resource name+nameType+domain combination has additional privileges as compared to NONE present by the parent resource name+nameType+domain combination
					--    then it is given a privilegeStatus=FAIL and the privilegeRunTimeAnalysis is set with which additional privilege is being set.
					SET noAccessItem = p.name||&apos;:&apos;||p.nameType||&apos;:&apos;||p.&quot;domain&quot;;
					IF (POSITION(noAccessItem IN noAccessList1) &gt; 0 OR POSITION(noAccessItem IN noAccessList2) &gt; 0) THEN
						IF (p.c_N = 1) THEN -- &apos;NONE&apos;
							SET privilegeStatus = &apos;NOACCESS&apos;;
						ELSE
							SET privilegeStatus = &apos;NOACCESS&apos;;
							IF (p.c_R = 1) THEN -- &apos;READ&apos;
								SET privilegeRunTimeAnalysis = privilegeRunTimeAnalysis || &apos;+READ &apos;;
								SET privilegeStatus = &apos;WARNING&apos;;
							END IF;
							IF (p.c_S = 1) THEN -- &apos;SELECT&apos;
								SET privilegeRunTimeAnalysis = privilegeRunTimeAnalysis || &apos;+SELECT &apos;;
								SET privilegeStatus = &apos;WARNING&apos;;
							END IF;
							IF (p.c_E = 1) THEN -- &apos;EXECUTE&apos;
								SET privilegeRunTimeAnalysis = privilegeRunTimeAnalysis || &apos;+EXECUTE &apos;;
								SET privilegeStatus = &apos;WARNING&apos;;
							END IF;
						END IF;

						-- Design-time privileges
						IF (p.c_R = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+READ &apos;;
						END IF;
						IF (p.c_W = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
						END IF;
						IF (p.c_G = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
						END IF;

					-- Analyze CONTAINERs or DATA_SOURCEs or LINKs or DEFINITION_SETs or TRIGGERs or MODELs
					ELSEIF (r.resType = &apos;CONTAINER&apos; or r.resType = &apos;DATA_SOURCE&apos; or r.resType = &apos;LINK&apos; or r.resType = &apos;DEFINITION_SET&apos; or r.resType = &apos;TRIGGER&apos; or r.resType = &apos;MODEL&apos; or r.resType = &apos;POLICY&apos;) THEN
						-- Run-time privileges: Check for READ on analyzed resource
						if     (p.c_R = 1) THEN
							SET privilegeStatus = &apos;PASS&apos;;
						-- Check for NO READ on analyzed resource
						ELSEIF (p.c_R = 0) THEN
							SET privilegeStatus = &apos;FAIL&apos;;
							SET privilegeRunTimeAnalysis = privilegeRunTimeAnalysis || &apos;-READ &apos;;	
						END IF;

						-- Design-time privileges
						IF (p.c_R = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+READ &apos;;
						END IF;
						IF (p.c_W = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
						END IF;
						IF (p.c_G = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
						END IF;

					-- Analyze PROCEDUREs
					ELSEIF (r.resType = &apos;PROCEDURE&apos;) THEN
						-- Run-time privileges: Check for EXECUTE on PROCEDUREs
						if     (p.c_E = 1) THEN
							SET privilegeStatus = &apos;PASS&apos;;
						ELSEIF (p.c_E = 0) THEN
							SET privilegeStatus = &apos;FAIL&apos;;
							SET privilegeRunTimeAnalysis = privilegeRunTimeAnalysis || &apos;-EXECUTE &apos;;	
						END IF;

						-- Design-time privileges
						IF (p.c_R = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+READ &apos;;
						END IF;
						IF (p.c_W = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
						END IF;
						IF (p.c_G = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
						END IF;

					-- Analyze TABLEs and TREEs
					ELSEIF (r.resType = &apos;TABLE&apos; or privsDepRec.&quot;type&quot; = &apos;COLUMN&apos; or r.resType = &apos;TREE&apos;) THEN
						-- Run-time privileges: Check for SELECT on TABLEs or TREEs
						if     (p.c_S = 1) THEN
							SET privilegeStatus = &apos;PASS&apos;;
						ELSEIF (p.c_S = 0) THEN
							SET privilegeStatus = &apos;FAIL&apos;;
							SET privilegeRunTimeAnalysis = privilegeRunTimeAnalysis || &apos;-SELECT &apos;;	
						END IF;

						-- Design-time privileges
						IF (p.c_R = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+READ &apos;;
						END IF;
						IF (p.c_W = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+WRITE &apos;;	
						END IF;
						IF (p.c_G = 1) THEN
							SET privilegeDesignTimeAnalysis = privilegeDesignTimeAnalysis || &apos;+GRANT &apos;;	
						END IF;
					END IF;

					-- Trim the Run time and Design time analysis variables.
					SET privilegeRunTimeAnalysis = TRIM(privilegeRunTimeAnalysis);
					SET privilegeDesignTimeAnalysis = TRIM(privilegeDesignTimeAnalysis);

					IF (debug1 is not null and debug1 = &apos;Y&apos;) THEN
						SET message = moduleName || &apos; : CHILD_: i=&apos;||i||&apos; PATH=&apos;||privsDepRec.&quot;path&quot;||&apos;_______&apos;||p.name||&apos;:&apos;||p.nameType||&apos;:&apos;||p.&quot;domain&quot;||&apos;_______&apos;||
							&apos;  privilegeStatus=&apos;||NVL(privilegeStatus, &apos; &apos;)||
							&apos;  privilegeRunTimeAnalysis=&apos;||NVL(privilegeRunTimeAnalysis, &apos; &apos;)||
							&apos;  privilegeDesignTimeAnalysis=&apos;||NVL(privilegeDesignTimeAnalysis, &apos; &apos;);
						CALL print(message);
						CALL log(message);
					END IF;

					-- Validate the current status with the displayStatusType being passed in.
					IF (displayStatusType is null or LENGTH(TRIM(displayStatusType)) = 0 or POSITION(privilegeStatus IN UPPER(displayStatusType)) &gt; 0) THEN
						-- Insert the dependency resource or ancestor privileges into the output pipe
						INSERT INTO result VALUES (privsDepRec.resourceID, privsDepRec.treeType, privsDepRec.resName, privsDepRec.&quot;path&quot;, privsDepRec.&quot;type&quot;, privsDepRec.subtype, privsDepRec.enabled, 
											p.name, p.nameType, p.&quot;domain&quot;, 
											privilegeStatus, privilegeRunTimeAnalysis, privilegeDesignTimeAnalysis, 
											p.privs, p.combinedPrivs, p.inheritedPrivs,
											p.p_N,p.p_R,p.p_W,p.p_E,p.p_S,p.p_U,p.p_I,p.p_D,p.p_G,--actual privileges
											p.c_N,p.c_R,p.c_W,p.c_E,p.c_S,p.c_U,p.c_I,p.c_D,p.c_G,--combined privileges
											p.i_N,p.i_R,p.i_W,p.i_E,p.i_S,p.i_U,p.i_I,p.i_D,p.i_G);--inherited privileges
					END IF;
				END FOR;
			END IF;
		END IF;
	END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">1400812991944</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="public_types" type="MAP">
    <item>
      <key type="STRING">privilegeDependencies</key>
      <value type="BYTE_ARRAY">EB8GAgAVAHAAcgBpAHYAaQBsAGUAZwBlAEQAZQBwAGUAbgBkAGUAbgBjAGkAZQBzBikARgAvAHMA
aABhAHIAZQBkAC8AQQBTAEEAcwBzAGUAdABzAC8AVQB0AGkAbABpAHQAaQBlAHMALwByAGUAcABv
AHMAaQB0AG8AcgB5AC8AZwBlAHQAUgBlAHMAbwB1AHIAYwBlAFAAcgBpAHYAaQBsAGUAZwBlAEQA
ZQBwAGUAbgBkAGUAbgBjAGkAZQBzBioAFQBwAHIAaQB2AGkAbABlAGcAZQBEAGUAcABlAG4AZABl
AG4AYwBpAGUAcwMSAAAAAQMSAAAAAQETAQkUAAAAKxAhBhUACgByAGUAcwBvAHUAcgBjAGUASQBE
Ay8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAACBkQGQYCAAcASQBOAFQARQBHAEUA
UgMSAAAAAgQH/////4AAAAAEBgAAAAB//////////xAhBhUACAB0AHIAZQBlAFQAeQBwAGUDLwAA
AAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAAIGRAbBgIABwBWAEEAUgBDAEgAQQBSAxIA
AAADBAQAAAAAAAAA/wETAf////8QIQYVAAcAcgBlAHMATgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAA
AQMbAAAAAQMg/////wMiAAAAAAMSAAAAA///ECEGFQAEAHAAYQB0AGgDLwAAAAEDFgAAAAADGgAA
AAEDGwAAAAEDIP////8DIgAAAAAIGRAbBgIADABSAGUAcwBvAHUAcgBjAGUAUABhAHQAaAYpABoA
LwBsAGkAYgAvAHIAZQBzAG8AdQByAGMAZQAvAFIAZQBzAG8AdQByAGMAZQBEAGUAZgBzBioADABS
AGUAcwBvAHUAcgBjAGUAUABhAHQAaAMSAAAABAQEAAAAAAAAEAABEwH/////ECEGFQAEAHQAeQBw
AGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAAIGRAbBgIADABSAGUAcwBvAHUA
cgBjAGUAVAB5AHAAZQYpABoALwBsAGkAYgAvAHIAZQBzAG8AdQByAGMAZQAvAFIAZQBzAG8AdQBy
AGMAZQBEAGUAZgBzBioADABSAGUAcwBvAHUAcgBjAGUAVAB5AHAAZQMSAAAABQQEAAAAAAAAACgB
EwH/////ECEGFQAHAHMAdQBiAFQAeQBwAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8D
IgAAAAADEgAAAAP//xAhBhUABwBlAG4AYQBiAGwAZQBkAy8AAAABAxYAAAAAAxoAAAABAxsAAAAB
AyD/////AyIAAAAACBkQGQYCAAMAQgBJAFQDEgAAAAYEBwAAAAAAAAAABAYAAAAAAAAAAf////8Q
IQYVAAQAbgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAA///
ECEGFQAIAG4AYQBtAGUAVAB5AHAAZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAA
AAMSAAAAA///ECEGFQAGAGQAbwBtAGEAaQBuAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////
AyIAAAAAAxIAAAAD//8QIQYVAA8AcAByAGkAdgBpAGwAZQBnAGUAUwB0AGEAdAB1AHMDLwAAAAED
FgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAP//xAhBhUAGABwAHIAaQB2AGkAbABl
AGcAZQBSAHUAbgBUAGkAbQBlAEEAbgBhAGwAeQBzAGkAcwMvAAAAAQMWAAAAAAMaAAAAAQMbAAAA
AQMg/////wMiAAAAAAMSAAAAA///ECEGFQAbAHAAcgBpAHYAaQBsAGUAZwBlAEQAZQBzAGkAZwBu
AFQAaQBtAGUAQQBuAGEAbAB5AHMAaQBzAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIA
AAAAAxIAAAAD//8QIQYVAAUAcAByAGkAdgBzAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////
AyIAAAAAAxIAAAAD//8QIQYVAA0AYwBvAG0AYgBpAG4AZQBkAFAAcgBpAHYAcwMvAAAAAQMWAAAA
AAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAA///ECEGFQAOAGkAbgBoAGUAcgBpAHQAZQBk
AFAAcgBpAHYAcwMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAA///ECEG
FQADAHAAXwBOAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYV
AAMAcABfAFIDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUA
AwBwAF8AVwMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQAD
AHAAXwBFAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMA
cABfAFMDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBw
AF8AVQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAHAA
XwBJAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAcABf
AEQDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBwAF8A
RwMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAGMAXwBO
Ay8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAYwBfAFID
LwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBjAF8AVwMv
AAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAGMAXwBFAy8A
AAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAYwBfAFMDLwAA
AAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBjAF8AVQMvAAAA
AQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAGMAXwBJAy8AAAAB
AxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAYwBfAEQDLwAAAAED
FgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBjAF8ARwMvAAAAAQMW
AAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAGkAXwBOAy8AAAABAxYA
AAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAaQBfAFIDLwAAAAEDFgAA
AAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBpAF8AVwMvAAAAAQMWAAAA
AAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAGkAXwBFAy8AAAABAxYAAAAA
AxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAaQBfAFMDLwAAAAEDFgAAAAAD
GgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBpAF8AVQMvAAAAAQMWAAAAAAMa
AAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAABv//ECEGFQADAGkAXwBJAy8AAAABAxYAAAAAAxoA
AAABAxsAAAABAyD/////AyIAAAAAAxIAAAAG//8QIQYVAAMAaQBfAEQDLwAAAAEDFgAAAAADGgAA
AAEDGwAAAAEDIP////8DIgAAAAADEgAAAAb//xAhBhUAAwBpAF8ARwMvAAAAAQMWAAAAAAMaAAAA
AQMbAAAAAQMg/////wMiAAAAAAMSAAAABv////8=</value>
    </item>
  </attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/428</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/605</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/427</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/604</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>