<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getServerAttributeList" path="/shared/ASAssets/Utilities/repository/server/getServerAttributeList" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getServerAttributeList:
    Get all keys in the list for the passed in Key List Identifier.
 
	Input:
   	 	attributePath - a server attribute path that contains a list like: /studio/data/examplelist
	Output:
		cursor
			keyName		- The key for the list

	Exceptions:  Exception is thrown if a path does not exist or the user does not have permission

	Author:      Mike Tinius
	Date:        2/10/2012
	CSW Version: 5.2.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="attributePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="keyName">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/repository/server/helper/getServerAttributeValueListXSLT" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inXML" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT" nullable="false">
        <datatype type="TABLE" refId="3">
          <element name="keyName">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/server/helper/getServerAttributeXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="attributePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="getServerAttributesResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getServerAttributeList:
    Get all keys in the list for the passed in Key List Identifier.
 
	Input:
   	 	attributePath - a server attribute path that contains a list like: /studio/data/examplelist
	Output:
		cursor
			keyName		- The key for the list

	Exceptions:  Exception is thrown if a path does not exist or the user does not have permission

	Author:      Mike Tinius
	Date:        2/10/2012
	CSW Version: 5.2.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getServerAttributeList(
   	IN  attributePath		LONGVARCHAR, -- a server attribute path that contains a map like: /studio/data/examplelist
	OUT result 				PIPE	(
		keyName				LONGVARCHAR  	-- This is the value for a given key in a map object
	)
)
BEGIN
	DECLARE getServerAttributesResponse	XML;
	DECLARE faultResponse				XML;
	DECLARE serverAttrXSLT				LONGVARCHAR;
	DECLARE ex							EXCEPTION;

	call /shared/ASAssets/Utilities/repository/server/helper/getServerAttributeXML(attributePath,getServerAttributesResponse,faultResponse);
  	if (faultResponse is not null) then
		raise ex value cast(faultResponse as longvarchar);
	else
		for r as 
			select * from /shared/ASAssets/Utilities/repository/server/helper/getServerAttributeValueListXSLT(getServerAttributesResponse) 
		do
			insert into result values(r);
		end for;
	end if;
END
</attribute>
  <attribute name="creationDate" type="LONG">1383622341196</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>