<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getResourceLineageRecursive" path="/shared/ASAssets/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getResourceLineageRecursive:

	This procedure recursively walks the dependent tree to discover resource lineage.
	
	This procedure uses the resource ID to show the lineage by returning the correlation of the resourceID and the parentID.
	The parentID refers back to the resourceID.  The lineage is discovered as the procedure recursively walks the tree.
	Additionally, the for each child falling within a set of conditions, the ancestor of that child is returned to find out if it
	has any DATA_SOURCE types in its upstream lineage.  That information is returned along with the resource record.  
	This is a flattened way of returning the information all in one record rather than making a separate call to get this 
	information outside of this procedure.  However, the user of this procedure may determine that they do not 	want to 
	calculate ancestors so there is an option to turn that off.

	Input:
		inSeqNum - sequence number starting with 1.  
			Null to start with.
			Value: integer value
		inParentID - the id of the parent.  
			Null on the first invocation.
			Value: integer value
		inResourceDepth - the depth of the parent (number of levels which recursion has occurred). 
			Null on the first invocation.
			Value: integer value
		inLineageResourceIdList	- a list of space separated resource ids built up as the resources are traversed. 
								 Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
			Null on the first invocation.
			Value: a list of space separated resource ids
   		resourcePath - CIS source path to an actual resource
			Values: e.g. /shared/examples/CompositeView [this is a SQL VIEW.]
		resourceType - Type of CIS resource to be created.  It is null on the first invocation.
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
		excludePathsList	- comma separate list of resource paths or partials paths to exclude
			Values: /shared/Utilities,/lib
		datasourceAncestor	- flag to get the data source ancestor 
			Values: 1=yes, 0=no
		inIgnoreResourceDoesNotExist - Ignore any resources that do not exist
			Values: 1 = Bypass the processing of that resource.  0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.

	Output:
	resourceTreeList 			PIPE /shared/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
		DECLARE PUBLIC TYPE lineageTreeType ROW (
			seqNum					INTEGER,
			resourceID				INTEGER,
			parentID				INTEGER,
			resDepth				INTEGER,
			treeType				VARCHAR(255), -- Parent, Child
			resName 				VARCHAR(255), 
			resPath 				TypeDefinitions.pathType,
			resType					VARCHAR(255),
			subType					VARCHAR(255),
			enabled					BIT,
			dsID					INTEGER,
			dsResName				VARCHAR(255),
			dsResPath				TypeDefinitions.pathType,
			dsResType 				VARCHAR(255),
			dsResSubType			VARCHAR(255),
			dsEnabled				BIT,
			dsChildCount			INTEGER
		)
Values: example:
seqNum	resourceID	parentID	resDepth	treeType	resName							resPath												resType		subType					enabled	dsID	dsResName		dsResPath						dsResType	dsResSubType			dsEnabled	dsChildCount
1		20587		[NULL]		0			Parent		CompositeView					/shared/examples/CompositeView						TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
2		20658		20587		1			Child		ViewOrder						/shared/examples/ViewOrder							TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
3		20741		20658		2			Child		customers						/shared/examples/ds_orders/customers				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
4		20679		20658		2			Child		orderdetails					/shared/examples/ds_orders/orderdetails				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
5		20711		20658		2			Child		orders							/shared/examples/ds_orders/orders					TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
6		20670		20711		3			Child		ds_orders						/shared/examples/ds_orders							DATA_SOURCE	RELATIONAL_DATA_SOURCE	1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
7		20729		20670		4			Child		cache_status					/shared/examples/ds_orders/cache_status				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
8		20671		20670		4			Child		cache_tracking					/shared/examples/ds_orders/cache_tracking			TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
9		20689		20711		3			Child		orders_cache					/shared/examples/ds_orders/orders_cache				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
10		20774		20587		1			Child		ViewSales						/shared/examples/ViewSales							TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
11		20679		20774		2			Child		orderdetails					/shared/examples/ds_orders/orderdetails				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
12		20786		20774		2			Child		productCatalog_Transformation	/shared/examples/productCatalog_Transformation		PROCEDURE	XSLT_TRANSFORM_PROCEDURE 1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
13		20757		20786		3			Child		productCatalog.xml				/shared/examples/ds_XML/productCatalog.xml			TREE		XML_FILE_TREE			1		20756	ds_XML			/shared/examples/ds_XML			DATA_SOURCE	XML_FILE_DATA_SOURCE	1			1
14		20763		20587		1			Child		ViewSupplier					/shared/examples/ViewSupplier						TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
15		20606		20763		2			Child		inventorytransactions			/shared/examples/ds_inventory/inventorytransactions	TABLE		DATABASE_TABLE			1		20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			4
16		20619		20763		2			Child		purchaseorders					/shared/examples/ds_inventory/purchaseorders		TABLE		DATABASE_TABLE			1		20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			4
17		20644		20763		2			Child		suppliers						/shared/examples/ds_inventory/suppliers				TABLE		DATABASE_TABLE			1		20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			4

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	08/02/2010		Mike Tinius			5.1.0			Created new
	11/12/2012		Mike Tinius        	5.2.0			Expanded result cursor.
	10/28/2013		Mike Tinius			6.2.0			Added parameter inIgnoreResourceDoesNotExist
	03/20/2014		Mike Tinius			6.2.0			Added parameter inLineageResourceIdLists to detect circular references in resursive calls.
	06/10/2015		Calvin Goodrich		7.0.1			Updated to fix issue with BOOLEAN data type handling in 7.0.1.00.16

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.</annotation>
  <parameters>
    <parameter name="inSeqNum" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inParentID" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inResourceDepth" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inLineageResourceIdList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="datasourceAncestor" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inIgnoreResourceDoesNotExist" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="resourceTreeList" direction="OUT" nullable="true">
      <datatype name="lineageTreeType" type="TABLE" refId="1">
        <element name="seqNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resourceID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="parentID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resDepth">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="treeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="dsID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="dsResName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsResPath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
        </element>
        <element name="dsResType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsResSubType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsEnabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="dsChildCount">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getAncestorResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/resourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceExists" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexSplit" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Limit" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="splitElement">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/resourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getResourceLineageRecursive:

	This procedure recursively walks the dependent tree to discover resource lineage.
	
	This procedure uses the resource ID to show the lineage by returning the correlation of the resourceID and the parentID.
	The parentID refers back to the resourceID.  The lineage is discovered as the procedure recursively walks the tree.
	Additionally, the for each child falling within a set of conditions, the ancestor of that child is returned to find out if it
	has any DATA_SOURCE types in its upstream lineage.  That information is returned along with the resource record.  
	This is a flattened way of returning the information all in one record rather than making a separate call to get this 
	information outside of this procedure.  However, the user of this procedure may determine that they do not 	want to 
	calculate ancestors so there is an option to turn that off.

	Input:
		inSeqNum - sequence number starting with 1.  
			Null to start with.
			Value: integer value
		inParentID - the id of the parent.  
			Null on the first invocation.
			Value: integer value
		inResourceDepth - the depth of the parent (number of levels which recursion has occurred). 
			Null on the first invocation.
			Value: integer value
		inLineageResourceIdList	- a list of space separated resource ids built up as the resources are traversed. 
								 Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
			Null on the first invocation.
			Value: a list of space separated resource ids
   		resourcePath - CIS source path to an actual resource
			Values: e.g. /shared/examples/CompositeView [this is a SQL VIEW.]
		resourceType - Type of CIS resource to be created.  It is null on the first invocation.
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
		excludePathsList	- comma separate list of resource paths or partials paths to exclude
			Values: /shared/Utilities,/lib
		datasourceAncestor	- flag to get the data source ancestor 
			Values: 1=yes, 0=no
		inIgnoreResourceDoesNotExist - Ignore any resources that do not exist
			Values: 1 = Bypass the processing of that resource.  0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.

	Output:
	resourceTreeList 			PIPE /shared/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
		DECLARE PUBLIC TYPE lineageTreeType ROW (
			seqNum					INTEGER,
			resourceID				INTEGER,
			parentID				INTEGER,
			resDepth				INTEGER,
			treeType				VARCHAR(255), -- Parent, Child
			resName 				VARCHAR(255), 
			resPath 				TypeDefinitions.pathType,
			resType					VARCHAR(255),
			subType					VARCHAR(255),
			enabled					BIT,
			dsID					INTEGER,
			dsResName				VARCHAR(255),
			dsResPath				TypeDefinitions.pathType,
			dsResType 				VARCHAR(255),
			dsResSubType			VARCHAR(255),
			dsEnabled				BIT,
			dsChildCount			INTEGER
		)
Values: example:
seqNum	resourceID	parentID	resDepth	treeType	resName							resPath												resType		subType					enabled	dsID	dsResName		dsResPath						dsResType	dsResSubType			dsEnabled	dsChildCount
1		20587		[NULL]		0			Parent		CompositeView					/shared/examples/CompositeView						TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
2		20658		20587		1			Child		ViewOrder						/shared/examples/ViewOrder							TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
3		20741		20658		2			Child		customers						/shared/examples/ds_orders/customers				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
4		20679		20658		2			Child		orderdetails					/shared/examples/ds_orders/orderdetails				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
5		20711		20658		2			Child		orders							/shared/examples/ds_orders/orders					TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
6		20670		20711		3			Child		ds_orders						/shared/examples/ds_orders							DATA_SOURCE	RELATIONAL_DATA_SOURCE	1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
7		20729		20670		4			Child		cache_status					/shared/examples/ds_orders/cache_status				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
8		20671		20670		4			Child		cache_tracking					/shared/examples/ds_orders/cache_tracking			TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
9		20689		20711		3			Child		orders_cache					/shared/examples/ds_orders/orders_cache				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
10		20774		20587		1			Child		ViewSales						/shared/examples/ViewSales							TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
11		20679		20774		2			Child		orderdetails					/shared/examples/ds_orders/orderdetails				TABLE		DATABASE_TABLE			1		20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			7
12		20786		20774		2			Child		productCatalog_Transformation	/shared/examples/productCatalog_Transformation		PROCEDURE	XSLT_TRANSFORM_PROCEDURE 1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
13		20757		20786		3			Child		productCatalog.xml				/shared/examples/ds_XML/productCatalog.xml			TREE		XML_FILE_TREE			1		20756	ds_XML			/shared/examples/ds_XML			DATA_SOURCE	XML_FILE_DATA_SOURCE	1			1
14		20763		20587		1			Child		ViewSupplier					/shared/examples/ViewSupplier						TABLE		SQL_TABLE				1		[NULL]	[NULL]			[NULL]							[NULL]		[NULL]					[NULL]		[NULL]
15		20606		20763		2			Child		inventorytransactions			/shared/examples/ds_inventory/inventorytransactions	TABLE		DATABASE_TABLE			1		20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			4
16		20619		20763		2			Child		purchaseorders					/shared/examples/ds_inventory/purchaseorders		TABLE		DATABASE_TABLE			1		20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			4
17		20644		20763		2			Child		suppliers						/shared/examples/ds_inventory/suppliers				TABLE		DATABASE_TABLE			1		20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE	RELATIONAL_DATA_SOURCE	1			4

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	08/02/2010		Mike Tinius			5.1.0			Created new
	11/12/2012		Mike Tinius        	5.2.0			Expanded result cursor.
	10/28/2013		Mike Tinius			6.2.0			Added parameter inIgnoreResourceDoesNotExist
	03/20/2014		Mike Tinius			6.2.0			Added parameter inLineageResourceIdLists to detect circular references in resursive calls.
	06/10/2015		Calvin Goodrich		7.0.1			Updated to fix issue with BOOLEAN data type handling in 7.0.1.00.16

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getResourceLineageRecursive(
	IN inSeqNum						INTEGER,		-- null to start with
	IN inParentID					INTEGER, 		-- null to start with
	IN inResourceDepth				INTEGER, 		-- null to start with
	IN inLineageResourceIdList		LONGVARCHAR,	-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
								 					-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
	IN resourcePath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
	IN resourceType					VARCHAR, 		-- The resource type
	IN excludePathsList				LONGVARCHAR, 	-- comma separate list of resource paths or partials paths to exclude
	IN datasourceAncestor			INTEGER, 		-- flag to get the data source ancestory (1=yes, 0=no)
	IN inIgnoreResourceDoesNotExist	INTEGER, 		-- Ignore any resources that do not exist
													-- 1 = Bypass the processing of that resource.
													-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	OUT resourceTreeList 			PIPE /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;getResourceLineageRecursive&apos;;
	DECLARE ignoreResourceDoesNotExist	INTEGER DEFAULT NVL(inIgnoreResourceDoesNotExist,0);
	DECLARE seqNum						INTEGER DEFAULT inSeqNum;
	DECLARE parentID					INTEGER DEFAULT inParentID;
	DECLARE lineageResourceIdList		LONGVARCHAR DEFAULT inLineageResourceIdList;
	DECLARE	resDepth					INTEGER;
	DECLARE resourceID					INTEGER;
	DECLARE debug						CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE warning						CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.warning;
	DECLARE dsRec						/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.AncestorResponseType;
	DECLARE folder						/shared/ASAssets/Utilities/TypeDefinitions.pathType;
	DECLARE exclude						BOOLEAN;
	DECLARE message						LONGVARCHAR;
	DECLARE circularReferenceFound		BOOLEAN DEFAULT FALSE;
	DECLARE ex							EXCEPTION;

	IF (inResourceDepth IS NULL OR (inResourceDepth = 0 AND inParentID IS NULL)) THEN
		SET resDepth = 0;
	ELSE
		SET resDepth = inResourceDepth + 1;		
	END IF;

	IF (seqNum IS NULL) THEN
		SET seqNum = 0;
	END IF;
	SET seqNum = seqNum + 1;	

	IF (lineageResourceIdList IS NULL) THEN
		set lineageResourceIdList = &apos;&apos;;
	END IF;

	-- Check to see if any of the exclude paths are contained within the beginning of the resource path (path is at beginning when position=1)
	set exclude = false;
	excludeLoop:
	for e as select * from /shared/ASAssets/Utilities/string/TextUtils/RegexSplit(excludePathsList, &apos;,&apos;, 0) do
		if (RegexPosition(resourcePath, TRIM(e.splitElement), 1) = 1) then
			IF (debug = &apos;Y&apos;) THEN 	
				set message = &apos;exclude resourcePath=&apos;||emptyStr(resourcePath)||&apos;     resourceType=&apos;||emptyStr(resourceType); 
				call log  (moduleName||&apos; : &apos;||message);
				call print(moduleName||&apos; : &apos;||message);
			END IF;
			set exclude = true;
			leave excludeLoop;
		end if;
	end for;

	IF (NOT exclude) THEN
		IF (ResourceExists(resourcePath, resourceType) = 1) then
			-- Insert the parent resource into the pipe (first time only)
			FOR resource AS	SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, resourceType) DO

				-- Check this parent resource id against the resource id lineage list to detec circular references.
				IF (POSITION(resource.id IN lineageResourceIdList) &gt; 0) THEN
					SET circularReferenceFound = true;
				ELSE
					-- Add the resource id to the list so that it gets passed into the next invocation and resources can be tracked through recursive calls.
					SET lineageResourceIdList = lineageResourceIdList || &apos; &apos; || resource.id;
				END IF;

				IF (debug = &apos;Y&apos;) THEN 
					set message = &apos;Parent:  seqNum=&apos;||seqNum||&apos;  resourceID=&apos;||resource.id||&apos;  parentID=&apos;||emptyStr(parentID) ||&apos; depth=&apos;||emptyStr(resDepth) || &apos; name=&apos;||resource.name || &apos; circularReferenceFound=&apos;||CAST(circularReferenceFound AS VARCHAR);
					call log  (moduleName||&apos; : &apos;||message);
					call print(moduleName||&apos; : &apos;||message);
				END IF;

				-- Continue if the resource id has not been invoked previously within the context of these recursive calls. 
				-- Continue if no circular reference is detected.  Return with no action if a circular reference is found.
				IF (NOT circularReferenceFound) THEN
					-- Initialize the datasource record
					set dsRec.id = null;
					set dsRec.resourceName = null;
					set dsRec.resourcePath = null;
					set dsRec.resourceType = null;
					set dsRec.subtype = null;
					set dsRec.enabled = null;
					set dsRec.childCount = null;

					-- Get the resource ancestory if datasourceAncestor=1
					-- Determine if this resource has a DATA_SOURCE type resource in its ancestory
					IF (datasourceAncestor IS NOT NULL AND datasourceAncestor = 1) THEN
						IF (resource.&quot;type&quot; NOT IN (&apos;TRIGGER&apos;)) THEN
							IF (resource.subtype NOT IN (&apos;SQL_TABLE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,&apos;FOLDER_CONTAINER&apos;) ) THEN
								FOR ds AS 
									SELECT * FROM /shared/ASAssets/Utilities/repository/getAncestorResources(resourcePath, resourceType) WHERE resourceType = &apos;DATA_SOURCE&apos; 
								DO
									SET dsRec = ds;
									call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(ds.resourcePath, &apos;E&apos;, ds.resourceName, folder);
								END FOR;
							END IF;
						END IF;
					END IF;
					-- Add the record to the output
					INSERT INTO resourceTreeList VALUES (seqNum, resource.id, parentID, resDepth, &apos;Parent&apos;, resource.name, resource.&quot;path&quot;,resource.&quot;type&quot;, resource.subType, resource.enabled, dsRec.id, dsRec.resourceName, dsRec.resourcePath, dsRec.resourceType, dsRec.subtype, dsRec.enabled, dsRec.childCount);
					set parentID = resource.id;
				END IF;
			END FOR;

			-- Continue if the resource id has not been invoked previously within the context of these recursive calls. 
			-- Continue if no circular reference is detected.  Return with no action if a circular reference is found.
			IF (NOT circularReferenceFound) THEN
				-- Get resource dependents (the resources that this resource is bound to (a.k.a. used resources) )
				FOR used AS SELECT * FROM /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(resourcePath, resourceType) DO
/* If an error is encountered in the &apos;TypeDefinitionsRecursive&apos; file or this file and you get a java memory error when trying to 
   save either file, it is because CIS cannot save the file do to the recursive nature of this procedure.  
   Temporarilly, comment the section of code below.  Save either file where the error occurs and then uncomment and save this file. */
--Remove -- in front of -- /* to create a begin comment.
-- /*
					FOR child AS 
						SELECT * 
						FROM /shared/ASAssets/Utilities/repository/getResourceLineageRecursive(seqNum, parentID, resDepth, lineageResourceIdList, used.resourcePath, used.resourceType, excludePathsList, datasourceAncestor, ignoreResourceDoesNotExist)
					DO
						SET seqNum = seqNum + 1;
						IF (debug = &apos;Y&apos;) THEN 
							set message = &apos; Child:  seqNum=&apos;||seqNum||&apos;  resourceID=&apos;||child.resourceID||&apos;  parentID=&apos;||emptyStr(child.parentID) ||&apos; depth=&apos;||emptyStr(child.resDepth) || &apos; name=&apos;||child.resName;
							call log  (moduleName||&apos; : &apos;||message);
							call print(moduleName||&apos; : &apos;||message);
						END IF;
						INSERT INTO resourceTreeList VALUES 
							(seqNum, child.resourceID, child.parentID, child.resDepth, &apos;Child&apos;, child.resName, child.resPath, child.resType, child.subType, child.enabled, 
							 child.dsID, child.dsResName, child.dsResPath, child.dsResType, child.dsResSubType, child.dsEnabled, child.dsChildCount);
					END FOR;
--Remove -- in front of -- * / to create the end comment for the section  
-- */
				END FOR;
			END IF;
		ELSE
			IF (ignoreResourceDoesNotExist = 1) THEN
				IF (warning = &apos;Y&apos;) THEN
					set message = &apos;WARNING: Resource does not exist: type=&apos;||emptyStr(resourceType)||&apos;  path=&apos;||emptyStr(resourcePath);
					call log  (moduleName||&apos; : &apos;||message);
					call print(moduleName||&apos; : &apos;||message);
				END IF;
			ELSE
				raise ex value moduleName||&apos; : The resource type=&apos;||emptyStr(resourceType)||&apos; and path=&apos;||emptyStr(resourcePath)||&apos; does not exist.&apos;;
			END IF;
		END IF;
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1433964674989</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/158</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/235</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/234</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/250</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/181</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/249</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/182</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>