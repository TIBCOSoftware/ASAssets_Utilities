<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getDependentResourcesRecurseCursor" path="/shared/ASAssets/Utilities/repository/getDependentResourcesRecurseCursor" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDependentResourcesRecurseCursor
 
      -- CIS Repository Helper Procedure --
      This procedure recursively retrieves the dependent resource metadata for a given resource.  A cursor of metadata is returned.
 
      Input:
            fullResourcePath - Full resource path which includes the path and the resource name  
                  Values: e.g. /shared/examples/ds_orders/orders
            resourceType - Type of CIS resource to be created
                  Values: see RESOURCE_TYPE_* in the &quot;Constants&quot; tab of /lib/resource/ResourceDefs
			inLineageResourceIdList	- Null to start with.
									- A list of space separated resource ids built up as the resources are traversed. 
								 	- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
				  Values: null to start out with.  This procedure addes resource ids to the list as the depth increases.

      Output:
            result  - response containing the resource metadata
        CURSOR (
            resourceName VARCHAR(255), 
            resourcePath VARCHAR(4096), 
            resourceType VARCHAR(40), 
            subtype VARCHAR(40), 
            ownerDomain VARCHAR(255),
            ownerName VARCHAR(255),
            impactLevel VARCHAR(255),
            impactMessage VARCHAR(32768),
            enabled BIT 
        )
 
      Exceptions:  none
 
	Modified Date:	Modified By:		CSW Version:	Reason:
	04/21/2011		Calvin Goodrich		5.1.0			Created new
    02/18/2014      Jeremy Akers		6.2.0           Updated to prevent an infinite recursive loop with cache policies.
	03/28/2014		Mike Tinius			6.2.0			Updated to detect circular references with any resource by passing in the list of resource ids &quot;inLineageResourceIdList&quot; as a parameter.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="inLineageResourceIdList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="40"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="40"/>
        </element>
        <element name="id">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="ownerDomain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ownerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="impactLevel">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="impactMessage">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDependentResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDependentResourcesRecurseCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
    getDependentResourcesRecurseCursor
 
      -- CIS Repository Helper Procedure --
      This procedure recursively retrieves the dependent resource metadata for a given resource.  A cursor of metadata is returned.
 
      Input:
            fullResourcePath - Full resource path which includes the path and the resource name  
                  Values: e.g. /shared/examples/ds_orders/orders
            resourceType - Type of CIS resource to be created
                  Values: see RESOURCE_TYPE_* in the &quot;Constants&quot; tab of /lib/resource/ResourceDefs
			inLineageResourceIdList	- Null to start with.
									- A list of space separated resource ids built up as the resources are traversed. 
								 	- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
				  Values: null to start out with.  This procedure addes resource ids to the list as the depth increases.

      Output:
            result  - response containing the resource metadata
        CURSOR (
            resourceName VARCHAR(255), 
            resourcePath VARCHAR(4096), 
            resourceType VARCHAR(40), 
            subtype VARCHAR(40), 
            ownerDomain VARCHAR(255),
            ownerName VARCHAR(255),
            impactLevel VARCHAR(255),
            impactMessage VARCHAR(32768),
            enabled BIT 
        )
 
      Exceptions:  none
 
	Modified Date:	Modified By:		CSW Version:	Reason:
	04/21/2011		Calvin Goodrich		5.1.0			Created new
    02/18/2014      Jeremy Akers		6.2.0           Updated to prevent an infinite recursive loop with cache policies.
	03/28/2014		Mike Tinius			6.2.0			Updated to detect circular references with any resource by passing in the list of resource ids &quot;inLineageResourceIdList&quot; as a parameter.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getDependentResourcesRecurseCursor(
    IN fullResourcePath /lib/resource/ResourceDefs.ResourcePath,
    IN resourceType /lib/resource/ResourceDefs.ResourceType, 
	IN inLineageResourceIdList		LONGVARCHAR,	-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
								 					-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
    OUT result PIPE (
        resourceName VARCHAR(255), 
        resourcePath VARCHAR(4096), 
        resourceType VARCHAR(40), 
        subtype VARCHAR(40), 
		id INTEGER,
        ownerDomain VARCHAR(255), 
        ownerName VARCHAR(255), 
        impactLevel VARCHAR(255), 
        impactMessage VARCHAR(32768), 
        enabled BIT
    )
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;getDependentResourcesRecurseCursor&apos;;
	DECLARE lineageResourceIdList 		LONGVARCHAR DEFAULT inLineageResourceIdList;
	DECLARE debug						CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE message						LONGVARCHAR;

	-- Initialize the 1st invocation with the resource id of the resource being passed in so that it is not duplicated during a circular reference.
	if (lineageResourceIdList is null or LENGTH(TRIM(lineageResourceIdList)) = 0) then
		set lineageResourceIdList = &apos;&apos;;
		FOR br AS SELECT id FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(fullResourcePath, resourceType) DO
			set lineageResourceIdList = CAST(br.id AS VARCHAR);
		END FOR;
	end if;
	--call print(&apos;lineageResourceIdList=&apos;||lineageResourceIdList);

    FOR r AS
        SELECT
            resourceName,
            resourcePath,
            resourceType,
            subtype,
			id,
            ownerDomain,
            ownerName,
            impactLevel,
            impactMessage,
            enabled
        FROM
            /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(
                fullResourcePath,
                resourceType
            )
    DO
		-- Check this parent resource id against the resource id lineage list to detect circular references.  Keep going if not found in the list.
		IF (POSITION(r.id IN lineageResourceIdList) = 0) THEN
			-- Add the resource id to the list so that it gets passed into the next invocation and resources can be tracked through recursive calls.
			SET lineageResourceIdList = lineageResourceIdList || &apos; &apos; || r.id;

			INSERT INTO result VALUES (
				r.resourceName,
				r.resourcePath,
				r.resourceType,
				r.subtype,
				r.id,
				r.ownerDomain,
				r.ownerName,
				r.impactLevel,
				r.impactMessage,
				r.enabled
			);
			
			FOR d AS
				SELECT
					resourceName,
					resourcePath,
					resourceType,
					subtype,
					id,
					ownerDomain,
					ownerName,
					impactLevel,
					impactMessage,
					enabled
				FROM
					/shared/ASAssets/Utilities/repository/getDependentResourcesRecurseCursor(
						r.resourcePath,
						r.resourceType,
						lineageResourceIdList
					)
			DO
				INSERT INTO result VALUES (
					d.resourceName,
					d.resourcePath,
					d.resourceType,
					d.subtype,
					d.id,
					d.ownerDomain,
					d.ownerName,
					d.impactLevel,
					d.impactMessage,
					d.enabled
				);
			END FOR;
		ELSE
			-- Log the fact that the resource id has been encountered again within the lineage chain.
			IF (debug = &apos;Y&apos;) THEN 	
				set message = &apos;Circular Rereference found. id=&apos;||r.id || &apos;  path=&apos;||r.resourcePath; 
				call log  (moduleName||&apos; : &apos;||message);
				call print(moduleName||&apos; : &apos;||message);
			END IF;
		END IF;
    END FOR;
END

</attribute>
  <attribute name="creationDate" type="LONG">1376679119330</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/160</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>