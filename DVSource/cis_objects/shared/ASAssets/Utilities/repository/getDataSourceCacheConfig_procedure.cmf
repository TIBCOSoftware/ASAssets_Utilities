<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getDataSourceCacheConfig" path="/shared/ASAssets/Utilities/repository/getDataSourceCacheConfig" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDataSourceCacheConfig:

This procedure returns the cache status and cache tracking table paths of a data source.


Input:

  inDataSourcePath - Path to the cached resource.  
    Values: Any valid path to a data source.


Output:

  StatusTablePath - The path to the data source&apos;s cache status table. 
    Values: A resource path or NULL if the status table isn&apos;t defined.

  TrackingTablePath - The path to the data source&apos;s cache tracking table. 
    Values: A resource path or NULL if the status table isn&apos;t defined.


Exceptions:  none


Author:      Calvin Goodrich
Date:        9/10/2010
CSW Version: 5.1.0

© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="inDataSourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="StatusTablePath" direction="OUT" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="TrackingTablePath" direction="OUT" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getResourceAttributes61XSLT" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="getResource" direction="IN">
        <datatype name="getResource" extendedName="{http://www.compositesw.com/services/system/admin/resource}getResource" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}getResource" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}getResource">
          <schemaDatatype>
            <datatype name="getResource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="getResourceRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="2">
              <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="detail" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="detailLevel" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT" nullable="false">
        <datatype type="TABLE" refId="3">
          <element name="attrName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="attrValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    getDataSourceCacheConfig:
    
    This procedure returns the cache status and cache tracking table paths of a data source.
    
    
    Input:
    
      inDataSourcePath - Path to the cached resource.  
        Values: Any valid path to a data source.
    
    
    Output:
    
      StatusTablePath - The path to the data source&apos;s cache status table. 
        Values: A resource path or NULL if the status table isn&apos;t defined.
    
      TrackingTablePath - The path to the data source&apos;s cache tracking table. 
        Values: A resource path or NULL if the status table isn&apos;t defined.
    
    
    Exceptions:  none
    
    
    Author:      Calvin Goodrich
    Date:        9/10/2010
    CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getDataSourceCacheConfig(
    IN inDataSourcePath VARCHAR(255), 
    OUT StatusTablePath /lib/resource/ResourceDefs.ResourcePath, 
    OUT TrackingTablePath /lib/resource/ResourceDefs.ResourcePath
)
BEGIN
    DECLARE dsType /lib/resource/ResourceDefs.ResourceType DEFAULT /lib/resource/ResourceDefs.RESOURCE_TYPE_DATA_SOURCE;

    SELECT 
        MAX(
            CASE 
                WHEN attrName = &apos;cacheStatusTable&apos; THEN attrValue
            END
        ) StatusTablePath,
        MAX(
            CASE 
                WHEN attrName = &apos;cacheTrackingTable&apos; THEN attrValue
            END
        ) TrackingTablePath
    INTO
        StatusTablePath,
        TrackingTablePath
    FROM      
        /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getResourceAttributes61XSLT(
            &apos;&lt;ns1:getResource xmlns:ns1=&quot;http://www.compositesw.com/services/system/admin/resource&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
                &lt;ns1:path&gt;&apos; || CAST(XMLTEXT(inDataSourcePath) AS VARCHAR(2147483647)) || &apos;&lt;/ns1:path&gt;
                &lt;ns1:type&gt;&apos; || CAST(XMLTEXT(dsType) AS VARCHAR(2147483647)) || &apos;&lt;/ns1:type&gt;
                &lt;ns1:detail&gt;FULL&lt;/ns1:detail&gt;
            &lt;/ns1:getResource&gt;&apos;
        ) getDataSourceCacheConfig;
END</attribute>
  <attribute name="creationDate" type="LONG">1376679119329</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>