<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getResourceLineageRecursiveAncestors" path="/shared/ASAssets/Utilities/repository/getResourceLineageRecursiveAncestors" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getResourceLineageRecursiveAncestors:

	This procedure recursively walks the resource lineage dependency tree to discover child resources for a given input resource and their ancestor containers.  
	This procedure can optionally return the entire list of all resources and ancestors as they are discovered or a unique list of resources and ancestors given
	the variable returnUniqueRows=[1,0].

	This procedure was built as a building block with the intention to mimic the Composite Manager capability to show &quot;Dependency Privileges&quot;.  To emulate CIS Manager&apos;s
	capability, a unique list of resources and ancestors associated with the parent resource must be produce using this procedure. 	The reason for the ancestor folders 
	is that privileges need to be assigned to each folder of the ancestry tree.  This procedure provides the listing of those folders.   The &quot;driver&quot; procedure 
	&quot;getResourcePrivilegeDependencies&quot; invokes this procedure and will be responsible for retrieving privileges.  
	
	Input:
		inSeqNum - sequence number starting with 1.  
			Null to start with.
			Value: integer value
		inParentID - the id of the parent.  
			Null on the first invocation.
			Value: integer value
		inResourceDepth - the depth of the parent (number of levels which recursion has occurred). 
			Null on the first invocation.
			Value: integer value
		inLineageResourceIdList	- a list of space separated resource ids built up as the resources are traversed. 
								 Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
			Null on the first invocation.
			Value: a list of space separated resource ids
   		resourcePath - CIS source path to an actual resource
			Values: e.g. /shared/examples/CompositeView [this is a SQL VIEW.]
		resourceType - Type of CIS resource to be created.  It is null on the first invocation.
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
		returnUniqueRows - determines whether to return unique rows or all rows for the return set.
			Values: 1 = (default) return a unique set of rows.  No duplicate resource paths are returned.
					0 = return all rows as selected regardless of their uniqueness or not.
		excludePathsList	- comma separate list of resource paths or partials paths to exclude
			Values: /shared/Utilities,/lib
		datasourceAncestor	- flag to get the data source ancestor 
			Values: 1=yes, 0=no
		ignoreResourceDoesNotExist - Ignore any resources that do not exist
			Values: 1 = Bypass the processing of that resource.  0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.

	Output:
	resourceTreeList 			PIPE /shared/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
		DECLARE PUBLIC TYPE lineageTreeType ROW (
			seqNum					INTEGER,		-- A sequential number representing a parent or child resource.  Ancestor resources will use the same sequence as the parent or child.
			resourceID				INTEGER,		-- A unique number assigned by CIS that identifies the resource in the CIS repository.
			parentID				INTEGER,		-- An association of a resource ID with its parent resource ID.
			resDepth				INTEGER,		-- The recursive depth of invocations starting at 0 for the initial parent resource.
			treeType				VARCHAR(255), 	-- Parent, Child, Ancestor.
			resName 				VARCHAR(255), 	-- The name of the resource.
			resPath 				TypeDefinitions.pathType, -- The path of the resource.
			resType					VARCHAR(255),	-- The type of the resource.  For example: CONTAINER, LINK, TABLE, TREE, PROCEDURE, DATA_SOURCE, DEFINITION_SET, TRIGGER and etc.
			subType					VARCHAR(255),	-- The subtype of the resource which qualifies what type of resource it is.
			enabled					BIT,			-- Determines if the resource is enabled or not. 1=enabled, 0=disabled.
			dsID					INTEGER,		-- The associated datasource (resource) ID.
			dsResName				VARCHAR(255),	-- The datasource name.
			dsResPath				TypeDefinitions.pathType, -- The path of the datasource.
			dsResType 				VARCHAR(255),	-- The datasource type - DATA_SOURCE.
			dsResSubType			VARCHAR(255),	-- The datasource subtype which qualifies what type the datasource it is.
			dsEnabled				BIT,			-- Determines if the resource is enabled or not. 1=enabled, 0=disabled.
			dsChildCount			INTEGER			-- Provides a count of how many child tables the datasource has.
		)

Values example: 
	The first row is the parent resource which was passed into this procedure.  
	The next set of results show the ancestory of the input resource.  The ancestory are the folders starting at root and working down to the ancestor folder of the resource itself.
	The next set of resources displayed are the resources in the downstream lineage such as orderdetails.  These are also known as child resources.  
	For each child resource in the lineage, the ancestor folders are displayed.   There will be duplicates unless the input variable returnUniqueRows=1 was specified to return 
	only unique rows.  Typically, the invoker of the this method will invoke it with returnUniqueRows=1 so that repeating resource paths are trimmed out.

Input: resourcePath=/shared/examples/ViewSales
       resourceType=TABLE
       returnUniqueRows=1 &lt;-- return non-duplicate rows only
       datasourceAncestor=1
Output:
seqNum	resourceID	parentID resDepth	treeType	resName							resPath										resType			subType				enabled	dsID	dsResName	dsResPath					dsResType		dsResSubType 			dsEnabled	dsChildCount
1,		22063,		[NULL],	0,			Parent,		ViewSales,						/shared/examples/ViewSales,					TABLE,			SQL_TABLE,				1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
1,		1,			[NULL],	0,			Ancestor,	[NULL],							/,											CONTAINER,		NONE,					1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
1,		10104,		[NULL],	0,			Ancestor,	shared,							/shared,									CONTAINER,		FOLDER_CONTAINER,		1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
1,		21871,		[NULL],	0,			Ancestor,	examples,						/shared/examples,							CONTAINER,		FOLDER_CONTAINER,		1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
2,		21901,		22063,	1,			Child,		orderdetails,					/shared/examples/ds_orders/orderdetails,	TABLE,			DATABASE_TABLE,			1,	21892,	ds_orders,	/shared/examples/ds_orders,	DATA_SOURCE,	RELATIONAL_DATA_SOURCE,	1,			7
2,		21892,		22063,	1,			Ancestor,	ds_orders,						/shared/examples/ds_orders,					DATA_SOURCE,	RELATIONAL_DATA_SOURCE,	1,	21892,	ds_orders,	/shared/examples/ds_orders,	DATA_SOURCE,	RELATIONAL_DATA_SOURCE,	1,			7
3,		22061,		22063,	1,			Child,		productCatalog_Transformation,	/shared/examples/productCatalog_Transformation,PROCEDURE,	XSLT_TRANSFORM_PROCEDURE,1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
4,		22044,		22061,	2,			Child,		productCatalog.xml,				/shared/examples/ds_XML/productCatalog.xml,	TREE,			XML_FILE_TREE,			1,	22043,	ds_XML,		/shared/examples/ds_XML,	DATA_SOURCE,	XML_FILE_DATA_SOURCE,	1,			1
4,		22043,		22061,	2,			Ancestor,	ds_XML,							/shared/examples/ds_XML,					DATA_SOURCE,	XML_FILE_DATA_SOURCE,	1,	22043,	ds_XML,		/shared/examples/ds_XML,	DATA_SOURCE,	XML_FILE_DATA_SOURCE,	1,			1

Input: resourcePath=/shared/examples/ViewSales
       resourceType=TABLE
       returnUniqueRows=0 &lt;-- return all rows including duplicates
       datasourceAncestor=0
Output:
seqNum	resourceID	parentID resDepth	treeType	resName							resPath										resType			subType				enabled	dsID	dsResName	dsResPath					dsResType		dsResSubType 			dsEnabled	dsChildCount
1		22063		[NULL]		0		Parent		ViewSales						/shared/examples/ViewSales					TABLE			SQL_TABLE				1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
1		1			[NULL]		0		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
1		10104		[NULL]		0		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
1		21871		[NULL]		0		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		21901		22063		1		Child		orderdetails					/shared/examples/ds_orders/orderdetails		TABLE			DATABASE_TABLE			1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		1			22063		1		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		10104		22063		1		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		21871		22063		1		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		21892		22063		1		Ancestor	ds_orders						/shared/examples/ds_orders					DATA_SOURCE		RELATIONAL_DATA_SOURCE	1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		22061		22063		1		Child		productCatalog_Transformation	/shared/examples/productCatalog_Transformation PROCEDURE	XSLT_TRANSFORM_PROCEDURE 1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		1			22063		1		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		10104		22063		1		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		21871		22063		1		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		1122649		22061		2		Child		productCatalog.xml				/shared/examples/ds_XML/productCatalog.xml	TREE			XML_FILE_TREE			1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		1			22061		2		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		10104		22061		2		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		21871		22061		2		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		1122648		22061		2		Ancestor	ds_XML							/shared/examples/ds_XML						DATA_SOURCE		XML_FILE_DATA_SOURCE	1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	05/22/2014		Mike Tinius			6.2.0			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="inSeqNum" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inParentID" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inResourceDepth" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inLineageResourceIdList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="returnUniqueRows" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="datasourceAncestor" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="ignoreResourceDoesNotExist" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="resourceTreeList" direction="OUT" nullable="true">
      <datatype name="lineageTreeType" type="TABLE" refId="1">
        <element name="seqNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resourceID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="parentID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resDepth">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="treeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="dsID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="dsResName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsResPath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
        </element>
        <element name="dsResType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsResSubType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsEnabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="dsChildCount">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getAncestorResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getResourceLineageRecursiveAncestors:

	This procedure recursively walks the resource lineage dependency tree to discover child resources for a given input resource and their ancestor containers.  
	This procedure can optionally return the entire list of all resources and ancestors as they are discovered or a unique list of resources and ancestors given
	the variable returnUniqueRows=[1,0].

	This procedure was built as a building block with the intention to mimic the Composite Manager capability to show &quot;Dependency Privileges&quot;.  To emulate CIS Manager&apos;s
	capability, a unique list of resources and ancestors associated with the parent resource must be produce using this procedure. 	The reason for the ancestor folders 
	is that privileges need to be assigned to each folder of the ancestry tree.  This procedure provides the listing of those folders.   The &quot;driver&quot; procedure 
	&quot;getResourcePrivilegeDependencies&quot; invokes this procedure and will be responsible for retrieving privileges.  
	
	Input:
		inSeqNum - sequence number starting with 1.  
			Null to start with.
			Value: integer value
		inParentID - the id of the parent.  
			Null on the first invocation.
			Value: integer value
		inResourceDepth - the depth of the parent (number of levels which recursion has occurred). 
			Null on the first invocation.
			Value: integer value
		inLineageResourceIdList	- a list of space separated resource ids built up as the resources are traversed. 
								 Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
			Null on the first invocation.
			Value: a list of space separated resource ids
   		resourcePath - CIS source path to an actual resource
			Values: e.g. /shared/examples/CompositeView [this is a SQL VIEW.]
		resourceType - Type of CIS resource to be created.  It is null on the first invocation.
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
		returnUniqueRows - determines whether to return unique rows or all rows for the return set.
			Values: 1 = (default) return a unique set of rows.  No duplicate resource paths are returned.
					0 = return all rows as selected regardless of their uniqueness or not.
		excludePathsList	- comma separate list of resource paths or partials paths to exclude
			Values: /shared/Utilities,/lib
		datasourceAncestor	- flag to get the data source ancestor 
			Values: 1=yes, 0=no
		ignoreResourceDoesNotExist - Ignore any resources that do not exist
			Values: 1 = Bypass the processing of that resource.  0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.

	Output:
	resourceTreeList 			PIPE /shared/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
		DECLARE PUBLIC TYPE lineageTreeType ROW (
			seqNum					INTEGER,		-- A sequential number representing a parent or child resource.  Ancestor resources will use the same sequence as the parent or child.
			resourceID				INTEGER,		-- A unique number assigned by CIS that identifies the resource in the CIS repository.
			parentID				INTEGER,		-- An association of a resource ID with its parent resource ID.
			resDepth				INTEGER,		-- The recursive depth of invocations starting at 0 for the initial parent resource.
			treeType				VARCHAR(255), 	-- Parent, Child, Ancestor.
			resName 				VARCHAR(255), 	-- The name of the resource.
			resPath 				TypeDefinitions.pathType, -- The path of the resource.
			resType					VARCHAR(255),	-- The type of the resource.  For example: CONTAINER, LINK, TABLE, TREE, PROCEDURE, DATA_SOURCE, DEFINITION_SET, TRIGGER and etc.
			subType					VARCHAR(255),	-- The subtype of the resource which qualifies what type of resource it is.
			enabled					BIT,			-- Determines if the resource is enabled or not. 1=enabled, 0=disabled.
			dsID					INTEGER,		-- The associated datasource (resource) ID.
			dsResName				VARCHAR(255),	-- The datasource name.
			dsResPath				TypeDefinitions.pathType, -- The path of the datasource.
			dsResType 				VARCHAR(255),	-- The datasource type - DATA_SOURCE.
			dsResSubType			VARCHAR(255),	-- The datasource subtype which qualifies what type the datasource it is.
			dsEnabled				BIT,			-- Determines if the resource is enabled or not. 1=enabled, 0=disabled.
			dsChildCount			INTEGER			-- Provides a count of how many child tables the datasource has.
		)

Values example: 
	The first row is the parent resource which was passed into this procedure.  
	The next set of results show the ancestory of the input resource.  The ancestory are the folders starting at root and working down to the ancestor folder of the resource itself.
	The next set of resources displayed are the resources in the downstream lineage such as orderdetails.  These are also known as child resources.  
	For each child resource in the lineage, the ancestor folders are displayed.   There will be duplicates unless the input variable returnUniqueRows=1 was specified to return 
	only unique rows.  Typically, the invoker of the this method will invoke it with returnUniqueRows=1 so that repeating resource paths are trimmed out.

Input: resourcePath=/shared/examples/ViewSales
       resourceType=TABLE
       returnUniqueRows=1 &lt;-- return non-duplicate rows only
       datasourceAncestor=1
Output:
seqNum	resourceID	parentID resDepth	treeType	resName							resPath										resType			subType				enabled	dsID	dsResName	dsResPath					dsResType		dsResSubType 			dsEnabled	dsChildCount
1,		22063,		[NULL],	0,			Parent,		ViewSales,						/shared/examples/ViewSales,					TABLE,			SQL_TABLE,				1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
1,		1,			[NULL],	0,			Ancestor,	[NULL],							/,											CONTAINER,		NONE,					1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
1,		10104,		[NULL],	0,			Ancestor,	shared,							/shared,									CONTAINER,		FOLDER_CONTAINER,		1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
1,		21871,		[NULL],	0,			Ancestor,	examples,						/shared/examples,							CONTAINER,		FOLDER_CONTAINER,		1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
2,		21901,		22063,	1,			Child,		orderdetails,					/shared/examples/ds_orders/orderdetails,	TABLE,			DATABASE_TABLE,			1,	21892,	ds_orders,	/shared/examples/ds_orders,	DATA_SOURCE,	RELATIONAL_DATA_SOURCE,	1,			7
2,		21892,		22063,	1,			Ancestor,	ds_orders,						/shared/examples/ds_orders,					DATA_SOURCE,	RELATIONAL_DATA_SOURCE,	1,	21892,	ds_orders,	/shared/examples/ds_orders,	DATA_SOURCE,	RELATIONAL_DATA_SOURCE,	1,			7
3,		22061,		22063,	1,			Child,		productCatalog_Transformation,	/shared/examples/productCatalog_Transformation,PROCEDURE,	XSLT_TRANSFORM_PROCEDURE,1,	[NULL],	[NULL],		[NULL],						[NULL],			[NULL],					[NULL],		[NULL]
4,		22044,		22061,	2,			Child,		productCatalog.xml,				/shared/examples/ds_XML/productCatalog.xml,	TREE,			XML_FILE_TREE,			1,	22043,	ds_XML,		/shared/examples/ds_XML,	DATA_SOURCE,	XML_FILE_DATA_SOURCE,	1,			1
4,		22043,		22061,	2,			Ancestor,	ds_XML,							/shared/examples/ds_XML,					DATA_SOURCE,	XML_FILE_DATA_SOURCE,	1,	22043,	ds_XML,		/shared/examples/ds_XML,	DATA_SOURCE,	XML_FILE_DATA_SOURCE,	1,			1

Input: resourcePath=/shared/examples/ViewSales
       resourceType=TABLE
       returnUniqueRows=0 &lt;-- return all rows including duplicates
       datasourceAncestor=0
Output:
seqNum	resourceID	parentID resDepth	treeType	resName							resPath										resType			subType				enabled	dsID	dsResName	dsResPath					dsResType		dsResSubType 			dsEnabled	dsChildCount
1		22063		[NULL]		0		Parent		ViewSales						/shared/examples/ViewSales					TABLE			SQL_TABLE				1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
1		1			[NULL]		0		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
1		10104		[NULL]		0		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
1		21871		[NULL]		0		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		21901		22063		1		Child		orderdetails					/shared/examples/ds_orders/orderdetails		TABLE			DATABASE_TABLE			1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		1			22063		1		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		10104		22063		1		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		21871		22063		1		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
2		21892		22063		1		Ancestor	ds_orders						/shared/examples/ds_orders					DATA_SOURCE		RELATIONAL_DATA_SOURCE	1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		22061		22063		1		Child		productCatalog_Transformation	/shared/examples/productCatalog_Transformation PROCEDURE	XSLT_TRANSFORM_PROCEDURE 1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		1			22063		1		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		10104		22063		1		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
3		21871		22063		1		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		1122649		22061		2		Child		productCatalog.xml				/shared/examples/ds_XML/productCatalog.xml	TREE			XML_FILE_TREE			1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		1			22061		2		Ancestor	[NULL]							/											CONTAINER		NONE					1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		10104		22061		2		Ancestor	shared							/shared										CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		21871		22061		2		Ancestor	examples						/shared/examples							CONTAINER		FOLDER_CONTAINER		1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]
4		1122648		22061		2		Ancestor	ds_XML							/shared/examples/ds_XML						DATA_SOURCE		XML_FILE_DATA_SOURCE	1	[NULL]	[NULL]		[NULL]						[NULL]			[NULL]					[NULL]		[NULL]

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	05/22/2014		Mike Tinius			6.2.0			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getResourceLineageRecursiveAncestors(
	IN inSeqNum						INTEGER,		-- null to start with
	IN inParentID					INTEGER, 		-- null to start with
	IN inResourceDepth				INTEGER, 		-- null to start with
	IN inLineageResourceIdList		LONGVARCHAR,	-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
								 					-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
	IN resourcePath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
	IN resourceType					VARCHAR, 		-- The resource type
	IN returnUniqueRows				BIT,			-- 1 = (default) return a unique set of rows.  No duplicate resource paths are returned.
													-- 0 = return all rows as selected regardless of their uniqueness or not.
	IN excludePathsList				LONGVARCHAR, 	-- comma separate list of resource paths or partials paths to exclude
	IN datasourceAncestor			INTEGER, 		-- flag to get the data source ancestory (1=yes, 0=no)
	IN ignoreResourceDoesNotExist	INTEGER, 		-- Ignore any resources that do not exist
													-- 1 = Bypass the processing of that resource.
													-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	OUT resourceTreeList 			PIPE /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;getResourceLineageRecursiveAncestors&apos;;
	DECLARE returnUniqueRows_			BIT DEFAULT NVL(returnUniqueRows, 1);
	DECLARE seqNum						INTEGER DEFAULT inSeqNum;
	DECLARE parentID					INTEGER DEFAULT inParentID;
	DECLARE lineageResourceIdList		LONGVARCHAR DEFAULT inLineageResourceIdList;
	DECLARE	resDepth					INTEGER;
	DECLARE resourceID					VARCHAR;
	DECLARE debug						CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE resourceList1				LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE resourceList2				LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE ex							EXCEPTION;


	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceLineageRecursive(
		inSeqNum,				-- null to start with
		inParentID, 			-- null to start with
		inResourceDepth, 		-- null to start with
		inLineageResourceIdList,-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
								-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
		resourcePath, 			-- actual resource path and not a folder path
		resourceType, 			-- The resource type
		excludePathsList, 		-- comma separate list of resource paths or partials paths to exclude
		datasourceAncestor, 	-- flag to get the data source ancestory (1=yes, 0=no)
		NVL(ignoreResourceDoesNotExist,0) -- Ignore any resources that does not exist
	) DO
/*	DECLARE PUBLIC TYPE lineageTreeType ROW (
		seqNum					INTEGER,
		resourceID				INTEGER,
		parentID				INTEGER,
		resDepth				INTEGER,
		treeType				VARCHAR(255), -- Parent, Child
		resName 				VARCHAR(255), 
		resPath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType,
		resType					VARCHAR(255),
		subType					VARCHAR(255),
		enabled					BIT,
		dsID					INTEGER,
		dsResName				VARCHAR(255),
		dsResPath				/shared/ASAssets/Utilities/TypeDefinitions.pathType,
		dsResType 				VARCHAR(255),
		dsResSubType			VARCHAR(255),
		dsEnabled				BIT,
		dsChildCount			INTEGER
	);
*/
		-- Determine if all rows should be returned or only unique rows
		IF (returnUniqueRows_ = 0) THEN
			INSERT INTO resourceTreeList VALUES (r);
		ELSE
			-- Insert into the list a unique resource that has not been previously selected
			SET resourceID = r.resourceID||&apos;_&apos;;
			IF (POSITION(resourceID IN resourceList1) = 0 AND POSITION(resourceID IN resourceList2) = 0) THEN
				-- Use 2 LONGVARCHAR lists in case the number of resources exceeds the first list.
				IF (LENGTH(resourceID) + LENGTH(resourceList1) &lt; 2147483647) THEN
					SET resourceList1 = resourceList1 || resourceID;
				ELSE
					SET resourceList2 = resourceList2 || resourceID;
				END IF;

				INSERT INTO resourceTreeList VALUES (r);
			END IF;
		END IF;

		FOR a AS SELECT * FROM /shared/ASAssets/Utilities/repository/getAncestorResources(r.resPath, r.resType) DO
/*
	    DECLARE PUBLIC TYPE  AncestorResponseType ROW (
			resourceName 		VARCHAR(255), 
			resourcePath 		TypeDefinitions.pathType, 
			resourceType 		VARCHAR(255), 
	        subtype 			VARCHAR(255), 
	        enabled 			BIT, 
	        id 					INTEGER, 
	        changeid 			INTEGER, 
	        ownerDomain 		VARCHAR(255), 
	        ownerName 			VARCHAR(255), 
	        impactLevel 		VARCHAR(255), 
 	        childCount 			INTEGER
 	   );
*/
			-- Determine if all rows should be returned or only unique rows
			IF (returnUniqueRows_ = 0) THEN
				INSERT INTO resourceTreeList VALUES 
					(r.seqNum, a.id, r.parentID, r.resDepth, &apos;Ancestor&apos;, a.resourceName, a.resourcePath, a.resourceType, a.subtype, a.enabled, 
					 r.dsID, r.dsResName, r.dsResPath, r.dsResType, r.dsResSubType, r.dsEnabled, r.dsChildCount);
			ELSE
				-- Insert into the list a unique resource that has not been previously selected
				SET resourceID = a.id || &apos;_&apos;;
				IF (POSITION(resourceID IN resourceList1) = 0 AND POSITION(resourceID IN resourceList2) = 0) THEN
					-- Use 2 LONGVARCHAR lists in case the number of resources exceeds the first list.
					IF (LENGTH(resourceID) + LENGTH(resourceList1) &lt; 2147483647) THEN
						SET resourceList1 = resourceList1 || resourceID;
					ELSE
						SET resourceList2 = resourceList2 || resourceID;
					END IF;	

					INSERT INTO resourceTreeList VALUES 
						(r.seqNum, a.id, r.parentID, r.resDepth, &apos;Ancestor&apos;, a.resourceName, a.resourcePath, a.resourceType, a.subtype, a.enabled, 
						 r.dsID, r.dsResName, r.dsResPath, r.dsResType, r.dsResSubType, r.dsEnabled, r.dsChildCount);
				END IF;
			END IF;
		END FOR;
	END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>