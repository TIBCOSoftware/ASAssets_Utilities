<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getResourceLineageDatasources" path="/shared/ASAssets/Utilities/repository/getResourceLineageDatasources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getResourceLineageDatasources:

	Return the list of Data Sources used by a given resource path.  
	1. Start with the resource path and recursively walk its lineage until no more resources are found.   
	2. For each resource found, determine if that resources has as associated resource of type=DATA_SOURCE.
	3. Find the distinct list of data sources for this resource
 
	Input:
   		resourcePath - CIS source resource path to being assessing the parent data lineage
			Values: e.g. /shared/examples/ViewSales [this is a SQL VIEW.]
		resourceType - Type of CIS resource to be created.  It is null on the first invocation.
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
		excludePathsList	- comma separated list of resource paths or partials paths to exclude
			Values: /shared/Utilities,/lib
		datasourceAncestor	- flag to get the data source ancestors 
			Values: 1=yes, 0=no
		inIgnoreResourceDoesNotExist - Ignore any resources that do not exist
			Values: 1 = Bypass the processing of that resource.  0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	Output:
		datasourceResource - cursor result
 	  DECLARE PUBLIC TYPE  ResourceLineageDatasourceType ROW (
			id					INTEGER,
			resourceName		VARCHAR(255),
			resourcePath		TypeDefinitions.pathType,
			resourceType 		VARCHAR(255),
			subtype				VARCHAR(255),
			enabled				BIT,
			childCount			INTEGER
		);
Values: example:
id		resourceName	resourcePath					resourceType	subtype					enabled	childCount
20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE		RELATIONAL_DATA_SOURCE	1		7
20756	ds_XML			/shared/examples/ds_XML			DATA_SOURCE		XML_FILE_DATA_SOURCE	1		1
20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE		RELATIONAL_DATA_SOURCE	1		4

	Exceptions:  none

	Modified Date:	Updated By:			CSW Version:	Reason:
	11/12/2012		Mike Tinius			5.2.0			Created new
	10/28/2013		Mike Tinius			6.2.0			Added parameter inIgnoreResourceDoesNotExist
	03/20/2014		Mike Tinius			6.2.0			Added parameter to getResourceListRecursive to support recursion detection.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="datasourceAncestor" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inIgnoreResourceDoesNotExist" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="datasourceResource" direction="OUT" nullable="true">
      <datatype name="ResourceLineageDatasourceType" type="TABLE" refId="1">
        <element name="id">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="childCount">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getResourceLineageDatasources:

	Return the list of Data Sources used by a given resource path.  
	1. Start with the resource path and recursively walk its lineage until no more resources are found.   
	2. For each resource found, determine if that resources has as associated resource of type=DATA_SOURCE.
	3. Find the distinct list of data sources for this resource
 
	Input:
   		resourcePath - CIS source resource path to being assessing the parent data lineage
			Values: e.g. /shared/examples/ViewSales [this is a SQL VIEW.]
		resourceType - Type of CIS resource to be created.  It is null on the first invocation.
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
		excludePathsList	- comma separated list of resource paths or partials paths to exclude
			Values: /shared/Utilities,/lib
		datasourceAncestor	- flag to get the data source ancestors 
			Values: 1=yes, 0=no
		inIgnoreResourceDoesNotExist - Ignore any resources that do not exist
			Values: 1 = Bypass the processing of that resource.  0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	Output:
		datasourceResource - cursor result
 	  DECLARE PUBLIC TYPE  ResourceLineageDatasourceType ROW (
			id					INTEGER,
			resourceName		VARCHAR(255),
			resourcePath		TypeDefinitions.pathType,
			resourceType 		VARCHAR(255),
			subtype				VARCHAR(255),
			enabled				BIT,
			childCount			INTEGER
		);
Values: example:
id		resourceName	resourcePath					resourceType	subtype					enabled	childCount
20670	ds_orders		/shared/examples/ds_orders		DATA_SOURCE		RELATIONAL_DATA_SOURCE	1		7
20756	ds_XML			/shared/examples/ds_XML			DATA_SOURCE		XML_FILE_DATA_SOURCE	1		1
20605	ds_inventory	/shared/examples/ds_inventory	DATA_SOURCE		RELATIONAL_DATA_SOURCE	1		4

	Exceptions:  none

	Modified Date:	Updated By:			CSW Version:	Reason:
	11/12/2012		Mike Tinius			5.2.0			Created new
	10/28/2013		Mike Tinius			6.2.0			Added parameter inIgnoreResourceDoesNotExist
	03/20/2014		Mike Tinius			6.2.0			Added parameter to getResourceListRecursive to support recursion detection.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getResourceLineageDatasources(
	IN resourcePath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- /shared/examples/CompositeView
	IN resourceType					VARCHAR,	 -- TABLE
	IN excludePathsList				LONGVARCHAR, -- comma separate list of resource paths or partials paths to exclude
	IN datasourceAncestor 			INTEGER, 	 -- flag to get the data source ancestory (1=yes, 0=no)
	IN inIgnoreResourceDoesNotExist	INTEGER, 		-- Ignore any resources that do not exist
													-- 1 = Bypass the processing of that resource.
													-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	OUT datasourceResource 	PIPE /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.ResourceLineageDatasourceType
)
BEGIN
	DECLARE dsUniqueList	/lib/util/System.Text DEFAULT &apos;&apos;;

	FOR r AS
		SELECT * 
		FROM /shared/ASAssets/Utilities/repository/getResourceLineageRecursive(NULL, NULL, NULL, NULL, resourcePath, resourceType, excludePathsList, datasourceAncestor,inIgnoreResourceDoesNotExist) 
		WHERE dsResPath is not null
	DO
		if (r.dsResPath is not null and POSITION(&apos;[&apos;||r.dsResPath||&apos;]&apos; in dsUniqueList) = 0) then
			-- Add the data source to the unique list in order to keep track of what has been inserted already
			--   getResourceLineageRecursive may return multiple rows that use the same data source
			set dsUniqueList = dsUniqueList || &apos;[&apos;|| r.dsResPath || &apos;] &apos;;

			-- Insert the data source information into the output pipe
			INSERT INTO datasourceResource VALUES(r.dsID, r.dsResName, r.dsResPath, r.dsResType, r.dsResSubType, r.dsEnabled, r.dsChildCount);
		end if;
	END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">1369417729295</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1430938705091</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>