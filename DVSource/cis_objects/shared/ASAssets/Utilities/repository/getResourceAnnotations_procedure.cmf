<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getResourceAnnotations" path="/shared/ASAssets/Utilities/repository/getResourceAnnotations" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getResourceAnnotations:

	This procedure returns the annotations of a resource and it&apos;s columns (if any).


	Input:
		resourcePath - The path to the the resource  
			Values: Any path value to a resource

		resourceType - The type of the the resource  
			Values: Any valid resource type value


	Output:
		result    - Cursor containing the table and column comments
			Values: CURSOR (
                        columnName - The column&apos;s name (NULL when referring to the table itself.)
                        columnType - The column&apos;s data type (NULL when referring to the table itself.)
                        annotation - The annotation.
                    )


	Exceptions:
        System.NotFoundException - Thrown if the input resource does not exist or is not the specified type.


	Author:      Calvin Goodrich
	Date:        8/28/2012
	CSW Version: 5.2.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="columnName">
          <datatype name="ResourceName" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
        </element>
        <element name="columnType">
          <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
        </element>
        <element name="annotation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/resource" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getResourceAnnotationsXSLT" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="getResource" direction="IN">
        <datatype name="getResource" extendedName="{http://www.compositesw.com/services/system/admin/resource}getResource" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}getResource" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}getResource">
          <schemaDatatype>
            <datatype name="getResource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="getResourceRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="2">
              <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="detail" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT" nullable="false">
        <datatype type="TABLE" refId="3">
          <element name="ColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ColumnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
  getResourceAnnotations:

	This procedure returns the annotations of a resource and it&apos;s columns (if any).


	Input:
		resourcePath - The path to the the resource  
			Values: Any path value to a resource

		resourceType - The type of the the resource  
			Values: Any valid resource type value


	Output:
		result    - Cursor containing the table and column comments
			Values: CURSOR (
                        columnName - The column&apos;s name (NULL when referring to the table itself.)
                        columnType - The column&apos;s data type (NULL when referring to the table itself.)
                        annotation - The annotation.
                    )


	Exceptions:
        System.NotFoundException - Thrown if the input resource does not exist or is not the specified type.


	Author:      Calvin Goodrich
	Date:        8/28/2012
	CSW Version: 5.2.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getResourceAnnotations(
    IN resourcePath /lib/resource/ResourceDefs.ResourcePath,
    IN resourceType /lib/resource/ResourceDefs.ResourceType,
    OUT result CURSOR /shared/ASAssets/Utilities/TypeDefinitions.ColumnAnnotationRow
)
BEGIN
    PATH /lib/resource;

    DECLARE PROC_NAME CONSTANT VARCHAR DEFAULT &apos;getResourceAnnotations&apos;;
    DECLARE resourceExists BOOLEAN;

    CALL /lib/resource/ResourceExists(
        resourcePath,
        resourceType,
        NULL,
        resourceExists
    );
    IF (NOT resourceExists) THEN
        RAISE System.NotFoundException VALUE PROC_NAME || &apos;: Resource &quot;&apos; || resourcePath || &apos;&quot; does not exist or is not a resource of type &quot;&apos; || resourceType || &apos;&quot;.&apos;;
    END IF;

    OPEN result FOR
        SELECT * FROM /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getResourceAnnotationsXSLT(
&apos;&lt;ns1:getResource xmlns:ns1=&quot;http://www.compositesw.com/services/system/admin/resource&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
    &lt;ns1:path&gt;&apos; || CAST(XMLTEXT(resourcePath) AS VARCHAR(2147483647)) || &apos;&lt;/ns1:path&gt;
    &lt;ns1:type&gt;&apos; || CAST(XMLTEXT(resourceType) AS VARCHAR(2147483647)) || &apos;&lt;/ns1:type&gt;
    &lt;ns1:detail&gt;FULL&lt;/ns1:detail&gt;
&lt;/ns1:getResource&gt;&apos;
        );
END</attribute>
  <attribute name="creationDate" type="LONG">1376679119330</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">15/66</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>