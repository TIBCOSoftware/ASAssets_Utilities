<?xml version="1.1" encoding="UTF-8"?>
<metadata name="exportResourceDefinitions" path="/shared/ASAssets/Utilities/repository/exportResourceDefinitions" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>exportResourceDefinitions

    This procedure generates a complete export of the definitions for all resources defined in 
    CIS under shared and its subdirectories.  

    A complete export of the definitions for all view and procedure resources contained under 
    the folder /shared are written under the starting folder on the CIS host indicated by the 
    input parameter outputDirectory in a folder structure that matches the structure of the
    namespace tree. Resource definitions are exported to files with a name matching the exported 
    resource. The file extension of the output file is set by the input parameter outputFileExtension.

    Directories and files are written using the credentials of the account that the CIS server 
    is running under. Attempts to export resource definitions to directories that the CIS app 
    account does not have sufficient rights to read and write to will fail.

    Please note that the underlying CIS system tables used by this procedure require the ACCESS_TOOLS 
    right to query, so this procedure will not work successfully if the invoking user does not
    have ACCESS_TOOLS. Only resources that the user has the READ privilege on will be exported.

	Also note that this view will not expose the java code for CJP procedures. Java source code 
    must be provided by the author.

    Input:
        outputDirectory - The path to the output folder that the code exporter should write 
                          exported resource definitons to. The procedure will throw an exception 
                          if this parameter is not populated, the directory does not exist or CIS 
                          cannot write to the target directory.

                          Note that additional validation to confirm that the directory path is 
                          valid and the directory exists is not performed
										
		outputFileExtension - The extension to use when writing output files. If the extension does 
                              not have a &apos;.&apos; at the beginning of the string the procedure will 
                              automatically add one. The procedure will throw an exception if this 
                              parameter is not populated.

                              Note that additional validation to confirm that the file extension is 
                              valid (such as checking for invalid characters) is not performed

    Output:
        result - Parameter contains the result of execution. The value will be &apos;SUCCESS&apos; if the 
                 export completed without errors and &apos;FAILURE&apos; otherwise. Note that some export 
                 files may still be generated in the event of a failure.

    Exceptions:  
        /lib/util/System.IllegalArgumentException - Exception is raised if either of the input parameters do not pass validation.

    Modified Date:  Updated By:         CSW Version:    Reason:
    05/29/2014      Matthew Lee         6.2.6           Created new

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="outputDirectory" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="outputFileExtension" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="10"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/services/databases/system/ALL_RESOURCES" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="RESOURCE_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="RESOURCE_NAME">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="RESOURCE_TYPE">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ANNOTATION">
        <datatype type="STRING" maxLength="65535"/>
      </element>
      <element name="DEFINITION">
        <datatype type="STRING" maxLength="16777215"/>
      </element>
      <element name="OWNER_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="OWNER">
        <datatype type="STRING" maxLength="60"/>
      </element>
      <element name="PARENT_PATH">
        <datatype type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/ALL_RESOURCES" type="LINK">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="append" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="fileContent" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/existsDir" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dirPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/makeDirs" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dirPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/existsDir" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/existsDir" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/makeDirs" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/makeDirs" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
    exportResourceDefinitions

    This procedure generates a complete export of the definitions for all resources defined in 
    CIS under shared and its subdirectories.  

    A complete export of the definitions for all view and procedure resources contained under 
    the folder /shared are written under the starting folder on the CIS host indicated by the 
    input parameter outputDirectory in a folder structure that matches the structure of the
    namespace tree. Resource definitions are exported to files with a name matching the exported 
    resource. The file extension of the output file is set by the input parameter outputFileExtension.

    Directories and files are written using the credentials of the account that the CIS server 
    is running under. Attempts to export resource definitions to directories that the CIS app 
    account does not have sufficient rights to read and write to will fail.

    Please note that the underlying CIS system tables used by this procedure require the ACCESS_TOOLS 
    right to query, so this procedure will not work successfully if the invoking user does not
    have ACCESS_TOOLS. Only resources that the user has the READ privilege on will be exported.

	Also note that this view will not expose the java code for CJP procedures. Java source code 
    must be provided by the author.

    Input:
        outputDirectory - The path to the output folder that the code exporter should write 
                          exported resource definitons to. The procedure will throw an exception 
                          if this parameter is not populated, the directory does not exist or CIS 
                          cannot write to the target directory.

                          Note that additional validation to confirm that the directory path is 
                          valid and the directory exists is not performed
										
		outputFileExtension - The extension to use when writing output files. If the extension does 
                              not have a &apos;.&apos; at the beginning of the string the procedure will 
                              automatically add one. The procedure will throw an exception if this 
                              parameter is not populated.

                              Note that additional validation to confirm that the file extension is 
                              valid (such as checking for invalid characters) is not performed

    Output:
        result - Parameter contains the result of execution. The value will be &apos;SUCCESS&apos; if the 
                 export completed without errors and &apos;FAILURE&apos; otherwise. Note that some export 
                 files may still be generated in the event of a failure.

    Exceptions:  
        /lib/util/System.IllegalArgumentException - Exception is raised if either of the input parameters do not pass validation.

    Modified Date:  Updated By:         CSW Version:    Reason:
    05/29/2014      Matthew Lee         6.2.6           Created new

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE exportResourceDefinitions(
    IN outputDirectory LONGVARCHAR, 
    IN outputFileExtension VARCHAR(10), 
    OUT result VARCHAR
)
BEGIN

	DECLARE currentFolder LONGVARCHAR DEFAULT NULL;
	DECLARE filePath LONGVARCHAR;
	DECLARE resources CURSOR(
        PARENT_PATH VARCHAR(65535), 
        RESOURCE_NAME VARCHAR(255), 
        FULL_RESOURCE_PATH VARCHAR(65791), 
        RESOURCE_TYPE VARCHAR(255), 
        DEFINITION VARCHAR(16777215)
    );

	--Store the output file extension
	DECLARE outputExt VARCHAR(10);

	--Assume that the export will fail until it completes
	SET result = &apos;FAILURE&apos;;

	--Add logic to validate the input values here
	IF TRIM(emptyStr(outputDirectory)) = &apos;&apos; THEN
		--The outputDirectory property is either null or empty
		RAISE /lib/util/System.IllegalArgumentException VALUE &apos;The input parameter outputDirectory cannot be empty&apos;;
	ELSEIF NOT existsDir(outputDirectory) THEN
		--The output directory either doesn&apos;t exist or isn&apos;t visible to the CIS server&apos;s account
		RAISE /lib/util/System.IllegalArgumentException VALUE &apos;The directory specified in the parameter outputDirectory does not exist or is not visible to the CIS account&apos;;
	END IF;

	IF TRIM(emptyStr(outputFileExtension)) = &apos;&apos; THEN
		RAISE /lib/util/System.IllegalArgumentException VALUE &apos;The input parameter outputFileExtension cannot be empty&apos;;
	END IF;

	--If there is no &apos;.&apos; at the start of the file extension then add one
	--Fix this to look at the first character
	IF SUBSTRING(outputFileExtension,1,1) &lt;&gt; &apos;.&apos; THEN
		SET outputExt = &apos;.&apos; || outputFileExtension;
	ELSE
		SET outputExt = outputFileExtension;	
	END IF;

	-- Retrieve the resource definitions and paths from the CIS system table ALL_RESOURCES
	OPEN resources FOR 
		SELECT 
		    ALL_RESOURCES.PARENT_PATH, 
		    ALL_RESOURCES.RESOURCE_NAME, 
		    ALL_RESOURCES.PARENT_PATH || &apos;/&apos; || ALL_RESOURCES.RESOURCE_NAME FULL_RESOURCE_PATH, 
		    ALL_RESOURCES.RESOURCE_TYPE, 
		    ALL_RESOURCES.DEFINITION
		FROM      
		    /services/databases/system/ALL_RESOURCES ALL_RESOURCES
		WHERE
		    ALL_RESOURCES.PARENT_PATH LIKE &apos;/shared%&apos; AND 
			ALL_RESOURCES.RESOURCE_TYPE IN (&apos;TABLE&apos;, &apos;PROCEDURE&apos;) AND 
		    ALL_RESOURCES.DEFINITION IS NOT NULL
		ORDER BY 
		    ALL_RESOURCES.PARENT_PATH ASC;

	FOR resource AS resources DO

		--A new folder has been encountered. Create the folder if it doesn&apos;t exist in the file system
		IF currentFolder IS NULL OR currentFolder &lt;&gt; resource.PARENT_PATH THEN
			SET currentFolder = resource.PARENT_PATH;
		
			--If the directory does not exist then create it
			IF NOT existsDir(outputDirectory || &apos;/&apos; || currentFolder) THEN
				IF NOT makeDirs(outputDirectory || &apos;/&apos; || currentFolder) THEN
					--If we get to this point then the folder couldn&apos;t be created for some reas
				END IF;
			END IF;

		END IF;

		--Build the full path for the output file. Note that this may not work correctly for anything with special characters in the resource name / resource path.
		SET filePath = outputDirectory || currentFolder || &apos;/&apos; || resource.RESOURCE_NAME || outputExt;

		CALL /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(filePath, 0, resource.DEFINITION );

	END FOR;

	SET result = &apos;SUCCESS&apos;;

END</attribute>
  <attribute name="creationDate" type="LONG">1401377828726</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">mlee07</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>