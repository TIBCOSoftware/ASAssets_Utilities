<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getOutputColDefs" path="/shared/ASAssets/Utilities/repository/getOutputColDefs" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getOutputColDefs

    
    This procedure is used to generate a string containing the output columns returned by a view or procedure for
	easy definition of a custom row type.  The procedure returns the full list of output columns for a table or view
	and the full list of out and inout columns for a procedure.  The procedure can strip out the column definitions of any
	output cursors and include them in the list of returned columns.

    Input:
		fullResourcePath		- The path to the resource to retrieve column definitions from.  This must be a valid, fully quantified path.

		resourceType 			- The type of the resource to retrieve column definitions from.  Valid values are TABLE for views and tables
								  or PROCEDURE for SQL script procedures, transformations, parameterized queries and packaged queries.
								  All other values will cause an exception to be thrown

		convertCursorsToCols 	- controls whether an output CURSOR should be included as a single entry or if the output
							   	  columns of the cursor should be stripped out and included in the list of output columns.
							      This is useful when working with procedures such as XSLT transforms, packaged queries and 
								  parameterized queries that return a single output cursor.  
								  Setting a value of 1 for a procedure that returns both scalars and cursors or multiple cursors
								  will return a single string containing all of the scalar parameters and cursor output columns

								  Values - 0 to output the entire cursor, 1 to output only the cursor&apos;s columns

    Output:
        rowDef 					- A string containing the output column definition for the named resource.
            

    Exceptions:  none

    Author:      Matthew lee
    Date:        8/23/2012
    CSW Version: 6.1.0

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="convertCursorsToCols" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="rowDef" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="100000"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/ExceptionDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="parameterName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterType">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="parameterDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getCursorColDefs" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="cursorStr" direction="IN">
        <datatype type="STRING" maxLength="100000"/>
      </element>
      <element name="cols" direction="OUT">
        <datatype type="STRING" maxLength="100000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/findString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getOutputColDefs

    
    This procedure is used to generate a string containing the output columns returned by a view or procedure for
	easy definition of a custom row type.  The procedure returns the full list of output columns for a table or view
	and the full list of out and inout columns for a procedure.  The procedure can strip out the column definitions of any
	output cursors and include them in the list of returned columns.

    Input:
		fullResourcePath		- The path to the resource to retrieve column definitions from.  This must be a valid, fully quantified path.

		resourceType 			- The type of the resource to retrieve column definitions from.  Valid values are TABLE for views and tables
								  or PROCEDURE for SQL script procedures, transformations, parameterized queries and packaged queries.
								  All other values will cause an exception to be thrown

		convertCursorsToCols 	- controls whether an output CURSOR should be included as a single entry or if the output
							   	  columns of the cursor should be stripped out and included in the list of output columns.
							      This is useful when working with procedures such as XSLT transforms, packaged queries and 
								  parameterized queries that return a single output cursor.  
								  Setting a value of 1 for a procedure that returns both scalars and cursors or multiple cursors
								  will return a single string containing all of the scalar parameters and cursor output columns

								  Values - 0 to output the entire cursor, 1 to output only the cursor&apos;s columns

    Output:
        rowDef 					- A string containing the output column definition for the named resource.
            

    Exceptions:  none

    Author:      Matthew lee
    Date:        8/23/2012
    CSW Version: 6.1.0

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getOutputColDefs(
	IN fullResourcePath 	/shared/ASAssets/Utilities/TypeDefinitions.pathType,  
	IN resourceType 		VARCHAR,
	IN convertCursorsToCols BIT,
	OUT rowDef VARCHAR(100000)
)
BEGIN
	DECLARE colInfo VARCHAR(100000);
	DECLARE custRow VARCHAR(100000) DEFAULT &apos;&apos;;
	DECLARE curPos INTEGER;
	DECLARE cursorStr VARCHAR(100000);

	DECLARE cols CURSOR ( columnName VARCHAR, columnType VARCHAR(100000));

	--Retrieve the column definitions for a table or view
	IF resourceType = &apos;TABLE&apos; THEN
		OPEN cols FOR
		-- Query for retrieving info for Views
		SELECT columnName, columnType
		FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(fullResourcePath, resourceType)
		WHERE columnName IS NOT NULL;
	--Retrieve the out and inout parameters for procedures
	ELSEIF resourceType = &apos;PROCEDURE&apos; THEN
		OPEN cols FOR
		SELECT parameterName columnName, parameterType columnType
		FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE(fullResourcePath, resourceType)
		WHERE parameterDirection IN ( &apos;OUT&apos;, &apos;INOUT&apos;);		
	--Throw an exception in any other case
	ELSE
		RAISE /shared/ASAssets/Utilities/ExceptionDefinitions.InvalidParameterException VALUE &apos;Illegal value found in parameter resourceType.  Valid values are TABLE or PROCEDURE&apos;;
	END IF;

	FOR r AS cols DO
		IF NOT custRow = &apos;&apos; THEN
			SET	custRow = custRow || &apos;, &apos;;
		END IF;

		--If the target resource is a procedure and the caller elected to convert output cursors to columns
		--Then do the conversion
		IF resourceType = &apos;PROCEDURE&apos; AND convertCursorsToCols = 1 THEN
			CALL /shared/ASAssets/Utilities/string/findString(&apos;CURSOR&apos;, r.columnType, &apos;F&apos;, curPos);
		END IF;
		
		--If a CURSOR parameter was found and needs to be included in the column definitions, then strip out the columns from the cursor
		IF curPos &gt; 0 THEN
			CALL /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getCursorColDefs(r.columnType, cursorStr);
			SET custRow = custRow || cursorStr;
			--reset to make sure that nothing gets discarded accidentally
			SET curPos = 0;
		--Otherwise just add the column / procedure entry as a column, even if it is a cursor
		ELSE
			SET custRow = custRow || r.columnName || &apos; &apos; || r.columnType;
		END IF;
	END FOR;

	SET rowDef = custRow;
END</attribute>
  <attribute name="creationDate" type="LONG">1369417729294</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>