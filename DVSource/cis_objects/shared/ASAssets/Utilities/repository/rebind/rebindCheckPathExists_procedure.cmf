<?xml version="1.1" encoding="UTF-8"?>
<metadata name="rebindCheckPathExists" path="/shared/ASAssets/Utilities/repository/rebind/rebindCheckPathExists" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>rebindCheckPathExists;

	-- CIS Repository Helper Procedure --
    This procedure is used by both rebindFolder and rebindResource to check the existence of the rebind rules old and new paths.
    The rules are as follows:
      When the rebind rule list has 1 or more rules then it will use the &quot;rebindResource&quot; API because both the &quot;from&quot; and the &quot;to&quot; paths exist.
      When no paths match the &quot;from&quot; criteria or the &quot;from&quot; path does not exist then return null which will invoke the &quot;Replace Text Path&quot; methods.
      When the &quot;to&quot; path does not exist, the method will throw an exception since it is not permitted to rebind to a non-existent target folder


	Input:
		rebindVector - the list of rebindable resources used by a given resource.


	Output:
		outRebindVector - the list of rebindable resources used by a given resource.   null if the from path does not exist


	Exceptions:  
        System.NotFoundException - throws an exception if the to path does not exist.  Can&apos;t rebind to something that does not exist.


	Modified Date:	Modified By:		CSW Version:	Reason:
	04/24/2013		Mike Tinius			5.2.0			Created new


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="rebindVector" direction="IN" nullable="true">
      <datatype name="rebindVector" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="rebindVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="rebindRow" type="TREE" refId="1">
            <element name="oldPath">
              <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
            </element>
            <element name="oldType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="newPath">
              <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
            </element>
            <element name="newType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outRebindVector" direction="OUT" nullable="true">
      <datatype name="rebindVector" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="rebindVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="rebindRow" type="TREE" refId="1">
            <element name="oldPath">
              <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
            </element>
            <element name="oldType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="newPath">
              <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
            </element>
            <element name="newType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/resourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceExists" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/resourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    rebindCheckPathExists;

	-- CIS Repository Helper Procedure --
    This procedure is used by both rebindFolder and rebindResource to check the existence of the rebind rules old and new paths.
    The rules are as follows:
      When the rebind rule list has 1 or more rules then it will use the &quot;rebindResource&quot; API because both the &quot;from&quot; and the &quot;to&quot; paths exist.
      When no paths match the &quot;from&quot; criteria or the &quot;from&quot; path does not exist then return null which will invoke the &quot;Replace Text Path&quot; methods.
      When the &quot;to&quot; path does not exist, the method will throw an exception since it is not permitted to rebind to a non-existent target folder


	Input:
		rebindVector - the list of rebindable resources used by a given resource.


	Output:
		outRebindVector - the list of rebindable resources used by a given resource.   null if the from path does not exist


	Exceptions:  
        System.NotFoundException - throws an exception if the to path does not exist.  Can&apos;t rebind to something that does not exist.


	Modified Date:	Modified By:		CSW Version:	Reason:
	04/24/2013		Mike Tinius			5.2.0			Created new


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE rebindCheckPathExists(
	IN  rebindVector 		/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.rebindVector,
	IN 	debug				CHAR(1),
	OUT outRebindVector 	/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.rebindVector
)
BEGIN
	DECLARE moduleName	VARCHAR DEFAULT &apos;rebindCheckPathExists&apos;;
	DECLARE i			INTEGER DEFAULT 1;
	DECLARE j			INTEGER DEFAULT 0;
	DECLARE rebindRow 	/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.rebindRow;
	
	rebindLoop:
	WHILE (i &lt;= CARDINALITY(rebindVector)) DO
		set rebindRow = rebindVector[i];
		-- If both the old resource path and the new resource path exist then this is a &quot;rebindable&quot; resource
		if (resourceExists(rebindRow.oldPath, rebindRow.oldType) = 1) then
			if (resourceExists(rebindRow.newPath, rebindRow.newType) = 1) then
				if (j = 0) then
					set outRebindVector = VECTOR[(null)];
					set j = j + 1;
					set outRebindVector[i] = rebindRow;
				else
					set outRebindVector = EXTEND(outRebindVector,1);
					set j = j + 1;
					set outRebindVector[j] = rebindRow;
				end if;
			else
				raise System.NotFoundException value &apos;The target &quot;new path&quot;=[&apos;||emptyStr(rebindRow.newPath)||&apos;] and &quot;new type&quot;=[&apos;||emptyStr(rebindRow.newType)||&apos;] does not exist.&apos;;
			end if;
		else
			set outRebindVector = null;
			leave rebindLoop;
		end if;
		set i = i + 1;
	END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1446756505551</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/71</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>