<?xml version="1.1" encoding="UTF-8"?>
<metadata name="assignAttributes" path="/shared/ASAssets/Utilities/repository/rebind/assignAttributes" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>assignAttributes:

	This procedure takes in an a complete attribute vector and produces an XML attribute output which is used to create a request for
	a Composite web service API that requires an attribute.

	Input:
		attributeVector - the attributes to wrap in XML.  
			Values: A vector of attributes and values


	Output:
		attributeInput - the resulting XML
			Values: XML value


	Exceptions:  none


	Modified Date:	Updated By:			CSW Version:	Reason:
	04/27/2013		Mike Tinius			5.2.0			created new for assigning attributes to XML attribute node.
	04/02/2015		Calvin Goodrich		7.0.1			updated to COALESCE input values to prevent NULL request envelopes.


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.</annotation>
  <parameters>
    <parameter name="attributeVector" direction="IN" nullable="true">
      <datatype name="AttributeCompleteVectorType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="AttributeCompleteVectorType" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="AttributeCompleteType" type="TREE" refId="1">
            <element name="attrName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="attrType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="attrValue">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="valueList">
              <datatype name="valueList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="itemType" type="TREE" refId="2">
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="value">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="valueMap">
              <datatype name="valueMap" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="entryType" type="TREE" refId="3">
                    <element name="key">
                      <datatype name="key" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <reference refId="2"/>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="value">
                      <datatype name="value" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <reference refId="2"/>
                        </itemDatatype>
                      </datatype>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="valueArray">
              <datatype name="valueArray" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                </itemDatatype>
              </datatype>
            </element>
            <element name="unset">
              <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="attributeInput" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    assignAttributes:

	This procedure takes in an a complete attribute vector and produces an XML attribute output which is used to create a request for
	a Composite web service API that requires an attribute.

	Input:
		attributeVector - the attributes to wrap in XML.  
			Values: A vector of attributes and values


	Output:
		attributeInput - the resulting XML
			Values: XML value


	Exceptions:  none


	Modified Date:	Updated By:			CSW Version:	Reason:
	04/27/2013		Mike Tinius			5.2.0			created new for assigning attributes to XML attribute node.
	04/02/2015		Calvin Goodrich		7.0.1			updated to COALESCE input values to prevent NULL request envelopes.


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE assignAttributes(
	IN attributeVector			/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
	OUT attributeInput			LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;assignAttributes&apos;;
	DECLARE i,j				INTEGER;
	DECLARE Empty			INTEGER DEFAULT 1;
	DECLARE valueFound		BOOLEAN DEFAULT FALSE;
	DECLARE ex				EXCEPTION;

	set attributeInput = &apos;&apos;;
	if (attributeVector is not null) then
		set attributeInput = attributeInput || &apos;
		  &lt;resource:attributes&gt;&apos;;
		set i = 1;
		while (i &lt;= CARDINALITY(attributeVector)) do
			if (isEmpty(attributeVector[i].attrName) = Empty) then
				raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  &quot;name&quot; may not be null or blank.&apos;;
			end if;
			if (isEmpty(attributeVector[i].attrType) = Empty) then
				raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  &quot;type&quot; may not be null or blank.&apos;;
			end if;
			-- &quot;name&quot; - attribute name
			-- &quot;type&quot; - attribute type
			set attributeInput = attributeInput || &apos;
			&lt;common:attribute&gt;
			  &lt;common:name&gt;&apos;||CAST(XMLTEXT(attributeVector[i].attrName) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;
			  &lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].attrType) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;;

			-- &quot;value&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].attrValue IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || &apos;
			  &lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].attrValue) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
			end if;

			-- &quot;valueList&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].valueList IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || &apos;
					  &lt;common:valueList&gt;&apos;;
				set j = 1;
				while (j &lt;= CARDINALITY(attributeVector[i].valueList)) do
					if (isEmpty(attributeVector[i].valueList[j].&quot;type&quot;) = Empty) then
						raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  valueList &apos;||j||&apos; &quot;type&quot; may not be null or blank.&apos;;
					end if;
					set attributeInput = attributeInput || &apos;
						&lt;common:item&gt;
						  &lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].valueList[j].&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;
						  &lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueList[j].&quot;value&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
/* NOT IMPLEMENTED:
						  &lt;common:valueList/&gt;
						  &lt;common:valueMap&gt;
							&lt;common:entry&gt;
							  &lt;common:key&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueList/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:key&gt;
							  &lt;common:value&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueList/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:value&gt;
							&lt;/common:entry&gt;
						  &lt;/common:valueMap&gt;
						  &lt;common:valueArray&gt;
							&lt;common:item&gt;?&lt;/common:item&gt;
						  &lt;/common:valueArray&gt;
*/
					set attributeInput = attributeInput || &apos;
						&lt;/common:item&gt;&apos;;
					set j = j + 1;
				end while;
				set attributeInput = attributeInput || &apos;
					  &lt;/common:valueList&gt;&apos;;
			end if;

			-- &quot;valueMap&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].valueMap IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || &apos;
					  &lt;common:valueMap&gt;&apos;;
				set j = 1;
				while (j &lt;= CARDINALITY(attributeVector[i].valueMap)) do
					if (isEmpty(attributeVector[i].valueList[j].&quot;type&quot;) = Empty) then
						raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  valueMap &apos;||j||&apos;  key 1 &quot;type&quot; may not be null or blank.&apos;;
					end if;
					set attributeInput = attributeInput || &apos;
						&lt;common:entry&gt;
						  &lt;common:key&gt;
							&lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;key&quot;[1].&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;
							&lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;key&quot;[1].&quot;value&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
/* NOT IMPLEMENTED:
							&lt;common:valueList&gt;
							  &lt;common:item&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueMap/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:item&gt;
							&lt;/common:valueList&gt;
							&lt;common:valueMap/&gt;
							&lt;common:valueArray&gt;
							  &lt;common:item&gt;?&lt;/common:item&gt;
							&lt;/common:valueArray&gt;
*/
					if (isEmpty(attributeVector[i].valueList[j].&quot;type&quot;) = Empty) then
						raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  valueMap &apos;||j||&apos;  value 1 &quot;type&quot; may not be null or blank.&apos;;
					end if;
					set attributeInput = attributeInput || &apos;
						  &lt;/common:key&gt;
						  &lt;common:value&gt;
							&lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;value&quot;[1].&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;
							&lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;value&quot;[1].&quot;value&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
/* NOT IMPLEMENTED:
							&lt;common:valueList&gt;
							  &lt;common:item&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueMap/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:item&gt;
							&lt;/common:valueList&gt;
							&lt;common:valueMap/&gt;
							&lt;common:valueArray&gt;
							  &lt;common:item&gt;?&lt;/common:item&gt;
							&lt;/common:valueArray&gt;
*/
					set attributeInput = attributeInput || &apos;
						  &lt;/common:value&gt;
						&lt;/common:entry&gt;&apos;;
					set j = j + 1;
				end while;
				set attributeInput = attributeInput || &apos;
					  &lt;/common:valueMap&gt;&apos;;
			end if;
			  
			-- &quot;valueArray&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].valueArray IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || &apos;
					  &lt;common:valueArray&gt;&apos;;
				set j = 1;
				while (j &lt;= CARDINALITY(attributeVector[i].valueArray)) do
					set attributeInput = attributeInput || &apos;
						&lt;common:item&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueArray[j]) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:item&gt;&apos;;
					set j = j + 1;
				end while;
				set attributeInput = attributeInput || &apos;
					  &lt;/common:valueArray&gt;&apos;;
			end if;

			-- &quot;unset&quot; - 
			if (attributeVector[i].unset IS NOT NULL) then
				set attributeInput = attributeInput || &apos;
			  &lt;common:unset&gt;&apos;||attributeVector[i].unset||&apos;&lt;/common:unset&gt;&apos;;
			end if;

			set attributeInput = attributeInput || &apos;
			&lt;/common:attribute&gt;&apos;;

			set i = i + 1;
		end while;

		set attributeInput = attributeInput || &apos;
		  &lt;/resource:attributes&gt;&apos;;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1446756505551</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>