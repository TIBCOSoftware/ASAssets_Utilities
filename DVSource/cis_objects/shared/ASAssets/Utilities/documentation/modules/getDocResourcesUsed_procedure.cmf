<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getDocResourcesUsed" path="/shared/ASAssets/Utilities/documentation/modules/getDocResourcesUsed" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDocResourcesUsed:

	This procedure returns the list of resources (level 1) used by this resources.   
	The immediate resource list is the list of resources that are directly invoked by the 
	current resource being formatted.  In the example below the resource being formatted is
	/shared/examples/CompositeView.  The CompositeView has three resources that is uses for 
	immediate invocations which include ViewOrder, ViewSales and ViewSupplier.
 
	Input:
		resourcePath			The full resource path to the CIS resource to introspect and return the resources used by this resource
									Values: e.g. /shared/examples/CompositeView
		resourceType			The type of resource.
									Values: e.g. TABLE
		constantPath			This is the path to the constants file
									Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
	Output:
		formattedText			The formatted text output.
	Exceptions:  none

	An example output is shown below:

Resources Used:
---------------
    Resource Name  Resource Type  Sub Type   Resource Path                 
    -------------- -------------- ---------- -----------------------------
    ViewOrder      TABLE          SQL_TABLE  /shared/examples/ViewOrder    
    ViewSales      TABLE          SQL_TABLE  /shared/examples/ViewSales    
    ViewSupplier   TABLE          SQL_TABLE  /shared/examples/ViewSupplier 

	Modified Date:	Updated By:			CSW Version:	Reason:
	07/25/2012		Mike Tinius			6.1.0			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="formattedText" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="constantName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 	getDocResourcesUsed:

	This procedure returns the list of resources (level 1) used by this resources.   
	The immediate resource list is the list of resources that are directly invoked by the 
	current resource being formatted.  In the example below the resource being formatted is
	/shared/examples/CompositeView.  The CompositeView has three resources that is uses for 
	immediate invocations which include ViewOrder, ViewSales and ViewSupplier.
 
	Input:
		resourcePath			The full resource path to the CIS resource to introspect and return the resources used by this resource
									Values: e.g. /shared/examples/CompositeView
		resourceType			The type of resource.
									Values: e.g. TABLE
		constantPath			This is the path to the constants file
									Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
	Output:
		formattedText			The formatted text output.
	Exceptions:  none

	An example output is shown below:

Resources Used:
---------------
    Resource Name  Resource Type  Sub Type   Resource Path                 
    -------------- -------------- ---------- -----------------------------
    ViewOrder      TABLE          SQL_TABLE  /shared/examples/ViewOrder    
    ViewSales      TABLE          SQL_TABLE  /shared/examples/ViewSales    
    ViewSupplier   TABLE          SQL_TABLE  /shared/examples/ViewSupplier 

	Modified Date:	Updated By:			CSW Version:	Reason:
	07/25/2012		Mike Tinius			6.1.0			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getDocResourcesUsed(
    IN resourcePath 		/shared/ASAssets/Utilities/TypeDefinitions.pathType,  
    IN resourceType 		VARCHAR(255),
	IN constantPath			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
	OUT formattedText		/lib/util/System.Text
)
BEGIN
	DECLARE header			VARCHAR(1024) DEFAULT &apos;&apos;;
	DECLARE RNsize			INTEGER DEFAULT 14;
	DECLARE RTsize			INTEGER DEFAULT 14;
	DECLARE STsize			INTEGER DEFAULT 10;
	DECLARE RPsize			INTEGER DEFAULT 14;
	DECLARE padChar			VARCHAR DEFAULT getConstant(constantPath, &apos;padChar&apos;);
	DECLARE eol				VARCHAR DEFAULT getConstant(constantPath, &apos;eol&apos;);
	DECLARE indent4			VARCHAR DEFAULT getConstant(constantPath, &apos;indent4&apos;);
	DECLARE line			LONGVARCHAR;
	DECLARE field1			VARCHAR(1024);
	DECLARE field2			VARCHAR(1024);
	DECLARE field3			VARCHAR(1024);
	DECLARE field4			VARCHAR(1024);

	set formattedText = &apos;&apos;;
	set header = 		 &apos;Resources Used:&apos;||eol;
	set header = header||&apos;---------------&apos;||eol;

		-- First determine the max lengths for formatting purposes
		for r as select * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(resourcePath, resourceType) do
			if (r.resourceName is not null) then
				if (length(r.resourceName) &gt; RNsize) then
					set RNsize = length(r.resourceName);
				end if;
				if (r.resourceType is not null and length(r.resourceType) &gt; RTsize) then
					set RTsize = length(r.resourceType);
				end if;
				if (r.subtype is not null and length(r.subtype) &gt; STsize) then
					set STsize = length(r.subtype);
				end if;
				if (r.resourcePath is not null and length(r.resourcePath) &gt; RPsize) then
					set RPsize = length(r.resourcePath);
				end if;
			end if;
		end for;
		set RNsize = RNsize + 1;
		set RTsize = RTsize + 1;
		set STsize = STsize + 1;
		set RPsize = RPsize + 1;

		-- Establish the header
		set header = header || indent4 || RPAD(&apos;Resource Name&apos;,RNsize,padChar) || RPAD(&apos;Resource Type&apos;,RTsize,padChar) || RPAD(&apos;Sub Type&apos;,STsize,padChar) || RPAD(&apos;Resource Path&apos;,RPsize,padChar)||eol;
		set header = header || indent4 || RPAD(&apos;-&apos;,RNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,RTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,STsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,RPsize-1,&apos;-&apos;)||eol;

		-- Second, perform the formatting
		for r as select * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(resourcePath, resourceType) do
			if (r.resourceName is not null) then
				if (isEmpty(r.resourceName) = 0) then
					set field1 = RPAD(emptyStr(r.resourceName),RNsize,padChar);
				else
					set field1 = RPAD(&apos;N/A&apos;,RNsize,padChar);
				end if;
				if (isEmpty(r.resourceType) = 0) then
					set field2 = RPAD(emptyStr(r.resourceType),RTsize,padChar);
				else
					set field2 = RPAD(&apos;N/A&apos;,RTsize,padChar);
				end if;
				if (isEmpty(r.subtype) = 0) then
					set field3 = RPAD(emptyStr(r.subtype),STsize,padChar);
				else
					set field3 = RPAD(&apos;N/A&apos;,STsize,padChar);
				end if;

				if (isEmpty(r.resourcePath) = 0) then
					set field4 = RPAD(emptyStr(r.resourcePath),RPsize,padChar);
				else
					set field4 = RPAD(&apos;N/A&apos;,RPsize,padChar);
				end if;
/*
				call print(&apos;field1=[&apos;||field1||&apos;]&apos;);
				call print(&apos;field2=[&apos;||field2||&apos;]&apos;);
				call print(&apos;field3=[&apos;||field3||&apos;]&apos;);
				call print(&apos;field4=[&apos;||field4||&apos;]&apos;);
				call print(&apos;field1:&apos;||field1||&apos; field2:&apos;||field2||&apos; field3:&apos;||field3||&apos; field4:&apos;||field4);
*/
				set line = indent4||field1 || field2 || field3 || field4 || eol;
--				call print(&apos;line:&apos;||line);
				set formattedText = formattedText || line;
			end if;
		end for;

	if (isEmpty(formattedText) = 0) then
		set formattedText = header || formattedText || eol;
	end if;

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>