<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getDocResourceProjection" path="/shared/ASAssets/Utilities/documentation/modules/getDocResourceProjection" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDocResourceProjection:

	This procedure returns the column projections for TABLES and PROCEDURES.
 
	Input:
		resourcePath			The full resource path to the CIS resource to introspect and return the column projections if applicable.
									Values: e.g. /shared/examples/CompositeView
		resourceType			The type of resource.
									Values: e.g. TABLE
		constantPath			This is the path to the constants file
									Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
	Output:
		formattedText			The formatted text output.

	Exceptions:  none

	An example output is shown below:

Resource Column Projection:
---------------------------
    Column Name              Column Type          Native Base Type     Native Type          
    ------------------------ -------------------- -------------------- --------------------
    OrderID                  INTEGER              N/A                  N/A                  
    ProductID                INTEGER              N/A                  N/A                  
    Discount                 DECIMAL(12,2)        N/A                  N/A                  

	Modified Date:	Updated By:			CSW Version:	Reason:
	07/25/2012		Mike Tinius			5.2.0			Created new

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="formattedText" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="constantName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 	getDocResourceProjection:

	This procedure returns the column projections for TABLES and PROCEDURES.
 
	Input:
		resourcePath			The full resource path to the CIS resource to introspect and return the column projections if applicable.
									Values: e.g. /shared/examples/CompositeView
		resourceType			The type of resource.
									Values: e.g. TABLE
		constantPath			This is the path to the constants file
									Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
	Output:
		formattedText			The formatted text output.

	Exceptions:  none

	An example output is shown below:

Resource Column Projection:
---------------------------
    Column Name              Column Type          Native Base Type     Native Type          
    ------------------------ -------------------- -------------------- --------------------
    OrderID                  INTEGER              N/A                  N/A                  
    ProductID                INTEGER              N/A                  N/A                  
    Discount                 DECIMAL(12,2)        N/A                  N/A                  

	Modified Date:	Updated By:			CSW Version:	Reason:
	07/25/2012		Mike Tinius			5.2.0			Created new

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.


*/
PROCEDURE getDocResourceProjection(
    IN resourcePath 		/shared/ASAssets/Utilities/TypeDefinitions.pathType,  
    IN resourceType 		VARCHAR(255),
	IN constantPath			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
	OUT formattedText		/lib/util/System.Text
)
BEGIN
	DECLARE header			VARCHAR(1024) DEFAULT &apos;&apos;;
	DECLARE CNsize			INTEGER DEFAULT 20;
	DECLARE CTsize			INTEGER DEFAULT 20;
	DECLARE NBTsize			INTEGER DEFAULT 20;
	DECLARE NTsize			INTEGER DEFAULT 20;
	DECLARE padChar			VARCHAR DEFAULT getConstant(constantPath, &apos;padChar&apos;);
	DECLARE eol				VARCHAR DEFAULT getConstant(constantPath, &apos;eol&apos;);
	DECLARE indent4			VARCHAR DEFAULT getConstant(constantPath, &apos;indent4&apos;);
	DECLARE line			LONGVARCHAR;
	DECLARE field1			VARCHAR(1024);
	DECLARE field2			VARCHAR(1024);
	DECLARE field3			VARCHAR(1024);
	DECLARE field4			VARCHAR(1024);

	set formattedText = &apos;&apos;;
	set header = 		 &apos;Resource Column Projection:&apos;||eol;
	set header = header||&apos;---------------------------&apos;||eol;

	-- Formatting for tables
	if (resourceType = &apos;TABLE&apos;) then
		-- First determine the max lengths for formatting purposes
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, resourceType) do
--			call print(&apos;columnName=&apos;||emptyStr(r.columnName));
			if (r.columnName is not null) then
				if (length(r.columnName) &gt; CNsize) then
					set CNsize = length(r.columnName);
				end if;
				if (r.columnType is not null and length(r.columnType) &gt; CTsize) then
					set CTsize = length(r.columnType);
				end if;
				if (r.nativeBaseType is not null and length(r.nativeBaseType) &gt; NBTsize) then
					set NBTsize = length(r.nativeBaseType);
				end if;
				if (r.nativeType is not null and length(r.nativeType) &gt; NTsize) then
					set NTsize = length(r.nativeType);
				end if;
			end if;
		end for;

		set CNsize = CNsize + 1;
		set CTsize = CTsize + 1;
		set NBTsize = NBTsize + 1;
		set NTsize = NTsize + 1;
--		call print(&apos;CNsize=&apos;||CNsize||&apos; CTsize=&apos;||CTsize||&apos; NBTsize=&apos;||NBTsize||&apos; NTsize=&apos;||NTsize);

		-- Establish the header
		set header = header||indent4||RPAD(&apos;Column Name&apos;,CNsize,padChar) || RPAD(&apos;Column Type&apos;,CTsize,padChar) || RPAD(&apos;Native Base Type&apos;,NBTsize,padChar) || RPAD(&apos;Native Type&apos;,NTsize,padChar)||eol;
		set header = header||indent4||RPAD(&apos;-&apos;,CNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,CTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NBTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NTsize-1,&apos;-&apos;)||eol;

		-- Second, perform the actual formatting
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, resourceType) do
			if (r.columnName is not null) then
				if (isEmpty(r.columnType) = 0) then
					set field1 = RPAD(emptyStr(r.columnName),CNsize,padChar);
				else
					set field1 = RPAD(&apos;N/A&apos;,CNsize,padChar);
				end if;
				if (isEmpty(r.columnType) = 0) then
					set field2 = RPAD(emptyStr(r.columnType),CTsize,padChar);
				else
					set field2 = RPAD(&apos;N/A&apos;,CTsize,padChar);
				end if;
				if (isEmpty(r.nativeBaseType) = 0) then
					set field3 = RPAD(emptyStr(r.nativeBaseType),NBTsize,padChar);
				else
					set field3 = RPAD(&apos;N/A&apos;,NBTsize,padChar);
				end if;

				if (isEmpty(r.nativeType) = 0) then
					set field4 = RPAD(emptyStr(r.nativeType),NTsize,padChar);
				else
					set field4 = RPAD(&apos;N/A&apos;,NTsize,padChar);
				end if;
/*
				call print(&apos;field1=[&apos;||field1||&apos;]&apos;);
				call print(&apos;field2=[&apos;||field2||&apos;]&apos;);
				call print(&apos;field3=[&apos;||field3||&apos;]&apos;);
				call print(&apos;field4=[&apos;||field4||&apos;]&apos;);
				call print(&apos;field1:&apos;||field1||&apos; field2:&apos;||field2||&apos; field3:&apos;||field3||&apos; field4:&apos;||field4);
*/
				set line = indent4 || field1 || field2 || field3 || field4 || eol;
--				call print(&apos;line:&apos;||line);
				set formattedText = formattedText || line;
			end if;
		end for;
	end if;

	-- Formatting for procedures.
	if (resourceType = &apos;PROCEDURE&apos;) then
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, null) do
			if (r.columnName is not null) then
				if (length(r.columnName) &gt; CNsize) then
					set CNsize = length(r.columnName);
				end if;
				if (r.columnType is not null and length(r.columnType) &gt; CTsize) then
					set CTsize = length(r.columnType);
				end if;
				if (r.nativeBaseType is not null and length(r.nativeBaseType) &gt; NBTsize) then
					set NBTsize = length(r.nativeBaseType);
				end if;
				if (r.nativeType is not null and length(r.nativeType) &gt; NTsize) then
					set NTsize = length(r.nativeType);
				end if;
			end if;
		end for;

		set CNsize = CNsize + 1;
		set CTsize = CTsize + 1;
		set NBTsize = NBTsize + 1;
		set NTsize = NTsize + 1;
--		call print(&apos;CNsize=&apos;||CNsize||&apos; CTsize=&apos;||CTsize||&apos; NBTsize=&apos;||NBTsize||&apos; NTsize=&apos;||NTsize);

		-- Establish the header
		set header = header||indent4||RPAD(&apos;Column Name&apos;,CNsize,padChar) || RPAD(&apos;Column Type&apos;,CTsize,padChar) || RPAD(&apos;Native Base Type&apos;,NBTsize,padChar) || RPAD(&apos;Native Type&apos;,NTsize,padChar)||eol;
		set header = header||indent4||RPAD(&apos;-&apos;,CNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,CTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NBTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NTsize-1,&apos;-&apos;)||eol;

		-- Second, perform the actual formatting
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, null) do
			if (r.columnName is not null) then
				if (isEmpty(r.columnType) = 0) then
					set field1 = RPAD(emptyStr(r.columnName),CNsize,padChar);
				else
					set field1 = RPAD(&apos;N/A&apos;,CNsize,padChar);
				end if;
				if (isEmpty(r.columnType) = 0) then
					set field2 = RPAD(emptyStr(r.columnType),CTsize,padChar);
				else
					set field2 = RPAD(&apos;N/A&apos;,CTsize,padChar);
				end if;
				if (isEmpty(r.nativeBaseType) = 0) then
					set field3 = RPAD(emptyStr(r.nativeBaseType),NBTsize,padChar);
				else
					set field3 = RPAD(&apos;N/A&apos;,NBTsize,padChar);
				end if;

				if (isEmpty(r.nativeType) = 0) then
					set field4 = RPAD(emptyStr(r.nativeType),NTsize,padChar);
				else
					set field4 = RPAD(&apos;N/A&apos;,NTsize,padChar);
				end if;
				set line = indent4 || field1 || field2 || field3 || field4 || eol;
/*
				call print(&apos;field1=[&apos;||field1||&apos;]&apos;);
				call print(&apos;field2=[&apos;||field2||&apos;]&apos;);
				call print(&apos;field3=[&apos;||field3||&apos;]&apos;);
				call print(&apos;field4=[&apos;||field4||&apos;]&apos;);
				call print(&apos;field1:&apos;||field1||&apos; field2:&apos;||field2||&apos; field3:&apos;||field3||&apos; field4:&apos;||field4);
				call print(&apos;line:&apos;||line);
*/
				set formattedText = formattedText || line;
			end if;
		end for;
	end if;

	if (isEmpty(formattedText) = 0) then
		set formattedText = header || formattedText || eol;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>