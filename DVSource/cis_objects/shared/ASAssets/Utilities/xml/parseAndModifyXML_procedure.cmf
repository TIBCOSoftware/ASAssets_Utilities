<?xml version="1.1" encoding="UTF-8"?>
<metadata name="parseAndModifyXML" path="/shared/ASAssets/Utilities/xml/parseAndModifyXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>parseAndModifyXML:
	Parse and XML document given a vector of XPath statements and modify the values and reconstruct the XML.
 	IMPORTANT:  When updating an element with a list of attributes, you must supply all of the original
	attributes in order to retain what you had.  This routine overwrites the original element so be careful.

	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		ElemAttrVector - contains a vector of qualified elements, qualified attributes and the value to change.
			It may be necessary to read the orginal values for each attribute to construct this vector on the fly
			if you want to retain certain values.  Then modify only the attributes that you want to change.
			Values: e.g. {(&apos;sam:Name&apos;,&apos;sam:isbn&apos;,&apos;00-0000-000&apos;)}
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
					&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;/&gt;
					&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     &lt;/Book&gt;
	Output:
		outXml - modified XML
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt; 	
					&lt;sam:Name sam:isbn=&quot;00-0000-000&quot;/&gt; 	
					&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     &lt;/Book&gt;
	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	CSW Version: 5.1.0

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="ElemAttrVector" direction="IN" nullable="true">
      <datatype name="ElemAttrVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="ElemAttrValuesType" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="ElemAttrValuesType" type="TREE" refId="1">
            <element name="qualElem">
              <datatype name="VARCHAR" type="STRING" maxLength="2048"/>
            </element>
            <element name="qualAttr">
              <datatype name="VARCHAR" type="STRING" maxLength="2048"/>
            </element>
            <element name="invalue">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outXml" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* parseAndModifyXML:
	Parse and XML document given a vector of XPath statements and modify the values and reconstruct the XML.
 	IMPORTANT:  When updating an element with a list of attributes, you must supply all of the original
	attributes in order to retain what you had.  This routine overwrites the original element so be careful.

	Use cases supported:
		Use Case 1: Modify the attribute for an element
		Use Case 2: Modify the value of the the element with attributes
		Use Case 3: Modify the element with no attributes
		Use Case 4: Modify the element with no attributes and set it to null
		Use Case 5: Retain the original attributes and modify the element with attributes and set it to null

	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		ElemAttrVector - contains a vector of qualified elements, qualified attributes and the value to change.
					qualElem varchar(2048), 
					qualAttr varchar(2048), 
					invalue varchar
			It may be necessary to read the orginal values for each attribute to construct this vector on the fly
			if you want to retain certain values.  Then modify only the attributes that you want to change.
			Values: ElemAttrVector e.g. 
				{
				--qualElem,  qualAttr,  invalue
				(&apos;sam:Name&apos;,&apos;sam:isbn&apos;,&apos;00-0000-000&apos;), 	-- Use Case 1: Modify the attribute for an element
				(&apos;sam:Name&apos;,NULL,&apos;Joe Author&apos;),			-- Use Case 2: Modify the value of the the element with attributes
				(&apos;Chapter&apos;,NULL,&apos;Chapter 1&apos;),			-- Use Case 3: Modify the element with no attributes
				(&apos;Paragraph&apos;,NULL,NULL),				-- Use Case 4: Modify the element with no attributes and set it to null
				(&apos;sam:Author&apos;,&apos;sam:firstname&apos;,&apos;Joe&apos;), 	-- Use Case 5: Retain the attribute
				(&apos;sam:Author&apos;,&apos;sam:lastname&apos;,&apos;Author&apos;), -- Use Case 5: Retain the attribute
				(&apos;sam:Author&apos;,NULL,NULL) 				-- Use Case 5: Modify the element with attributes and set it to null
				}
		inXml - any XML document
			Values: e.g. 
				&lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
					&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;/&gt;
					&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
					&lt;Paragraph&gt;Paragraph 1&lt;/Paragraph&gt;
				&lt;/Book&gt;
	Output:
		outXml - modified XML
			Values: e.g. 
				&lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt; 	
					&lt;sam:Name sam:isbn=&quot;00-0000-000&quot;&gt;Joe Author&lt;/sam:Name&gt; 	
					&lt;Chapter&gt;Chapter 1&lt;/Chapter&gt; 	
					&lt;Paragraph xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:nil=&quot;true&quot;/&gt; 
				&lt;/Book&gt; 
	Limitations:
		This method does not modify an iteration of the same node.

	XSLT Template Examples:
	-----------------------
		Use Case 1: Modify the attribute for an element
		Use Case 2: Modify the value of the the element with attributes
		-----------
			ElemAttrVector =
				(&apos;sam:Name&apos;,&apos;sam:isbn&apos;,&apos;00-0000-000&apos;),
				(&apos;sam:Name&apos;,NULL,&apos;Joe Author&apos;),	

			&lt;xslt:template match=&quot;sam:Name&quot;&gt;
			  &lt;xslt:element name=&quot;{name()}&quot;&gt;
				&lt;xslt:attribute name=&quot;sam:isbn&quot;&gt;00-0000-000&lt;/xslt:attribute&gt;
				&lt;xslt:element&gt;Joe Author&lt;/xslt:element&gt;
			  &lt;/xslt:element&gt;
			&lt;/xslt:template&gt;

		Use Case 3: Modify the element with no attributes
		-----------
			ElemAttrVector =
				(&apos;Chapter&apos;,NULL,&apos;Chapter 1&apos;),

			&lt;xslt:template match=&quot;Chapter&quot;&gt;
			  &lt;xslt:element name=&quot;{name()}&quot;&gt;
				&lt;xslt:element&gt;Chapter 1&lt;/xslt:element&gt;
			  &lt;/xslt:element&gt;
			&lt;/xslt:template&gt;

		Use Case 4: Modify the element with no attributes and set it to null
		-----------
			ElemAttrVector = 
				(&apos;Paragraph&apos;,NULL,NULL),

			&lt;xslt:template match=&quot;Paragraph&quot;&gt;
			  &lt;xslt:element name=&quot;{name()}&quot;&gt;
			    &lt;xslt:attribute name=&quot;xsi:nil&quot;&gt;true&lt;/xslt:attribute&gt;
			  &lt;/xslt:element&gt;
			&lt;/xslt:template&gt;

		Use Case 5: Retain the original attributes and modify the element with attributes and set it to null
		-----------
			ElemAttrVector = 
		(&apos;sam:Author&apos;,&apos;sam:firstname&apos;,&apos;Joe&apos;), 	-- Use Case 5: Retain the attribute
		(&apos;sam:Author&apos;,&apos;sam:lastname&apos;,&apos;Author&apos;), -- Use Case 5: Retain the attribute
		(&apos;sam:Author&apos;,NULL,NULL) 				-- Use Case 5: Modify an element with attributes and set it to null

			&lt;xslt:template match=&quot;sam:Author&quot;&gt;
			  &lt;xslt:element name=&quot;{name()}&quot;&gt;
			    &lt;xslt:attribute name=&quot;sam:firstname&quot;&gt;Joe&lt;/xslt:attribute&gt;
			    &lt;xslt:attribute name=&quot;sam:lastname&quot;&gt;Author&lt;/xslt:attribute&gt;
			    &lt;xslt:attribute name=&quot;xsi:nil&quot;&gt;true&lt;/xslt:attribute&gt;
			  &lt;/xslt:element&gt;
			&lt;/xslt:template&gt;

	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	Modified:    1/18/2011
	CSW Version: 5.2.0

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE parseAndModifyXML(
	IN debug			CHAR(1),
	IN namespaces		LONGVARCHAR,
	IN ElemAttrVector	VECTOR(/shared/ASAssets/Utilities/TypeDefinitions.ElemAttrValuesType),
/*		qualElem varchar(2048), 
		qualAttr varchar(2048), 
		invalue varchar
*/
	IN inXml			XML,
	OUT outXml			XML
	)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;parseAndModifyXML()&apos;;
	DECLARE xsltExpr		LONGVARCHAR;
	DECLARE xsltTemplate	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE xsltAttributes	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE i				INTEGER DEFAULT 1;
	DECLARE prevElement		VARCHAR(2048) DEFAULT &apos;&apos;;
	DECLARE newline			VARCHAR;
	DECLARE firstTime		BOOLEAN DEFAULT TRUE;
	DECLARE notEmpty		SMALLINT DEFAULT 0;
	DECLARE empty			SMALLINT DEfAULT 1;

	set newline = &apos;
&apos;;
	-- Build the XSLT template that will set element and attribute values for a given Element
	-- Build a template for each Element/Attribute pair found in the Element-Attribute vector
	WHILE (i &lt;= CARDINALITY(ElemAttrVector)) DO
		IF (ElemAttrVector[i].qualElem = prevElement) THEN
			-- Determine if there is an attribute
			IF  (isEmpty(ElemAttrVector[i].qualAttr) = notEmpty) THEN
				-- Modify the Attribute
				set xsltAttributes = xsltAttributes || newline ||
				&apos;    &lt;xslt:attribute name=&quot;&apos;||ElemAttrVector[i].qualAttr||&apos;&quot;&gt;&apos;|| emptyStr(ElemAttrVector[i].inValue) ||&apos;&lt;/xslt:attribute&gt;&apos;;
			ELSE -- Element only
				-- Modify the element
				IF  (ElemAttrVector[i].inValue IS NULL) THEN
					-- Set the element to xsi:nil=&quot;true&quot;
					set xsltAttributes = xsltAttributes || newline ||
					&apos;    &lt;xslt:attribute name=&quot;xsi:nil&quot;&gt;true&lt;/xslt:attribute&gt;&apos;;
				ELSE
					-- Set the element value
					set xsltAttributes = xsltAttributes || newline ||
					&apos;    &lt;xslt:element&gt;&apos;|| emptyStr(ElemAttrVector[i].inValue) ||&apos;&lt;/xslt:element&gt;&apos;;
				END IF;
			END IF;
		ELSE
			IF (firstTime) THEN
				-- Create the starting Template
				set xsltTemplate = xsltTemplate  || newline ||
					&apos;&lt;xslt:template match=&quot;&apos;||ElemAttrVector[i].qualElem||&apos;&quot;&gt;&apos; || newline ||
					&apos;  &lt;xslt:element name=&quot;{name()}&quot;&gt;&apos;;

				-- Determine if there is an attribute
				IF  (isEmpty(ElemAttrVector[i].qualAttr) = notEmpty) THEN
					-- Modify the Attribute
					set xsltAttributes = xsltAttributes || newline ||
					&apos;    &lt;xslt:attribute name=&quot;&apos;||ElemAttrVector[i].qualAttr||&apos;&quot;&gt;&apos;|| emptyStr(ElemAttrVector[i].inValue) ||&apos;&lt;/xslt:attribute&gt;&apos;;
				ELSE -- Element only
					-- Modify the element
					IF  (ElemAttrVector[i].inValue IS NULL) THEN
						-- Set the element to xsi:nil=&quot;true&quot;
						set xsltAttributes = xsltAttributes || newline ||
						&apos;    &lt;xslt:attribute name=&quot;xsi:nil&quot;&gt;true&lt;/xslt:attribute&gt;&apos;;
					ELSE
						-- Set the element value
						set xsltAttributes = xsltAttributes || newline ||
						&apos;    &lt;xslt:element&gt;&apos;|| emptyStr(ElemAttrVector[i].inValue) ||&apos;&lt;/xslt:element&gt;&apos;;
					END IF;
				END IF;

				set firstTime = false;
			else
				-- Close out this template if when the element name changes except for the first time through
				set xsltTemplate = xsltTemplate || 
					xsltAttributes || newline ||
					&apos;  &lt;/xslt:element&gt;&apos; || newline ||
					&apos;&lt;/xslt:template&gt;&apos; || newline;

				-- If not the last entry in the vector then begin a new template grouping
				IF (i &lt;= CARDINALITY(ElemAttrVector)) THEN
					-- Create a new template
					set xsltTemplate = xsltTemplate  || newline ||
					&apos;&lt;xslt:template match=&quot;&apos;||ElemAttrVector[i].qualElem||&apos;&quot;&gt;&apos; || newline ||
					&apos;  &lt;xslt:element name=&quot;{name()}&quot;&gt;&apos;;
					set xsltAttributes = &apos;&apos;; -- Initialize the attributes for starting a new template

					-- Determine if there is an attribute
					IF  (isEmpty(ElemAttrVector[i].qualAttr) = notEmpty) THEN
						-- Modify the Attribute
						set xsltAttributes = xsltAttributes || newline ||
						&apos;    &lt;xslt:attribute name=&quot;&apos;||ElemAttrVector[i].qualAttr||&apos;&quot;&gt;&apos;|| emptyStr(ElemAttrVector[i].inValue) ||&apos;&lt;/xslt:attribute&gt;&apos;;
					ELSE -- Element only
						-- Modify the element
						IF  (ElemAttrVector[i].inValue IS NULL) THEN
							-- Set the element to xsi:nil=&quot;true&quot;
							set xsltAttributes = xsltAttributes || newline ||
							&apos;    &lt;xslt:attribute name=&quot;xsi:nil&quot;&gt;true&lt;/xslt:attribute&gt;&apos;;
						ELSE
							-- Set the element value
							set xsltAttributes = xsltAttributes || newline ||
							&apos;    &lt;xslt:element&gt;&apos;|| ElemAttrVector[i].inValue ||&apos;&lt;/xslt:element&gt;&apos;;
						END IF;
					END IF;

				END IF;
			END IF;		
		END IF;
		set prevElement = ElemAttrVector[i].qualElem;

--call print(&apos;Element=&apos;||ElemAttrVector[i].qualElem);
--call print(&apos;XSLT Template=&apos;||xsltTemplate);
--call print(&apos;XSLT Attributes=&apos;||xsltAttributes);
		set i = i + 1;
	END WHILE;
	set xsltTemplate = xsltTemplate ||
		xsltAttributes || newline ||
		&apos;  &lt;/xslt:element&gt;&apos; || newline ||
		&apos;&lt;/xslt:template&gt;&apos;;

	-- Create the baseline XSTL script that will parse and replace an element with attributes
	set xsltExpr = 
&apos;&lt;xslt:stylesheet version=&quot;1.0&quot;
	xmlns:xslt=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
	xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot; 
	&apos;|| namespaces || &apos;&gt;

  &lt;xslt:output method=&quot;xml&quot; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; indent=&quot;yes&quot; /&gt;
    
  &lt;xslt:template match=&quot;node()&quot;&gt;
    &lt;xslt:copy&gt;
    &lt;xslt:apply-templates select=&quot;@*|node()&quot;/&gt;
    &lt;/xslt:copy&gt;
  &lt;/xslt:template&gt;
&apos; || xsltTemplate ||&apos;

  &lt;xslt:template match=&quot;@*|text()|comment()&quot;&gt;
    &lt;xslt:copy&gt;
      &lt;xslt:apply-templates select=&quot;@*|node()&quot;/&gt;
    &lt;/xslt:copy&gt;
  &lt;/xslt:template&gt;

&lt;/xslt:stylesheet&gt;
&apos;;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;XSLT=&apos;|| xsltExpr);	

	-- Execute the XSLT against the incoming XML (KO/SDR) format
	SET outXml = XSLT( inXml, xsltExpr );
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>