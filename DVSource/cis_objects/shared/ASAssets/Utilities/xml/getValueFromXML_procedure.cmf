<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getValueFromXML" path="/shared/ASAssets/Utilities/xml/getValueFromXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>getValueFromXML:
	Given an XPath, extract the value from any XML document.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/sam:Name/@sam:isbn
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
					&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
					&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     &lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath
			Values: e.g. 12-3456-123
	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXpath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getValueFromXML:
	Given an XPath, extract the value from any XML document.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/sam:Name/@sam:isbn
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
					&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
					&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     &lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath
			Values: e.g. 12-3456-123
	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getValueFromXML(
	IN debug			CHAR(1),
	IN namespaces		LONGVARCHAR,
	IN inXpath			LONGVARCHAR,
	IN inXml			XML,
	OUT outValue		LONGVARCHAR
)
BEGIN
	DECLARE moduleName	VARCHAR DEFAULT &apos;getValueFromXML()&apos;;
	DECLARE	xsltExpr 	VARCHAR(2048);
	DECLARE outXml		XML;

	set xsltExpr = 
&apos;&lt;xslt:stylesheet version=&quot;1.0&quot;
	xmlns:xslt=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
	xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot; 
	&apos;|| namespaces || &apos;&gt;

  &lt;xslt:template match=&quot;/&quot;&gt;
    &lt;xslt:variable name=&quot;_xpath&quot;/&gt;
    &lt;xslt:element name=&quot;results&quot;&gt;
      &lt;xslt:variable name=&quot;_xpath&quot; select=&quot;&apos;|| inXpath || &apos;&quot;/&gt;
      &lt;xslt:element name=&quot;result&quot;&gt;

        &lt;xslt:element name=&quot;value&quot;&gt;
          &lt;xslt:value-of select=&quot;$_xpath&quot;/&gt;
        &lt;/xslt:element&gt;

      &lt;/xslt:element&gt;
    &lt;/xslt:element&gt;
  &lt;/xslt:template&gt;
&lt;/xslt:stylesheet&gt;
&apos;;
	set outXml = XSLT( inXml, xsltExpr );
	set outValue = cast(XPATH(outXml, &apos;//value/text()&apos;) as LONGVARCHAR);
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XSLT=&apos;||xsltExpr||CHR(13)||&apos;  XPath=&apos;||inXpath || &apos;  VALUE=&apos;||emptyStr(outValue));	
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>