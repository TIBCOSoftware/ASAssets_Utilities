<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getNodeFromXML" path="/shared/ASAssets/Utilities/xml/getNodeFromXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>getNodeFromXML:
	Given a qualified XPath, extract the node tree from the incoming XML.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/Chapter
		iteration		0=get all iterations, 1=get 1st occurrence only
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
							&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
							&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     	&lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath.  Empty String returned if node not found.
			Values: &lt;Chapter&gt;Test Data&lt;/Chapter&gt;
	Exceptions:  none
	Author:      Mike Tinius
	Date:        9/1/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXpath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="iteration" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/findString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/findString" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/findString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNodeFromXML:
	Given a qualified XPath, extract the node tree from the incoming XML.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/Chapter
		iteration		0=get all iterations, 1=get 1st occurrence only
		inXml - any valid XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
							&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
							&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     	&lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath.  Empty String returned if node not found.
			Values: &lt;Chapter&gt;Test Data&lt;/Chapter&gt;
	Exceptions:  none
	Author:      Mike Tinius
	Date:        9/1/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getNodeFromXML(
	IN debug			CHAR(1),
	IN namespaces		LONGVARCHAR,
	IN inXpath			LONGVARCHAR,
	IN iteration		INTEGER, -- 0=get all iterations, 1=get 1st occurrence only
	IN inXml			XML,
	OUT outValue		LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;getNodeFromXML()&apos;;
	DECLARE	xsltExpr 		VARCHAR(2048);
	DECLARE outXML			XML;
	DECLARE enclosingNode	VARCHAR(255);
	DECLARE enclosingNodeLen INTEGER;
	DECLARE beginPos		INTEGER;
	DECLARE endPos			INTEGER;
	DECLARE emptyNodePos	INTEGER;
	DECLARE tempPath		/shared/ASAssets/Utilities/TypeDefinitions.pathType;
	DECLARE copy_options	VARCHAR DEFAULT &apos;@*|node()&apos;; -- get all attributes and nodes and return empty ones also
	DECLARE direction		CHAR(1);
	DECLARE notEmpty		BIT DEFAULT 0;

	-- extract the enclosing node for the XML being retrieved.
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(inXpath, &apos;E&apos;, enclosingNode, tempPath);
	set enclosingNode = REPLACE(enclosingNode, &apos;@&apos;, &apos;&apos;); -- remove any attribute designations

	set xsltExpr = 
&apos;&lt;xsl:stylesheet version=&quot;1.0&quot;
	xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
	&apos;|| namespaces || &apos;&gt;
 &lt;xsl:template match=&quot;&apos; || inXpath ||&apos;&quot;&gt;
    &lt;xsl:copy copy-namespaces=&quot;yes&quot;&gt;
      &lt;xsl:copy-of select=&quot;&apos;||copy_options||&apos;&quot;/&gt;
    &lt;/xsl:copy&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
&apos;;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XSLT=&apos;||xsltExpr);	
	set outXML = XSLT( inXml, xsltExpr );
	set outValue = cast(outXML as longvarchar);
--	call /shared/Utilities/log/logDebugMessage(moduleName,debug,&apos;outValue after XSLT=&apos;||outValue);	
	if (isEmpty(outValue) = notEmpty) then
		-- set the direction to search for the enclosing node
		if (iteration = 0) then
			set direction = &apos;R&apos;; -- get all of the interations
		else
			set direction = &apos;F&apos;; -- get the first iteration only
		end if;
		set beginPos = POSITION(&apos;&lt;&apos;||enclosingNode in outValue);
		set endPos = findString(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;, outValue, direction);
		set emptyNodePos = findString(&apos;/&gt;&apos;, outValue, direction);
--		call /shared/Utilities/log/logDebugMessage(moduleName,debug,&apos;beginPos=&apos;||beginPos||&apos;  endPos=&apos;||endPos||&apos;  emptyNodePos=&apos;||emptyNodePos);	
		if (beginPos = 0) then
			set outValue = &apos;&apos;; -- return empty if begin enclosing node not found
		else
			if (endPos &gt; emptyNodePos) then
				set enclosingNodeLen = LENGTH(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;);
			else
				if (direction = &apos;F&apos;) then
					if (endPos &lt; emptyNodePos and endPos &lt;&gt; 0) then
						set enclosingNodeLen = LENGTH(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;);
					else
						set endPos = emptyNodePos;
						set enclosingNodeLen = LENGTH(&apos;/&gt;&apos;);
					end if;
				else
					set endPos = emptyNodePos;
					set enclosingNodeLen = LENGTH(&apos;/&gt;&apos;);
				end if;
			end if;
			set outValue = substring(outValue, beginPos, endPos-beginPos + enclosingNodeLen);
		end if;
	end if;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XPath=&apos;||inXpath || &apos;    NODE VALUE: [&apos;||emptyStr(outValue)||&apos;]&apos;);	
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>