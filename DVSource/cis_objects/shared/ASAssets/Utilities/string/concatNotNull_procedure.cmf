<?xml version="1.1" encoding="UTF-8"?>
<metadata name="concatNotNull" path="/shared/ASAssets/Utilities/string/concatNotNull" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>concatNotNull:
	Concatenate the first string and the second string together according to the mode parameter:
		0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
		1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
		2=return empty string when inputString2 is null.  This is a prefix example.   
		3=return empty string when inputString1 is null.   This is a suffix example.  

	Input:
		inputString1 - contains any string.  
			Values: Any text value
		inputString2 - contains any string to be concatened with the first string
		mode - 
			0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
				This emulates the native concatenation.  Any nulls result in a null.
				inputString1 (part1)	inputString2 (part2)	result
				&apos;a&apos;						&apos;b&apos;						&apos;ab&apos;
				&apos;a&apos;						null					null
				null					&apos;b&apos;						null
				null					null					null
			1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
				This provides a use case to concat two strings like the original + a new string and not worry about null values because a non-null is always returned.
				inputString1 (part1)	inputString2 (part2)	result
				&apos;a&apos;						&apos;b&apos;						&apos;ab&apos;
				&apos;a&apos;						null					&apos;a&apos;
				null					&apos;b&apos;						&apos;b&apos;
				null					null					&apos;&apos;
				&apos;&apos;						&apos;&apos;						&apos;&apos;
			2=return empty string when inputString2 is null.  This is a prefix example.   
				Only return string content when inputString2 (primary) is not null otherwise return a blank.
				inputString1 (prefix)	inputString2 (primary)	result
				&apos;prefix_&apos;				&apos;primary&apos;				&apos;prefix_primary&apos;
				&apos;prefix_&apos;				primary					&apos;&apos;
				null					&apos;main&apos;					&apos;primary&apos;
				null					null					&apos;&apos;
				&apos;&apos;						&apos;&apos;						&apos;&apos;
			3=return empty string when inputString1 is null.   This is a suffix example.  
				Only return string content when inputString1 (primary) is not null otherwise return a blank.
				inputString1 (primary)	inputString2 (suffix)	result
				&apos;primary&apos;				&apos;_suffix&apos;				&apos;primary_suffix&apos;
				&apos;primary&apos;				null					&apos;primary&apos;
				null					&apos;_suffix&apos;				&apos;&apos;
				null					null					&apos;&apos;
				&apos;&apos;						&apos;&apos;						&apos;&apos;
	Output:
		outputString - contains the results of the concatenation
	Examples:
		1) Concatenate a message where either part of the input message may or may not be null:
			set part1 = &apos;Original message. &apos;
			set part2 = null
			set msg=concatNotNull(part1, part2, 1);
			result:  msg=&apos;Original message.&apos;

			set part1 = &apos;Original message. &apos;
			set part2 = &apos;New part of message.&apos;
			set msg=concatNotNull(part1, part2, 1);
			result:  msg=&apos;Original message. New part of message.&apos;

		2) Build out a URL path:
			set catlog=null;
			set schema=&apos;b&apos;;
			set table=&apos;c&apos;;
			set url=concatNotNull(catlog, &apos;.&apos;, 3)||concatNotNull(schema, &apos;.&apos;, 3)||table;
			result:  url=b.c

		3) Build out a CIS PATH:
			set catlog=&apos;a&apos;;
			set schema=&apos;b&apos;;
			set table=&apos;c&apos;;
			set url=concatNotNull(catlog, &apos;/&apos;, 3)||concatNotNull(schema, &apos;/&apos;, 3)||table;
			result:  url=a/b/c

		4) Concatenate a prefix to a table name where the prefix may or may not be null:
			set prefix=&apos;STG_&apos;;
			set table=&apos;VIEW1&apos;;
			set table=concatNotNull(prefix, table, 2);
			result:  table=STG_VIEW1

			set prefix=null;
			set table=&apos;VIEW1&apos;;
			set table=concatNotNull(prefix, table, 2);
			result:  table=VIEW1

		5) Concatenate a suffix to a procedure name where the suffix may or may not be null:
			set proc=&apos;PROC1&apos;;
			set suffix=&apos;_init&apos;;
			set proc=concatNotNull(proc, suffix, 3);
			result:  proc=PROC1_init

			set proc=&apos;PROC1&apos;;
			set suffix=&apos;_init&apos;;
			set proc=concatNotNull(proc, suffix, 3);
			result:  proc=PROC1

	Exceptions:  none

	Modified Date: 	Modified By:		CSW Version:	Reason:
	09/04/2014		Mike Tinius			6.2.6			Added new.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="inputString1" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inputString2" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="mode" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="outputString" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <attribute name="Script" type="STRING">/* concatNotNull:
	Concatenate the first string and the second string together according to the mode parameter:
		0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
		1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
		2=return empty string when inputString2 is null.  This is a prefix example.   
		3=return empty string when inputString1 is null.   This is a suffix example.  

	Input:
		inputString1 - contains any string.  
			Values: Any text value
		inputString2 - contains any string to be concatened with the first string
		mode - 
			0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
				This emulates the native concatenation.  Any nulls result in a null.
				inputString1 (part1)	inputString2 (part2)	result
				&apos;a&apos;						&apos;b&apos;						&apos;ab&apos;
				&apos;a&apos;						null					null
				null					&apos;b&apos;						null
				null					null					null
			1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
				This provides a use case to concat two strings like the original + a new string and not worry about null values because a non-null is always returned.
				inputString1 (part1)	inputString2 (part2)	result
				&apos;a&apos;						&apos;b&apos;						&apos;ab&apos;
				&apos;a&apos;						null					&apos;a&apos;
				null					&apos;b&apos;						&apos;b&apos;
				null					null					&apos;&apos;
				&apos;&apos;						&apos;&apos;						&apos;&apos;
			2=return empty string when inputString2 is null.  This is a prefix example.   
				Only return string content when inputString2 (primary) is not null otherwise return a blank.
				inputString1 (prefix)	inputString2 (primary)	result
				&apos;prefix_&apos;				&apos;primary&apos;				&apos;prefix_primary&apos;
				&apos;prefix_&apos;				primary					&apos;&apos;
				null					&apos;main&apos;					&apos;primary&apos;
				null					null					&apos;&apos;
				&apos;&apos;						&apos;&apos;						&apos;&apos;
			3=return empty string when inputString1 is null.   This is a suffix example.  
				Only return string content when inputString1 (primary) is not null otherwise return a blank.
				inputString1 (primary)	inputString2 (suffix)	result
				&apos;primary&apos;				&apos;_suffix&apos;				&apos;primary_suffix&apos;
				&apos;primary&apos;				null					&apos;primary&apos;
				null					&apos;_suffix&apos;				&apos;&apos;
				null					null					&apos;&apos;
				&apos;&apos;						&apos;&apos;						&apos;&apos;
	Output:
		outputString - contains the results of the concatenation
	Examples:
		1) Concatenate a message where either part of the input message may or may not be null:
			set part1 = &apos;Original message. &apos;
			set part2 = null
			set msg=concatNotNull(part1, part2, 1);
			result:  msg=&apos;Original message.&apos;

			set part1 = &apos;Original message. &apos;
			set part2 = &apos;New part of message.&apos;
			set msg=concatNotNull(part1, part2, 1);
			result:  msg=&apos;Original message. New part of message.&apos;

		2) Build out a URL path:
			set catlog=null;
			set schema=&apos;b&apos;;
			set table=&apos;c&apos;;
			set url=concatNotNull(catlog, &apos;.&apos;, 3)||concatNotNull(schema, &apos;.&apos;, 3)||table;
			result:  url=b.c

		3) Build out a CIS PATH:
			set catlog=&apos;a&apos;;
			set schema=&apos;b&apos;;
			set table=&apos;c&apos;;
			set url=concatNotNull(catlog, &apos;/&apos;, 3)||concatNotNull(schema, &apos;/&apos;, 3)||table;
			result:  url=a/b/c

		4) Concatenate a prefix to a table name where the prefix may or may not be null:
			set prefix=&apos;STG_&apos;;
			set table=&apos;VIEW1&apos;;
			set table=concatNotNull(prefix, table, 2);
			result:  table=STG_VIEW1

			set prefix=null;
			set table=&apos;VIEW1&apos;;
			set table=concatNotNull(prefix, table, 2);
			result:  table=VIEW1

		5) Concatenate a suffix to a procedure name where the suffix may or may not be null:
			set proc=&apos;PROC1&apos;;
			set suffix=&apos;_init&apos;;
			set proc=concatNotNull(proc, suffix, 3);
			result:  proc=PROC1_init

			set proc=&apos;PROC1&apos;;
			set suffix=&apos;_init&apos;;
			set proc=concatNotNull(proc, suffix, 3);
			result:  proc=PROC1

	Exceptions:  none

	Modified Date: 	Modified By:		CSW Version:	Reason:
	09/04/2014		Mike Tinius			6.2.6			Added new.

    Â© 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE concatNotNull(
	IN  inputString1 	LONGVARCHAR,
	IN  inputString2 	LONGVARCHAR,
	IN  mode			SMALLINT,
	OUT outputString	LONGVARCHAR
)
BEGIN
	IF (mode IS NULL OR (mode IS NOT NULL AND mode = 0)) THEN
		SET outputString = inputString1 || inputString2;
	END IF;
	IF (mode IS NOT NULL AND mode = 1) THEN
		IF (inputString1 IS NOT NULL AND inputString2 IS NOT NULL) THEN
			SET outputString = inputString1 || inputString2;
		ELSEIF (inputString1 IS NULL AND inputString2 IS NOT NULL) THEN
			SET outputString = inputString2;
		ELSEIF (inputString1 IS NOT NULL AND inputString2 IS NULL) THEN
			SET outputString = inputString1;
		ELSE
			SET outputString = &apos;&apos;;
		END IF;
	END IF;
	IF (mode IS NOT NULL AND mode = 2) THEN
		IF (inputString1 IS NOT NULL AND inputString2 IS NOT NULL) THEN
			SET outputString = inputString1 || inputString2;
		ELSEIF (inputString1 IS NULL AND inputString2 IS NOT NULL) THEN
			SET outputString = inputString2;
		ELSEIF (inputString1 IS NOT NULL AND inputString2 IS NULL) THEN
			SET outputString = &apos;&apos;;
		ELSE
			SET outputString = &apos;&apos;;
		END IF;
	END IF;
	IF (mode IS NOT NULL AND mode = 3) THEN
		IF (inputString1 IS NOT NULL AND inputString2 IS NOT NULL) THEN
			SET outputString = inputString1 || inputString2;
		ELSEIF (inputString1 IS NULL AND inputString2 IS NOT NULL) THEN
			SET outputString = &apos;&apos;;
		ELSEIF (inputString1 IS NOT NULL AND inputString2 IS NULL) THEN
			SET outputString = inputString1;
		ELSE
			SET outputString = &apos;&apos;;
		END IF;
	END IF;
END
</attribute>
  <attribute name="creationDate" type="LONG">1409837815191</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>