<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getConstant" path="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>getConstant:

	This procedure gets a constant value from a dynamic constant path.  All constants must be of type VARCHAR.  
	If the value is actually an integer THEN the application must take care of casting to the proper value.

	Input:
		constantPath - The path to the constants file ending with procedure parenthesis ().                                                                                                                                                 i.e. /shared/PSAsSETs/Utilities/documentation/constants()
		constantName - The name of the constant.
 

	Output:
		outValue - The value of the constant


	Exceptions:  
		/lib/util/System.IllegalArgumentException - Exception IF constantPath is not valid (null or resource not found).

	ModIFied Date:   Updated By:	CSW Version:	Reason:
	08/28/2014		Mike Tinius		6.2.6			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="constantName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="fixedResourcePath" direction="OUT">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getConstant:

	This procedure gets a constant value from a dynamic constant path.  All constants must be of type VARCHAR.  
	If the value is actually an integer THEN the application must take care of casting to the proper value.

	Input:
		constantPath - The path to the constants file ending with procedure parenthesis ().                                                                                                                                                 i.e. /shared/PSAsSETs/Utilities/documentation/constants()
		constantName - The name of the constant.
 

	Output:
		outValue - The value of the constant


	Exceptions:  
		/lib/util/System.IllegalArgumentException - Exception IF constantPath is not valid (null or resource not found).

	ModIFied Date:   Updated By:	CSW Version:	Reason:
	08/28/2014		Mike Tinius		6.2.6			Created new

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE getConstant(
	IN constantPath		/shared/ASAsSETs/Utilities/TypeDefinitions.pathType,
	IN constantName		VARCHAR,
	OUT outValue		LONGVARCHAR
)
BEGIN
	DECLARE contsantPath_		/shared/ASAsSETs/Utilities/TypeDefinitions.pathType DEFAULT constantPath;
	DECLARE sqlStatement		VARCHAR(1024);
	DECLARE result				CURSOR (textVal LONGVARCHAR);
	DECLARE sqlProjection		VARCHAR(1024);
	DECLARE sqlFrom				VARCHAR(1024);
	DECLARE resExists			BOOLEAN;
	DECLARE ex					EXCEPTION;

	IF (contsantPath_ IS NULL OR LENGTH(contsantPath_) = 0) THEN
		RAISE System.IllegalArgumentException VALUE &apos;The parameter &quot;constantsPath&quot; is null or empty.  Please provide a valid path.&apos;;
	END IF;
	IF (constantName IS NULL OR LENGTH(constantName) = 0) THEN
		RAISE System.IllegalArgumentException VALUE &apos;The parameter &quot;constantName&quot; is null or empty.  Please provide a valid constant.&apos;;
	END IF;
	CALL /lib/resource/ResourceExists(contsantPath_, &apos;PROCEDURE&apos;, null, resExists);
	IF (NOT resExists) THEN
		RAISE System.IllegalArgumentException VALUE &apos;The &quot;constantsPath=[&apos;||TRIM(NVL(contsantPath_, &apos; &apos;))||&apos;]&quot; does not exist.  Please provide a valid path.&apos;;
	END IF;

	-- Set up the sql projection list
	IF (isEmpty(constantName) = 0) THEN
		SET sqlProjection = TRIM(constantName);
	ELSE
		SET sqlProjection = &apos;null&apos;;
	END IF;
	-- Set up the SQL from clause
	IF (isEmpty(contsantPath_) = 0) THEN
		SET sqlFrom = TRIM(applyReservedListToPath(contsantPath_,null));
		-- Append procedure () at the end of the path IF it does not exist.
		IF (POSITION(&apos;()&apos; IN contsantPath_) = 0) THEN
			SET sqlFrom = sqlFrom || &apos;()&apos;;
		END IF;
	END IF;

	-- Set up the SQL statement
	SET sqlStatement = &apos;select &apos;|| sqlProjection || &apos; from &apos; || sqlFrom;
	-- call print(&apos;SQL:&apos;||sqlStatement);

	SET outValue = null;
	OPEN result FOR sqlStatement;
	FOR r AS result DO
		SET outValue = r.textVal;
	END FOR;
END
</attribute>
  <attribute name="creationDate" type="LONG">1409259010734</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/52</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/55</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/59</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>