<?xml version="1.1" encoding="UTF-8"?>
<metadata name="findOpenClosePair" path="/shared/ASAssets/Utilities/string/findOpenClosePair" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>findOpenClosePair:

	Search through the sql script to find the corresponding left open and right close pairs. 
	This script was originally developed to parse through SQL text to find functions.
	Only a single character value is supported for these delimiters. Valid pairs include: (), [], {}, &lt;&gt;, /\
	Examples of patterns and their output:
		Type:						Example:			extractedScript:	extractedScriptBefore:	extractedScriptAfter:
		A single outer () pair		P1(P2(a))			P2(a)				P1						
		A non-related pair  		P1(a) + P2(b)		a					P1						 + P2(b)
 		A single outer pair  		a+P1(P2(a)+P3(b))-a	P2(a)+P3(b)			a+P1					-a				

	Input:
		sqlScript				LONGVARCHAR,	-- The sql script or expression to parse
		begPos					INTEGER,		-- The position to start searching for the first open/close pair P1 ( expression )
		openingDelim			VARCHAR			-- The opening delimiter such as left paren ( or left bracket [
		closingDelim			VARCHAR			-- The closing delimiter such as right paren ) or right bracket ].  The opening and closing character cannot be the same.
		trimText				INTEGER, 		-- Trim the extractedScript. 0 do not trim, 1=do trim.
	Output:
		openingDelimPos			INTEGER,		-- The position of the left open character for the pair.
		closingDelimPos			INTEGER			-- The position of the right close character for the pair.
		extractedScript			LONGVARCHAR, 	-- This is the first encountered extracted &quot;expression&quot; between the opening and closing pair P1 ( expression ).
		extractedScriptBefore	LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; before the opening pair &quot;exp_before P1 ( expression ) exp_after&quot;.
		extractedScriptAfter	LONGVARCHAR 	-- This is the first extracted &quot;expression&quot; after the closing pair &quot;exp_before P1 ( expression ) exp_after&quot;.

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/24/2017		Mike Tinius			7.0.5			Created new

	© 2017 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.</annotation>
  <parameters>
    <parameter name="sqlScript" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="begPos" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="openingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="closingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="trimText" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="openingDelimPos" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="closingDelimPos" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="extractedScript" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="extractedScriptBefore" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="extractedScriptAfter" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ EXECUTE"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	findOpenClosePair:

	Search through the sql script to find the corresponding left open and right close pairs. 
	This script was originally developed to parse through SQL text to find functions.
	Only a single character value is supported for these delimiters. Valid pairs include: (), [], {}, &lt;&gt;, /\
	Examples of patterns and their output:
		Type:						Example:			extractedScript:	extractedScriptBefore:	extractedScriptAfter:
		A single outer () pair		P1(P2(a))			P2(a)				P1						
		A non-related pair  		P1(a) + P2(b)		a					P1						 + P2(b)
 		A single outer pair  		a+P1(P2(a)+P3(b))-a	P2(a)+P3(b)			a+P1					-a				

	Input:
		sqlScript				LONGVARCHAR,	-- The sql script or expression to parse
		begPos					INTEGER,		-- The position to start searching for the first open/close pair P1 ( expression )
		openingDelim			VARCHAR			-- The opening delimiter such as left paren ( or left bracket [
		closingDelim			VARCHAR			-- The closing delimiter such as right paren ) or right bracket ].  The opening and closing character cannot be the same.
		trimText				INTEGER, 		-- Trim the extractedScript. 0 do not trim, 1=do trim.
	Output:
		openingDelimPos			INTEGER,		-- The position of the left open character for the pair.
		closingDelimPos			INTEGER			-- The position of the right close character for the pair.
		extractedScript			LONGVARCHAR, 	-- This is the first encountered extracted &quot;expression&quot; between the opening and closing pair P1 ( expression ).
		extractedScriptBefore	LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; before the opening pair &quot;exp_before P1 ( expression ) exp_after&quot;.
		extractedScriptAfter	LONGVARCHAR 	-- This is the first extracted &quot;expression&quot; after the closing pair &quot;exp_before P1 ( expression ) exp_after&quot;.

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/24/2017		Mike Tinius			7.0.5			Created new

	© 2017 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE findOpenClosePair(
	IN	sqlScript				LONGVARCHAR,	-- The sql script or expression to parse
	IN	begPos					INTEGER,		-- The position to start searching for the first open/close pair P1 ( expression )
	IN	openingDelim			VARCHAR,		-- The opening delimiter such as left paren ( or left bracket [
	IN	closingDelim			VARCHAR,		-- The closing delimiter such as right paren ) or right bracket ].  The opening and closing character cannot be the same.
	IN 	trimText				INTEGER, 		-- Trim the extractedScript. 0 do not trim, 1=do trim.
	OUT openingDelimPos			INTEGER,		-- The position of the left open character for the pair.
	OUT closingDelimPos			INTEGER,		-- The position of the right close character for the pair.
	OUT extractedScript			LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; between the opening and closing pair P1 ( expression ).
	OUT extractedScriptBefore	LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; before the opening pair &quot;exp_before P1 ( expression ) exp_after&quot;.
	OUT extractedScriptAfter	LONGVARCHAR 	-- This is the first extracted &quot;expression&quot; after the closing pair &quot;exp_before P1 ( expression ) exp_after&quot;.
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;findOpenClosePair&apos;;
	DECLARE debug					CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE debugPrintSize			INTEGER DEFAULT 60000;
	DECLARE i						INTEGER;
	DECLARE len						INTEGER;
	DECLARE pairCount				INTEGER;
	DECLARE ch						VARCHAR;
	DECLARE validOpeningDelimdList	VARCHAR DEFAULT &apos;(,{,[,&lt;,/&apos;;
	DECLARE validClosingDelimdList	VARCHAR DEFAULT &apos;),},],&gt;,\&apos;;
	DECLARE INVALID_DELIMITER		EXCEPTION;

	-- Initialize parameters
	set extractedScript = null;
	set extractedScriptBefore = null;
	set extractedScriptAfter = null;
	set openingDelimPos = 0;
	set closingDelimPos = 0;
	if (debug = &apos;Y&apos;) then
		call print(moduleName||&apos; :  begPos=&apos;||begPos||&apos;  openingDelim=&apos;||TRIM(NVL(openingDelim,&apos;  &apos;))||&apos;  closingDelim=&apos;||TRIM(NVL(closingDelim,&apos;  &apos;))||
								&apos;  sqlScript=[&apos;||SUBSTRING(RTRIM(NVL(sqlScript,&apos;  &apos;)),1,debugPrintSize));
	end if;
	if (openingDelim is null or length(trim(openingDelim)) = 0) then
		raise INVALID_DELIMITER value moduleName||&apos; : The input variable &quot;openingDelim&quot; cannot be null or blank.&apos;;
	end if;
	if (closingDelim is null or length(trim(closingDelim)) = 0) then
		raise INVALID_DELIMITER value moduleName||&apos; : The input variable &quot;closingDelim&quot; cannot be null or blank.&apos;;
	end if;
	if (openingDelim = closingDelim) then
		raise INVALID_DELIMITER value moduleName||&apos; : The input variables &quot;openingDelim&quot;=&quot;&apos;||openingDelim||&apos;&quot; and &quot;closingDelim&quot;=&quot;&apos;||closingDelim||&apos;&quot; cannot be the same.&apos;;
	end if;
	-- Determine if the opening delimiter is valid
	set i = 1;
	set len = LENGTH(openingDelim);
	while (i &lt;= len) do
		set ch = SUBSTRING(openingDelim,i,1);
		if (INSTR(validOpeningDelimdList, ch) = 0) then
			raise INVALID_DELIMITER value &apos;The opening delimiter=&quot;&apos;||openingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid opening list: &quot;&apos;||validOpeningDelimdList||&apos;&quot;&apos;;
		end if;
		set i = i + 1;
	end while;
	-- Determine if the closing delimiter is valid
	set i = 1;
	set len = LENGTH(closingDelim);
	while (i &lt;= len) do
		set ch = SUBSTRING(closingDelim,i,1);
		if (INSTR(validClosingDelimdList, ch) = 0) then
			raise INVALID_DELIMITER value &apos;The closing delimiter=&quot;&apos;||closingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid closing list: &quot;&apos;||validClosingDelimdList||&apos;&quot;&apos;;
		end if;
		set i = i + 1;
	end while;

	if (sqlScript IS NOT NULL AND LENGTH(TRIM(sqlScript)) &gt; 0) then
		-- Search through the sql script to find the corresponding right paren ) for the starting left paren (
		-- This assumes there is only a single outer () pair such as P1(  P2 ( ) ).  
		-- This pattern is not supported in this context: P1 ( )  P2 ( )
		set i = begPos;
		set pairCount = -1;
		parseLoop:
		while (i &lt;= LENGTH(sqlScript)) do
			set ch = substring(sqlScript,i,1);
			if (ch = openingDelim) then
				if (pairCount &lt; 0) then
					set pairCount = 0;
				end if;
				set pairCount = pairCount + 1;
				if (openingDelimPos = 0) then
					set openingDelimPos = i;
				end if;
			end if;
			if (ch = closingDelim) then
				set pairCount = pairCount - 1;
				if (pairCount = 0) then
					set closingDelimPos = i;
					leave parseLoop;
				end if;
			end if;
			set i = i + 1;
		end while;
		if (debug = &apos;Y&apos;) then
			call print(moduleName||&apos; :  begPos=&apos;||begPos||&apos;  openingDelimPos=&apos;||openingDelimPos||&apos;  closingDelimPos=&apos;||closingDelimPos);
		end if;

		if (openingDelimPos &gt; 0 and closingDelimPos &gt; 0) then
			set extractedScript = SUBSTRING(sqlScript, openingDelimPos+1, closingDelimPos-openingDelimPos-1);
			if (trimText is not null and trimText = 1) then
				set extractedScript = TRIM(extractedScript);
			end if;
			set extractedScriptBefore = SUBSTRING(sqlScript, 1, openingDelimPos-1);
			set extractedScriptAfter = SUBSTRING(sqlScript, closingDelimPos+1);
		end if;
	end if;

END</attribute>
  <attribute name="creationDate" type="LONG">1489071144247</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserId" type="INTEGER">4005</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1493255922085</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4005</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1489071144247</attribute>
</metadata>