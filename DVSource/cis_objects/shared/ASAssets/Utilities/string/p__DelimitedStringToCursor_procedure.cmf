<?xml version="1.1" encoding="UTF-8"?>
<metadata name="p_DelimitedStringToCursor" path="/shared/ASAssets/Utilities/string/p_DelimitedStringToCursor" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>p_DelimitedStringToCursor:

	Converts a delimited VARCHAR into a cursor of VARCHARs.
	The delimiter is currently limited to a single character.
	The delimiter character can optionally be included in each token.
	If any input parameter is NULL, the result is NULL.
 
	Input:

		inStr - the input varchar to be tokenized
			Values: e.g. &apos;This is a String&apos;

		inDelimiter - the delimiter character
			Values: e.g. &apos; &apos;

		inIncludeDelimiter - 1 means include, 0 means exclude
			Values: e.g. 10


	Output:

		outTokens - output cursor containing one row for each token.
			Values: e.g. {This,is,a,String}


	Exceptions:  IllegalDelimiterException - raised when delimiter is more than one
			character, or inIncludeDelimiter parameter is not 0 or 1.


	Modified Date:	Modified By:		CSW Version:	Reason:
	03/16/2005		Kevin O&apos;Brien		3.0.2			Created new
	11/05/2013		Calvin Goodrich		6.2.0			Changed input &quot;inStr&quot; and output cursor member &quot;strToken&quot; to LONGVARCHAR
	01/20/2014		Matthew Lee			6.2.0			Changed internal variable &quot;currentToken&quot; to LONGVARCHAR


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="inStr" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inDelimiter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inIncludeDelimiter" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="outTokens" direction="OUT" nullable="true">
      <datatype name="outTokens" type="TABLE" refId="1">
        <element name="strToken">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/ExceptionDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* p_DelimitedStringToCursor:

	Converts a delimited VARCHAR into a cursor of VARCHARs.
	The delimiter is currently limited to a single character.
	The delimiter character can optionally be included in each token.
	If any input parameter is NULL, the result is NULL.
 
	Input:

		inStr - the input varchar to be tokenized
			Values: e.g. &apos;This is a String&apos;

		inDelimiter - the delimiter character
			Values: e.g. &apos; &apos;

		inIncludeDelimiter - 1 means include, 0 means exclude
			Values: e.g. 10


	Output:

		outTokens - output cursor containing one row for each token.
			Values: e.g. {This,is,a,String}


	Exceptions:  IllegalDelimiterException - raised when delimiter is more than one
			character, or inIncludeDelimiter parameter is not 0 or 1.


	Modified Date:	Modified By:		CSW Version:	Reason:
	03/16/2005		Kevin O&apos;Brien		3.0.2			Created new
	11/05/2013		Calvin Goodrich		6.2.0			Changed input &quot;inStr&quot; and output cursor member &quot;strToken&quot; to LONGVARCHAR
	01/20/2014		Matthew Lee			6.2.0			Changed internal variable &quot;currentToken&quot; to LONGVARCHAR


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE p_DelimitedStringToCursor
(
    IN inStr LONGVARCHAR,
    IN inDelimiter VARCHAR,
    IN inIncludeDelimiter BIT,
    OUT outTokens PIPE
    (
        strToken LONGVARCHAR
    )
)
L_MAIN:
BEGIN
    PATH /shared/ASAssets/Utilities;

    DECLARE currentPosition INTEGER;
    DECLARE currentChar VARCHAR;
    DECLARE currentToken LONGVARCHAR;
    DECLARE includeDelimiter BOOLEAN;
    DECLARE lengthInStr INTEGER;

    SET currentPosition = 0;
    SET currentToken = &apos;&apos;;


------------------------------------------------------------------------------------
-- Check all input parameters are non NULL
------------------------------------------------------------------------------------
    IF inStr IS NULL
    THEN
        INSERT INTO outTokens(strToken) VALUES (NULL);
        LEAVE L_MAIN;
    END IF;

    IF inDelimiter IS NULL
    THEN
        INSERT INTO outTokens(strToken) VALUES (NULL);
        LEAVE L_MAIN;
    END IF;

    IF inIncludeDelimiter IS NULL
    THEN
        INSERT INTO outTokens(strToken) VALUES (NULL);
        LEAVE L_MAIN;
    END IF;

------------------------------------------------------------------------------------
-- Check delimiter is only a single character.
--
-- The space character can be a problem if it is used as a delimiter, because the
-- Query Engine&apos;s &quot;Ignore Trailing Spaces&quot; setting can cause unexpected
-- consequences with the LENGTH() function.
--
-- To work around this, we always append a character to the parameter used in
-- LENGTH().
------------------------------------------------------------------------------------
    IF LENGTH(inDelimiter || &apos;*&apos;) &gt; 2
    THEN
        RAISE /shared/ASAssets/Utilities/ExceptionDefinitions.IllegalDelimiterException VALUE &apos;p_DelimitedStringToCursor: Illegal inDelimiter value: &apos; || inDelimiter;
    END IF;


------------------------------------------------------------------------------------
-- Check include delimiter is valid
------------------------------------------------------------------------------------
    CASE inIncludeDelimiter
    WHEN 0 THEN
        SET includeDelimiter = FALSE;
    WHEN 1 THEN
        SET includeDelimiter = TRUE;
    ELSE
        RAISE /shared/ASAssets/Utilities/ExceptionDefinitions.IllegalDelimiterException VALUE &apos;p_DelimitedStringToCursor: Illegal inIncludeDelimiter value: &apos; || inIncludeDelimiter || &apos;  Must be 0 or 1&apos;;
    END CASE;


    SET lengthInStr = (LENGTH(inStr || &apos;*&apos;) - 1);
    WHILE currentPosition &lt; lengthInStr DO
        SET currentPosition = currentPosition + 1;
        SET currentChar = SUBSTRING(inStr, currentPosition, 1);

        IF currentChar = inDelimiter
        THEN
            IF includeDelimiter
            THEN
                SET currentToken = currentToken || currentChar;
            END IF;

            IF LENGTH(currentToken || &apos;*&apos;) &gt; 1 THEN
                INSERT INTO outTokens(strToken) VALUES (currentToken);
                SET currentToken = &apos;&apos;;
            END IF;
        ELSE
            SET currentToken = currentToken || currentChar;
        END IF;
    END WHILE;


    IF LENGTH(currentToken || &apos;*&apos;) &gt; 1 THEN
        INSERT INTO outTokens(strToken) VALUES (currentToken);
    END IF;

END
</attribute>
  <attribute name="creationDate" type="LONG">1382624151125</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>