<?xml version="1.1" encoding="UTF-8"?>
<metadata name="p_FixedStringToCursor" path="/shared/ASAssets/Utilities/string/p_FixedStringToCursor" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>p_FixedStringToCursor:
	Converts a VARCHAR into a cursor of fixed length VARCHARs.
	If any input parameter is NULL, the result is NULL.
 
	Input:
		inStr - the input varchar to be tokenized
			Values: e.g. &apos;string1string2string3string4&apos;
		inLength - the length of each token
			Values: e.g. 7
		nNormalizeFinalToken - 1 means right pad final token with spaces to fixed length, if necessary.
				     - 0 means emit final token without padding.
			Values: e.g. 0
	Output:
		outTokens - output cursor containing one row for each token.
			Values: e.g. {string1,string2,string3,string4}
	Exceptions:  InvalidParameterException - raised when any in parameter has an invalid value.
	Author:      Kevin O&apos;Brien
	Date:        03/16/2005
	CSW Version: 3.0.2

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="inStr" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inLength" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inNormalizeFinalToken" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="outTokens" direction="OUT" nullable="true">
      <datatype name="outTokens" type="TABLE" refId="1">
        <element name="strToken">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/ExceptionDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* p_FixedStringToCursor:
	Converts a VARCHAR into a cursor of fixed length VARCHARs.
	If any input parameter is NULL, the result is NULL.
 
	Input:
		inStr - the input varchar to be tokenized
			Values: e.g. &apos;string1string2string3string4&apos;
		inLength - the length of each token
			Values: e.g. 7
		nNormalizeFinalToken - 1 means right pad final token with spaces to fixed length, if necessary.
				     - 0 means emit final token without padding.
			Values: e.g. 0
	Output:
		outTokens - output cursor containing one row for each token.
			Values: e.g. {string1,string2,string3,string4}
	Exceptions:  InvalidParameterException - raised when any in parameter has an invalid value.
	Author:      Kevin O&apos;Brien
	Date:        03/16/2005
	CSW Version: 3.0.2

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE p_FixedStringToCursor
(
    IN inStr VARCHAR,
    IN inLength INTEGER,
    IN inNormalizeFinalToken BIT,
    OUT outTokens PIPE
    (
        strToken VARCHAR
    )
)
L_MAIN:
BEGIN
    PATH /shared/ASAssets/Utilities;

    DECLARE currentPosition INTEGER;
    DECLARE currentToken VARCHAR;
    DECLARE normalizeFinalToken BOOLEAN;
    DECLARE lengthInStr INTEGER;

    SET currentPosition = 0;
    SET currentToken = &apos;&apos;;


------------------------------------------------------------------------------------
-- Check all input parameters are non NULL
------------------------------------------------------------------------------------
    IF inStr IS NULL
    THEN
        INSERT INTO outTokens(strToken) VALUES (NULL);
        LEAVE L_MAIN;
    END IF;

    IF inLength IS NULL
    THEN
        INSERT INTO outTokens(strToken) VALUES (NULL);
        LEAVE L_MAIN;
    END IF;

    IF inNormalizeFinalToken IS NULL
    THEN
        INSERT INTO outTokens(strToken) VALUES (NULL);
        LEAVE L_MAIN;
    END IF;

------------------------------------------------------------------------------------
-- Check inStr parameter is valid.
--
-- The space character can be a problem if there are trailing spaces in the inStr
-- parameter, or if the parameter consists entirely of spaces.  This is because the
-- Query Engine&apos;s &quot;Ignore Trailing Spaces&quot; setting can cause unexpected
-- consequences with the LENGTH() function.
--
-- To work around this, we always append a character to the parameter used in
-- LENGTH().
------------------------------------------------------------------------------------
    IF LENGTH(inStr || &apos;*&apos;) = 1
    THEN
        RAISE /shared/ASAssets/Utilities/ExceptionDefinitions.InvalidParameterException VALUE &apos;p_FixedStringToCursor: inStr parameter is zero length&apos;;
    END IF;

------------------------------------------------------------------------------------
-- Check inLength parameter is valid
------------------------------------------------------------------------------------
    IF inLength &lt;= 0
    THEN
        RAISE /shared/ASAssets/Utilities/ExceptionDefinitions.InvalidParameterException VALUE &apos;p_FixedStringToCursor: inLength parameter must be greater than zero&apos;;
    END IF;

------------------------------------------------------------------------------------
-- Check inNormalizeFinalToken parameter is valid
------------------------------------------------------------------------------------
    CASE inNormalizeFinalToken
    WHEN 0 THEN
        SET normalizeFinalToken = FALSE;
    WHEN 1 THEN
        SET normalizeFinalToken = TRUE;
    ELSE
        RAISE /shared/ASAssets/Utilities/ExceptionDefinitions.InvalidParameterException VALUE &apos;p_FixedStringToCursor: inNormalizeFinalToken parameter must be 0 or 1&apos;;
    END CASE;


    SET currentPosition = 1;
    SET lengthInStr = (LENGTH(inStr || &apos;*&apos;) - 1);
    REPEAT
        SET currentToken = SUBSTRING(inStr, currentPosition, inLength);
        INSERT INTO outTokens(strToken) VALUES (currentToken);
        SET currentPosition = currentPosition + inLength;
    UNTIL (currentPosition + inLength) &gt; lengthInStr
    END REPEAT;

    SET currentToken = SUBSTRING(inStr, currentPosition, inLength);
    IF normalizeFinalToken
    THEN
       set currentToken = RPAD(currentToken, inLength, &apos; &apos;);
    END IF;
    INSERT INTO outTokens(strToken) VALUES (currentToken);

END
</attribute>
  <attribute name="creationDate" type="LONG">1382624151125</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1446756505551</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>