<?xml version="1.1" encoding="UTF-8"?>
<metadata name="findString" path="/shared/ASAssets/Utilities/string/findString" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>findString:
	Given two input strings, this function returns an integer value representing the starting 
	position of the first string within the second string.  The third parameter indicates which direction
	to begin searching.  When &apos;F&apos;, begin searching forward from the beginning of the second string.
	When &apos;R&apos;, begin search in reverse from the end of the second string.
		* This function is case-sensitive.
		* All string types, all numeric types, and all data types are accepted as input arguments.
		* The output is always an integer provided none of the input strings is NULL. Otherwise, NULL is returned.
		* If any of the arguments is NULL, the function returns NULL.
		* If the first argument is a blank string, the function returns 1 (one).
		* If the first argument is not found within the second argument, the function returns 0 (zero).
 
	Input:
		searchString - The search string is what you are looking for.  If this value is null, then the output is null
						A blank (&apos;&apos;) non-null string for the search string always produces 1 for an output.
			Values: Any text value
		stringToSearch - The string to search within for the search string. If this value is null, then the output is null
			Values: Any text value
		direction - The direction which you want to search
			Values: &apos;F&apos;=search forward, &apos;R&apos;=search in reverse
	Output:
		pos - an integer value representing the position of the string
			Values: null, or any positive integer

		Examples: 
	  		direction=&apos;F&apos;
				POSITION(‘it’ IN ‘case-sensitivity’),  
					Output: 10           ^
				POSITION(‘’ IN ‘mistake’) -- a blank non-null string for the search string always produces 1 for an output.
					Output: 1
				POSITION(‘no’ IN ’yes’)
					Output: 0
	  		direction=&apos;R&apos;
				POSITION(‘it’ IN ‘case-sensitivity’)
					Output: 14               ^
				POSITION(‘no’ IN ’yes’)
					Output: 0

	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/17/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="searchString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="stringToSearch" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="direction" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="pos" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <attribute name="Script" type="STRING">/* findString:
	Given two input strings, this function returns an integer value representing the starting 
	position of the first string within the second string.  The third parameter indicates which direction
	to begin searching.  When &apos;F&apos;, begin searching forward from the beginning of the second string.
	When &apos;R&apos;, begin search in reverse from the end of the second string.
		* This function is case-sensitive.
		* All string types, all numeric types, and all data types are accepted as input arguments.
		* The output is always an integer provided none of the input strings is NULL. Otherwise, NULL is returned.
		* If any of the arguments is NULL, the function returns NULL.
		* If the first argument is a blank string, the function returns 1 (one).
		* If the first argument is not found within the second argument, the function returns 0 (zero).
 
	Input:
		searchString - The search string is what you are looking for.  If this value is null, then the output is null
						A blank (&apos;&apos;) non-null string for the search string always produces 1 for an output.
			Values: Any text value
		stringToSearch - The string to search within for the search string. If this value is null, then the output is null
			Values: Any text value
		direction - The direction which you want to search
			Values: &apos;F&apos;=search forward, &apos;R&apos;=search in reverse
	Output:
		pos - an integer value representing the position of the string
			Values: null, or any positive integer

		Examples: 
	  		direction=&apos;F&apos;
				POSITION(‘it’ IN ‘case-sensitivity’),  
					Output: 10           ^
				POSITION(‘’ IN ‘mistake’) -- a blank non-null string for the search string always produces 1 for an output.
					Output: 1
				POSITION(‘no’ IN ’yes’)
					Output: 0
	  		direction=&apos;R&apos;
				POSITION(‘it’ IN ‘case-sensitivity’)
					Output: 14               ^
				POSITION(‘no’ IN ’yes’)
					Output: 0

	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/17/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE findString(
	IN searchString		LONGVARCHAR,
	IN stringToSearch	LONGVARCHAR,
	IN direction		CHAR(1),		--&apos;F&apos;=search forward, &apos;R&apos;=search in reverse
	OUT pos				INTEGER	
)
BEGIN
	DECLARE nextpos			INTEGER;
	DECLARE countpos		INTEGER DEFAULT 0;
	DECLARE tempString		LONGVARCHAR DEFAULT stringToSearch;

	--call print(&apos;searchString=[&apos;||emptyStr(searchString)||&apos;]&apos;);
	--call print(&apos;stringToSearch=[&apos;||emptyStr(tempString)||&apos;]&apos;);
	set pos = null;
	IF (UPPER(direction) = &apos;R&apos;) THEN
		IF (searchString = &apos;&apos;) THEN
			set pos = 1;
		ELSE
			posLoop:
			WHILE (true) DO
				set nextpos = POSITION(searchString IN tempString);
				set countpos = countpos + nextpos;
				IF (nextpos = 0 or nextpos is null) THEN
					leave posLoop;
				ELSE
					set tempString = SUBSTRING(tempString, nextpos+1, LENGTH(tempString));
				END IF;
			END WHILE;
			set pos = countpos;
		END IF;
	ELSE
		set pos = POSITION(searchString IN stringToSearch);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>