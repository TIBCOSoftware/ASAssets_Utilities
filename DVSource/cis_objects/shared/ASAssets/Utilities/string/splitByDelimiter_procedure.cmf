<?xml version="1.1" encoding="UTF-8"?>
<metadata name="splitByDelimiter" path="/shared/ASAssets/Utilities/string/splitByDelimiter" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>splitByDelimiter:
	Split a string by a defined delimiter and return the results in a VECTOR of varchar(255) strings.
	IMPORTANT: 
	Will not include empty strings (&apos;&apos;) as tokens (skipped).  Tokens returned are trimmed.
	Due to the LENGTH() function not including trailing spaces as delimiters, do not use 
	delimiters that include trailing spaces.  This will cause unexpected results as the 
	token advancement relies on the length of the delimiter. The only exception is that 
	you MAY use a single empty space &apos; &apos; as a delimiter (because it&apos;s handled manually).
 
	Input:
		inString - contains the text string to split.  
			Values: Any text value.  e.g. this is a delimited string
		inDelimiter - any single delimiter character.  
			Values: Common separators include: &apos; &apos; or &apos;|&apos; or &apos;,&apos;
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
	Output:
		outString - returns a vector of VARCHAR(255) words split by the defined delimiter
			Values: Any text value.  e.g. this,is,a,delimited,string
	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="inString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inDelimiter" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="outString" direction="OUT" nullable="true">
      <datatype name="outString" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/log" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* splitByDelimiter:
	Split a string by a defined delimiter and return the results in a VECTOR of varchar(255) strings.
	IMPORTANT: 
	Will not include empty strings (&apos;&apos;) as tokens (skipped).  Tokens returned are trimmed.
	Due to the LENGTH() function not including trailing spaces as delimiters, do not use 
	delimiters that include trailing spaces.  This will cause unexpected results as the 
	token advancement relies on the length of the delimiter. The only exception is that 
	you MAY use a single empty space &apos; &apos; as a delimiter (because it&apos;s handled manually).
 
	Input:
		inString - contains the text string to split.  
			Values: Any text value.  e.g. this is a delimited string
		inDelimiter - any single delimiter character.  
			Values: Common separators include: &apos; &apos; or &apos;|&apos; or &apos;,&apos;
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
	Output:
		outString - returns a vector of VARCHAR(255) words split by the defined delimiter
			Values: Any text value.  e.g. this,is,a,delimited,string
	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE splitByDelimiter(
  IN inString 		LONGVARCHAR, 
  IN inDelimiter 	CHAR(1), 
  IN debug		ChAR(1), --Y or N
  OUT outString 	VECTOR(LONGVARCHAR)
)
BEGIN
    PATH /shared/ASAssets/Utilities/log;
    PATH /shared/ASAssets/Utilities/repository;

  DECLARE moduleName 		VARCHAR DEFAULT &apos;string/splitByDelimiter()&apos;;
  DECLARE sanityCheck 		INTEGER DEFAULT 1;
  DECLARE stringLen		INTEGER DEFAULT 0;
  DECLARE delimiterLen		INTEGER DEFAULT 0;
  DECLARE occurPos 		INTEGER DEFAULT 0;
  DECLARE vectorCntr 		INTEGER DEFAULT 1;
  DECLARE stringLeftToParse	LONGVARCHAR;
  DECLARE token 		LONGVARCHAR;

  IF inString IS NOT NULL AND inDelimiter IS NOT NULL THEN
    call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Input provided: [&apos; || inString || &apos;], delimiter provided: [&apos; || inDelimiter || &apos;]&apos;);	

    -- setup for initial loop
    SET stringLeftToParse = inString;
    SET stringLen = LENGTH(stringLeftToParse);
    SET delimiterLen = LENGTH(inDelimiter);
    -- LENGTH function does not count trailing spaces!? wtf? at least accomodate a single space delimiter...
    IF inDelimiter = &apos; &apos; THEN
      SET delimiterLen = 1;
    END IF;
    call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;stringLeftToParse: &apos; || stringLeftToParse || &apos;, stringLen: &apos; || stringLen || &apos;, delimiterLen: &apos; || delimiterLen);	

    -- Logic: everytime we find a token, we reduce the string by it PLUS the delimiter.
    mainLoop: WHILE stringLen &gt; 0 DO
      SET sanityCheck = sanityCheck + 1;IF sanityCheck &gt; 9999 THEN call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;ERROR!ENDLESS LOOP!&apos;);LEAVE mainLoop;END IF;

      SET occurPos = POSITION(inDelimiter IN stringLeftToParse);
      IF occurPos = 0 THEN -- delimiter not found
        SET occurPos = stringLen; -- important: ends the loop on last token
        SET token = SUBSTRING(stringLeftToParse, 1, stringLen); -- no more occurrences, take remainder of string
      ELSEIF occurPos = 1 THEN -- delimiter is in first position
        SET token = &apos;&apos;; -- since empty space will not be added to result, we&apos;ll just continue on...
      ELSE
        SET token = SUBSTRING(stringLeftToParse, 1, occurPos - 1);
      END IF;
      call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, token || &apos; from &apos; || stringLeftToParse || &apos; occurPos &apos; || occurPos);
      call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, token || &apos; from &apos; || stringLeftToParse || &apos; occurPos &apos; || occurPos);

      -- only add if not empty...
      IF TRIM(token) != &apos;&apos; THEN
        -- if counter is 1, no need to extend vector (an entry is initialized at this location)...
        IF vectorCntr = 1 THEN
          SET outString = VECTOR[&apos;&apos;]; -- initialize
        ELSE
          SET outString = EXTEND(outString, 1);
        END IF;
        SET outString[vectorCntr] = TRIM(token);
        call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;adding &apos; || token || &apos; to vector&apos;);

        SET vectorCntr = vectorCntr + 1; -- only increment when we add something, else will get oob exception
      END IF;

      -- reset everything
      call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;determining stringLeftToParse using: &apos; || stringLeftToParse || &apos;,&apos; || occurPos || &apos;,&apos; || delimiterLen || &apos;,&apos; || LENGTH(stringLeftToParse));
      SET stringLeftToParse = SUBSTRING(stringLeftToParse, occurPos + delimiterLen, LENGTH(stringLeftToParse));
      SET stringLen = LENGTH(stringLeftToParse);

      call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;stringLeftToParse: &apos; || stringLeftToParse);
    END WHILE;
  END IF;
END
</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>