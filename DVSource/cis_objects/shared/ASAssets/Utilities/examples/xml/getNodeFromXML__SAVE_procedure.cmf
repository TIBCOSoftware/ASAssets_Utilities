<?xml version="1.1" encoding="UTF-8"?>
<metadata name="getNodeFromXML_SAVE" path="/shared/ASAssets/Utilities/examples/xml/getNodeFromXML_SAVE" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getValueFromXML:
	Given an XPath, extract the value from any XML document.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/sam:Name/@sam:isbn
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
					&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
					&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     &lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath
			Values: e.g. 12-3456-123
	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/2/2010
	CSW Version: 5.1.0
    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXpath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inUseBaseNode" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNodeFromXML:
	Given a qualified XPath, extract the node tree from the incoming XML.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/Chapter
		inUseBaseNode - 1=return the XML using the base node from the XPath statement
						0=return the XML without using the base node from the XPath statement
					*** CURRENTLY NOT BEING USED ***
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
							&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
							&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     	&lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath
			Values: &lt;Chapter&gt;Test Data&lt;/Chapter&gt;
	Exceptions:  none
	Author:      Mike Tinius
	Date:        9/1/2010
	CSW Version: 5.1.0

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
*/
PROCEDURE getNodeFromXML_SAVE(
	IN debug			CHAR(1),
	IN namespaces		LONGVARCHAR,
	IN inXpath			LONGVARCHAR,
	IN inUseBaseNode	BIT, -- not used at this time.  did not have enough time to resolve the usage.
	IN inXml			XML,
	OUT outValue		LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;getNodeFromXML()&apos;;
	DECLARE	xsltExpr 		VARCHAR(2048);
	DECLARE outXML			XML;
	DECLARE enclosingNode	VARCHAR(255);
	DECLARE beginPos		INTEGER;
	DECLARE endPos			INTEGER;
	DECLARE tempPath		/shared/ASAssets/Utilities/TypeDefinitions.pathType;
	DECLARE useBaseNode		BIT DEFAULT 0;-- defaulted to return the enclosing node on the resuls.
	DECLARE csw_namespace	VARCHAR DEFAULT &apos;xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot;&apos;;
	DECLARE copy_options	VARCHAR DEFAULT &apos;@*|node()&apos;; -- get all attributes and nodes and return empty ones also

	-- extract the enclosing node for the XML being retrieved.
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(inXpath, &apos;E&apos;, enclosingNode, tempPath);
	set enclosingNode = REPLACE(enclosingNode, &apos;@&apos;, &apos;&apos;); -- remove any attribute designations

	set xsltExpr = 
&apos;&lt;xsl:stylesheet version=&quot;1.0&quot;
	xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
	&apos;|| namespaces || &apos;&gt;
 &lt;xsl:template match=&quot;&apos; || inXpath ||&apos;&quot;&gt;&apos;;
	if (useBaseNode = 1) then
		set xsltExpr = xsltExpr ||&apos;&lt;&apos;||enclosingNode||&apos; &apos;|| namespaces ||&apos;&gt;&apos;;
	end if;
	set xsltExpr = xsltExpr || &apos;
    &lt;xsl:copy copy-namespaces=&quot;yes&quot;&gt;
      &lt;xsl:copy-of select=&quot;&apos;||copy_options||&apos;&quot;/&gt;
    &lt;/xsl:copy&gt;&apos;;
	if (useBaseNode = 1) then
		set xsltExpr = xsltExpr || &apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;;
	end if;
	set xsltExpr = xsltExpr || &apos;
 &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
&apos;;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XSLT=&apos;||xsltExpr);	
	set outXML = XSLT( inXml, xsltExpr );
	set outValue = cast(outXML as longvarchar);
call print(outValue);
	set beginPos = POSITION(&apos;&lt;&apos;||enclosingNode in outValue);
	set endPos = POSITION(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos; in outValue);
	set outValue = substring(outValue, beginPos, endPos-beginPos + LENGTH(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XPath=&apos;||inXpath || &apos;    NODE VALUE: &apos;||outValue);	
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">6/91</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>