<?xml version="1.1" encoding="UTF-8"?>
<metadata name="test_pruneXML" path="/shared/ASAssets/Utilities/examples/xml/test_pruneXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

</annotation>
  <parameters>
    <parameter name="outXml" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/xml/pruneXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="namespaces" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="retainXPathVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="VARCHAR" type="STRING" maxLength="2048"/>
          </itemDatatype>
        </datatype>
      </element>
      <element name="inXml" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outXml" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*

	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:tns=&quot;http://mynamespace&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		retainXPathVector - contains a vector list of XPath statements for the incoming XML that insure
			those nodes are retained in the XML if they are empty.  The invoking of this procedure must
			define and populate the vector.  The invoker will determine the XPath statement by consulting
			the XML Schema for required elements and the deterimine from their application which nodes have the 
			possibility of being empty.  Those are the candidates for this list.
			Values: e.g. {&apos;/rootnode/XYZ/A/@foo&apos;, &apos;/rootnode/XYZ/C&apos;}
		inXml - any XML document which requires pruning 
			Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot; ghi=&quot;&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
	Output:
		outXml - contains the incoming XML with nodes pruned
			Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;

    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
*/
PROCEDURE test_pruneXML(
	OUT outXml				XML
)
BEGIN
	DECLARE namespaces			LONGVARCHAR;
	DECLARE retainXPathVector 	VECTOR(varchar(2048));
	DECLARE inXml				XML;
 
	SET namespaces = &apos;xmlns:tns=&quot;http://mynamespace&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&apos;;
	SET inXml = &apos;&lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot; ghi=&quot;&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;&apos;;
	SET retainXPathVector = VECTOR[(&apos;/rootnode/XYZ/A/@foo&apos;),(&apos;/rootnode/XYZ/C&apos;)];

	CALL /shared/ASAssets/Utilities/&quot;xml&quot;/pruneXML(&apos;Y&apos;, namespaces, retainXPathVector, inXml, outXml);
END</attribute>
  <attribute name="creationDate" type="LONG">1414075231741</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416604433067</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>