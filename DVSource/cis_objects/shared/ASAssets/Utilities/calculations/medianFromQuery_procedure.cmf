<?xml version="1.1" encoding="UTF-8"?>
<metadata name="medianFromQuery" path="/shared/ASAssets/Utilities/calculations/medianFromQuery" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>medianFromQuery:

	This procedure determines the median value of an input query that returns a single column.
    The median is defined as the middle value of a sorted list of numbers. If the number of
    elements in the list is odd, the median is the middle element. If the number of elements
    in the list is even, then the median is the average of the two middle elements.


	Input:
		query - contains a query that returns a single column result set. Must have an ORDER BY
                clause (ASC or DESC doesn&apos;t matter), or an exception is thrown.
			Values: A select statement


	Output:
		result - the median value of the result set
			Values: a double


	Exceptions:
        /lib/util/System.IllegalArgumentException - Thrown when the input query does not return 
                                                    a single column or does not contain an ORDER
                                                    BY clause.


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
</annotation>
  <parameters>
    <parameter name="query" direction="IN" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="DOUBLE" type="FLOAT"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
  medianFromQuery:

	This procedure determines the median value of the result set of an input query that returns
    a single column. The median is defined as the middle value of a sorted list of numbers. If
    the number of elements in the list is odd, the median is the middle element. If the number
    of elements in the list is even, then the median is the average of the two middle elements.
    If the query results in no rows, the result is NULL.


	Input:
		query - contains a query that returns a single column result set. Must have an ORDER BY
                clause (ASC or DESC doesn&apos;t matter), or an exception is thrown.
			Values: A select statement


	Output:
		result - the median value of the result set
			Values: a double or NULL (if the query returns no rows.)


	Exceptions:
        /lib/util/System.IllegalArgumentException - Thrown when the input query does not return 
                                                    a single column or does not contain an ORDER
                                                    BY clause.


    © 2010, 2014 Cisco and/or its affiliates. All rights reserved.

    This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
    Any dependent libraries supplied by third parties are provided under their own open source licenses as 
    described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
    part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
    csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
    csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
    optional version number) are provided as a convenience, but are covered under the licensing for the 
    Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
    through a valid license for that product.

    This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
    Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.

*/
PROCEDURE medianFromQuery(
	IN	query	/lib/util/System.Text,
	OUT	result	DOUBLE
)
BEGIN
    DECLARE PROC_NAME CONSTANT VARCHAR DEFAULT &apos;medianFromQuery&apos;;
    DECLARE myQuery System.Text DEFAULT query;
    DECLARE curs CURSOR (myCol DOUBLE);
    DECLARE myVal DOUBLE;
    DECLARE myValues VECTOR(DOUBLE) DEFAULT VECTOR[];

    -- the regex here will allow:
    --     a single column name
    --     a single column name with a column alias
    --     a function call with any number of arguments (but no sub-calls to other functions.)
    --     a function call with any number of arguments with a column alias
    --
    IF (RegexPosition(myQuery, &apos;(?i)^\s*SELECT\s+([^\s,\*]+|[^\s,]+\s+\([^\(\)]+\))((\s+AS)?\s+[^\s,\*]+)?\s+FROM\s+&apos;, 1) = 0) THEN
        RAISE System.IllegalArgumentException VALUE PROC_NAME || &apos;: Input query does not return a single column or query is malformed.&apos;;
    END IF;

    -- see if the query has an order by. if not, add one.
    --
    IF (RegexPosition(myQuery, &apos;(?i)\s+order\s+by\s+&apos;, 1) = 0) THEN
        RAISE System.IllegalArgumentException VALUE PROC_NAME || &apos;: Input query does not contain an ORDER BY clause.&apos;;
    END IF;

    OPEN curs FOR myQuery;
    FETCH curs INTO myVal;
    WHILE (curs.FOUND) DO
        SET myValues = EXTEND(myValues, 1);
        SET myValues[CARDINALITY(myValues)] = myVal;
        FETCH curs INTO myVal;
    END WHILE;
    CLOSE curs;

    IF (CARDINALITY(myValues) = 0) THEN
        SET result = NULL;
    ELSEIF (CARDINALITY(myValues) % 2 = 1) THEN -- number of values is odd
        SET result = myValues[CAST(CARDINALITY(myValues) / 2 AS INT) + 1];
    ELSE
        SET result = (myValues[CARDINALITY(myValues) / 2] + myValues[CARDINALITY(myValues) / 2 + 1]) / 2;
    END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1416603624220</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">15/68</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/62</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">21/50</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>