<?xml version="1.1" encoding="UTF-8"?>
<metadata name="Test_getBasicResourceCursor" path="/shared/ASAssets/Utilities_regression_tests/repository/Test_getBasicResourceCursor" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="numTests" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numErrors" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numSkipped" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getCisVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="15"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="query" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="expectedResultCSV" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/getCisVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">PROCEDURE Test_getBasicResourceCursor(
    OUT numTests INTEGER,
    OUT numErrors INTEGER,
    OUT numSkipped INTEGER
)
BEGIN
    DECLARE test_name VARCHAR DEFAULT &apos;repository/Test_getBasicResourceCursor&apos;;
    DECLARE args System.Text;
    DECLARE expectedResultCSV System.Text;
    DECLARE result System.Text;

    SET numTests = 0;
    SET numErrors = 0;
    SET numSkipped = 0;

    -- NOTE: not selecting resource id or cid because each CIS version has different numbers for them.
    --       seems silly to keep track of each set of numbers for each CIS version for each test.

    -- start test 1
    --
    SET args = &apos;&apos;&apos;/shared/examples&apos;&apos;, &apos;&apos;CONTAINER&apos;&apos;&apos;;
    SET expectedResultCSV = 
&apos;examples,/shared/examples,CONTAINER,FOLDER_CONTAINER,1,composite,admin,NONE,This folder contains pre-created resources.,,,,&apos;;

    BEGIN
        SET numTests = numTests + 1;
        CALL /shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest(
            &apos;SELECT name, &quot;path&quot;, &quot;type&quot;, subtype, enabled, ownerDomain, ownerName, impactLevel, annotation, explicitlyDesigned, tableType, sqlText, scriptText FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(&apos; || args || &apos;)&apos;,
            expectedResultCSV,
            result
        );
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (result &lt;&gt; &apos;OK&apos;) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 1

    -- start test 2
    --
    SET args = &apos;&apos;&apos;/shared/examples/CompositeView&apos;&apos;, &apos;&apos;TABLE&apos;&apos;&apos;;
    SET expectedResultCSV = 
&apos;CompositeView,/shared/examples/CompositeView,TABLE,SQL_TABLE,1,composite,admin,NONE,,0,UNKNOWN,&quot;SELECT 
    ViewOrder.*, 
    ViewSales.ProductName, 
    ViewSupplier.TransactionID, 
    ViewSupplier.DateRequired, 
    ViewSupplier.DatePromised, 
    ViewSupplier.ShipDate, 
    ViewSupplier.SupplierID, 
    ViewSupplier.SupplierName, 
    ViewSupplier.SupplierContactName, 
    ViewSupplier.SupplierPhoneNumber
FROM      
    /shared/examples/ViewSales ViewSales INNER JOIN 
        /shared/examples/ViewOrder ViewOrder
    ON ViewSales.ProductID = ViewOrder.ProductID INNER JOIN 
        /shared/examples/ViewSupplier ViewSupplier
    ON ViewOrder.ProductID = ViewSupplier.ProductID&quot;,&apos;;

    BEGIN
        SET numTests = numTests + 1;
        CALL /shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest(
            &apos;SELECT name, &quot;path&quot;, &quot;type&quot;, subtype, enabled, ownerDomain, ownerName, impactLevel, annotation, explicitlyDesigned, tableType, sqlText, scriptText FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(&apos; || args || &apos;)&apos;,
            expectedResultCSV,
            result
        );
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (result &lt;&gt; &apos;OK&apos;) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 2

    -- start test 3
    --
    SET args = &apos;&apos;&apos;/shared/examples/LookupProduct&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;&apos;;

	CASE (SUBSTRING(getCisVersion(), 1, 3))
	    WHEN &apos;6.2&apos; THEN
            SET expectedResultCSV = 
&apos;LookupProduct,/shared/examples/LookupProduct,PROCEDURE,SQL_SCRIPT_PROCEDURE,1,composite,admin,NONE,,0,,,&quot;PROCEDURE LookupProduct(
    IN desiredProduct INTEGER,
    OUT result CURSOR (
    	ProductName VARCHAR(50),
    	ProductID INTEGER,
    	ProductDescription VARCHAR(255)
    )
)

BEGIN
    OPEN result FOR
        SELECT
            products.ProductName,
            products.ProductID,
            products.ProductDescription
        FROM     
            /shared/examples/ds_inventory/products products
        WHERE
            products.ProductID = desiredProduct;
END&quot;&apos;;
        ELSE
            SET expectedResultCSV = 
&apos;LookupProduct,/shared/examples/LookupProduct,PROCEDURE,SQL_SCRIPT_PROCEDURE,1,composite,admin,NONE,,0,,,&quot;PROCEDURE LookupProduct(
    IN desiredProduct INTEGER,
    OUT result CURSOR (
    	ProductName VARCHAR(50),
    	ProductID INTEGER,
    	ProductDescription VARCHAR(255)
    )
)

BEGIN
    OPEN result FOR
        SELECT
            products.ProductName,
            products.ProductID,
            products.ProductDescription
        FROM     
            /shared/examples/ds_inventory/tutorial/products products
        WHERE
            products.ProductID = desiredProduct;
END&quot;&apos;;
    END CASE;

    BEGIN
        SET numTests = numTests + 1;
        CALL /shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest(
            &apos;SELECT name, &quot;path&quot;, &quot;type&quot;, subtype, enabled, ownerDomain, ownerName, impactLevel, annotation, explicitlyDesigned, tableType, sqlText, scriptText FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(&apos; || args || &apos;)&apos;,
            expectedResultCSV,
            result
        );
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (result &lt;&gt; &apos;OK&apos;) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 3

    -- start test 4
    --
    SET args = &apos;&apos;&apos;/shared/examples/ds_orders&apos;&apos;, &apos;&apos;DATA_SOURCE&apos;&apos;&apos;;
    SET expectedResultCSV = 
&apos;ds_orders,/shared/examples/ds_orders,DATA_SOURCE,RELATIONAL_DATA_SOURCE,1,composite,admin,NONE,,,,,&apos;;

    BEGIN
        SET numTests = numTests + 1;
        CALL /shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest(
            &apos;SELECT name, &quot;path&quot;, &quot;type&quot;, subtype, enabled, ownerDomain, ownerName, impactLevel, annotation, explicitlyDesigned, tableType, sqlText, scriptText FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(&apos; || args || &apos;)&apos;,
            expectedResultCSV,
            result
        );
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (result &lt;&gt; &apos;OK&apos;) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 4

    -- start test 5
    --
    SET args = &apos;&apos;&apos;/shared/examples/ds_orders&apos;&apos;, &apos;&apos;TABLE&apos;&apos;&apos;;
    SET expectedResultCSV = 
&apos;does not exist. should throw exception.&apos;;

    BEGIN
        SET numTests = numTests + 1;
        CALL /shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest(
            &apos;SELECT name, &quot;path&quot;, &quot;type&quot;, subtype, enabled, ownerDomain, ownerName, impactLevel, annotation, explicitlyDesigned, tableType, sqlText, scriptText FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(&apos; || args || &apos;)&apos;,
            expectedResultCSV,
            result
        );
    EXCEPTION
        ELSE
            SET result = &apos;OK&apos;;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos; (does not exist): &apos; || result);

    IF (result &lt;&gt; &apos;OK&apos;) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 5

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1424304197234</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/176</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/79</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">20/10</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">31/9</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/202</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/150</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/8</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/37</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>