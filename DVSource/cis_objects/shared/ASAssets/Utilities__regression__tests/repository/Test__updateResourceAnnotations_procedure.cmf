<?xml version="1.1" encoding="UTF-8"?>
<metadata name="Test_updateResourceAnnotations" path="/shared/ASAssets/Utilities_regression_tests/repository/Test_updateResourceAnnotations" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="numTests" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numErrors" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numSkipped" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getCisVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="15"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceAnnotations" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="columnName">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateResourceAnnotations" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnAnnotations" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ColumnAnnotationRow" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="ColumnAnnotationRow" type="TREE" refId="2">
              <element name="columnName">
                <datatype name="ResourceName" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
              </element>
              <element name="columnType">
                <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
              </element>
              <element name="annotation">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="updateResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="3"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="3"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities_regression_tests" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities_regression_tests/Constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="query" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="expectedResultCSV" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/getCisVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">PROCEDURE Test_updateResourceAnnotations(
    OUT numTests INTEGER,
    OUT numErrors INTEGER,
    OUT numSkipped INTEGER
)
proc:
BEGIN
    PATH /shared/ASAssets/Utilities_regression_tests;
    PATH /lib/resource;

    DECLARE test_name VARCHAR DEFAULT &apos;repository/Test_updateResourceAnnotations&apos;;
    DECLARE resourceExists BOOLEAN;
    DECLARE resourcePath ResourceDefs.ResourcePath;
    DECLARE resourceType ResourceDefs.ResourceType;
    DECLARE annotation, testAnnotation1, testAnnotation2 LONGVARCHAR;
    DECLARE childAnnotations VECTOR(/shared/ASAssets/Utilities/TypeDefinitions.ColumnAnnotationRow);
    DECLARE success BIT;
    DECLARE responseXML, faultXML XML;
    DECLARE args System.Text;
    DECLARE expectedResultCSV System.Text;
    DECLARE result System.Text;

    SET numTests = 0;
    SET numErrors = 0;
    SET numSkipped = 0;

    -- start test 1
    --
    test_block_1: 
    BEGIN INDEPENDENT TRANSACTION
        -- test folder
        --
        SET resourcePath = /shared/ASAssets/Utilities_regression_tests/Constants.TMP_FOLDER || &apos;/test_folder&apos;;
        SET resourceType = ResourceDefs.RESOURCE_TYPE_CONTAINER;
        SET annotation = &apos;folder annotation test&apos;;
        SET childAnnotations = NULL;

        SET args = &apos;&apos;&apos;&apos; || resourcePath || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || resourceType || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || annotation || &apos;&apos;&apos;, &apos; ||
                   &apos;[NULL]&apos;;
    
        SET numTests = numTests + 1;

        CALL /lib/resource/ResourceExists(
             resourcePath,
             resourceType,
             NULL,
             resourceExists
        );

        IF (NOT resourceExists) THEN
            SET result = &apos;SKIPPING, resource doesn&apos;&apos;t exist&apos;;
            SET numSkipped = numSkipped + 1;
            LEAVE test_block_1;
        END IF;

        CALL /shared/ASAssets/Utilities/repository/updateResourceAnnotations(
            resourcePath,
            resourceType,
            annotation,
            childAnnotations,
            success,
            responseXML,
            faultXML
        ); 

        SELECT
            annotation
        INTO
            testAnnotation1
        FROM
            /shared/ASAssets/Utilities/repository/getResourceAnnotations(
                resourcePath,
                resourceType
            );

        IF (testAnnotation1 = annotation) THEN
            SET result = &apos;OK&apos;;
        ELSE
            SET result = &apos;FAILED: expected annotation = &quot;&apos; || annotation || &apos;&quot;, actual annotation = &apos; || coalesce(&apos;&quot;&apos; || testAnnotation1 || &apos;&quot;&apos;, &apos;[NULL]&apos;);
        END IF;
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (SUBSTRING(result, 1, 1)  IN (&apos;F&apos;, &apos;E&apos;)) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 1

    -- start test 2
    --
    test_block_2: 
    BEGIN INDEPENDENT TRANSACTION
        -- test view with columns
        --
        SET resourcePath = /shared/ASAssets/Utilities_regression_tests/Constants.TMP_FOLDER || &apos;/test_folder/test_view&apos;;
        SET resourceType = ResourceDefs.RESOURCE_TYPE_TABLE;
        SET annotation = &apos;view annotation test&apos;;
        SET childAnnotations = VECTOR [
                                   (&apos;ProductID&apos;, &apos;INTEGER&apos;, &apos;ProductID annotation&apos;),
                                   (&apos;CategoryID&apos;, &apos;INTEGER&apos;, &apos;CategoryID annotation&apos;),
                                   (&apos;ProductName&apos;, &apos;VARCHAR(50)&apos;, &apos;ProductName annotation&apos;)
                               ];

		CASE (SUBSTRING(getCisVersion(), 1, 3))
		    WHEN &apos;6.2&apos; THEN
		        SET expectedResultCSV =
&apos;,,view annotation test
ProductID,INTEGER,ProductID annotation
ProductName,VARCHAR(50),ProductName annotation
ProductDescription,VARCHAR(255),
CategoryID,INTEGER,CategoryID annotation
SerialNumber,VARCHAR(50),
UnitPrice,&quot;DECIMAL(12,2)&quot;,
ReorderLevel,INTEGER,
LeadTime,VARCHAR(30),&apos;;
            ELSE
		        SET expectedResultCSV =
&apos;,,view annotation test
productid,INTEGER,ProductID annotation
productname,VARCHAR(50),ProductName annotation
productdescription,VARCHAR(255),
categoryid,INTEGER,CategoryID annotation
serialnumber,VARCHAR(50),
unitprice,&quot;NUMERIC(12,2)&quot;,
reorderlevel,INTEGER,
leadtime,VARCHAR(30),&apos;;
        END CASE;

        SET args = &apos;&apos;&apos;&apos; || resourcePath || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || resourceType || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || annotation || &apos;&apos;&apos;, &apos; ||
                   &apos;[column annotations list]&apos;;
    
        SET numTests = numTests + 1;

        CALL /lib/resource/ResourceExists(
             resourcePath,
             resourceType,
             NULL,
             resourceExists
        );

        IF (NOT resourceExists) THEN
            SET result = &apos;SKIPPING, resource doesn&apos;&apos;t exist&apos;;
            SET numSkipped = numSkipped + 1;
            LEAVE test_block_2;
        END IF;

        BEGIN INDEPENDENT TRANSACTION
            CALL /shared/ASAssets/Utilities/repository/updateResourceAnnotations(
                resourcePath,
                resourceType,
                annotation,
                childAnnotations,
                success,
                responseXML,
                faultXML
            ); 
        END;

        BEGIN INDEPENDENT TRANSACTION
            CALL /shared/ASAssets/Utilities_regression_tests/TestUtils/QueryTest(
                &apos;SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceAnnotations(&apos;&apos;&apos; || resourcePath || &apos;&apos;&apos;, &apos;&apos;&apos; || resourceType || &apos;&apos;&apos;)&apos;,
                expectedResultCSV,
                result
            );
        END;
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (SUBSTRING(result, 1, 1)  IN (&apos;F&apos;, &apos;E&apos;)) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 2

    -- start test 3
    --

	test_block_3: 
    BEGIN INDEPENDENT TRANSACTION
        -- test data source table with columns
        --
		CASE (SUBSTRING(getCisVersion(), 1, 3))
		    WHEN &apos;6.2&apos; THEN
		        SET resourcePath = /shared/ASAssets/Utilities_regression_tests/Constants.TMP_FOLDER || &apos;/test_ds_mysql/products&apos;;
		        SET childAnnotations = VECTOR [
		                                   (&apos;ProductID&apos;, &apos;INTEGER&apos;, &apos;ProductID annotation&apos;),
		                                   (&apos;ProductName&apos;, &apos;VARCHAR(50)&apos;, &apos;ProductName annotation&apos;),
		                                   (&apos;CategoryID&apos;, &apos;INTEGER&apos;, &apos;CategoryID annotation&apos;)
		                               ];
            ELSE
		        -- data source table annotation update seems to have changed in 7.0. No access to CIS source so can&apos;t fix.
                --
	            SET result = &apos;SKIPPING, data source table column annotation updating no longer supported in CIS 7.0&apos;;
	            SET numSkipped = numSkipped + 1;
                LEAVE test_block_3;
        END CASE;

        SET resourceType = ResourceDefs.RESOURCE_TYPE_TABLE;
        SET annotation = &apos;data source table annotation test&apos;;

        SET args = &apos;&apos;&apos;&apos; || resourcePath || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || resourceType || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || annotation || &apos;&apos;&apos;, &apos; ||
                   &apos;[column annotations list]&apos;;
    
        SET numTests = numTests + 1;

        CALL /lib/resource/ResourceExists(
             resourcePath,
             resourceType,
             NULL,
             resourceExists
        );

        IF (NOT resourceExists) THEN
            SET result = &apos;SKIPPING, resource doesn&apos;&apos;t exist&apos;;
            SET numSkipped = numSkipped + 1;
            LEAVE test_block_3;
        END IF;

        BEGIN INDEPENDENT TRANSACTION
            CALL /shared/ASAssets/Utilities/repository/updateResourceAnnotations(
                resourcePath,
                resourceType,
                annotation,
                childAnnotations,
                success,
                responseXML,
                faultXML
            ); 
        END;

        BEGIN INDEPENDENT TRANSACTION
            SELECT
                annotation
            INTO
                testAnnotation1
            FROM
                /shared/ASAssets/Utilities/repository/getResourceAnnotations(
                    resourcePath,
                    resourceType
                )
            WHERE
                columnName IS NULL;
    
            SELECT
                annotation
            INTO
                testAnnotation2
            FROM
                /shared/ASAssets/Utilities/repository/getResourceAnnotations(
                    resourcePath,
                    resourceType
                )
            WHERE
                columnName = &apos;ProductID&apos;;
        END;

        IF (testAnnotation1 = annotation) THEN
            IF (testAnnotation2 = childAnnotations[1].annotation) THEN
                SET result = &apos;OK&apos;;
            ELSE
                SET result = &apos;FAILED: expected annotation = &quot;&apos; || childAnnotations[1].annotation || &apos;&quot;, actual annotation = &apos; || coalesce(&apos;&quot;&apos; || testAnnotation2 || &apos;&quot;&apos;, &apos;[NULL]&apos;);
            END IF;
        ELSE
            SET result = &apos;FAILED: expected annotation = &quot;&apos; || annotation || &apos;&quot;, actual annotation = &apos; || coalesce(&apos;&quot;&apos; || testAnnotation1 || &apos;&quot;&apos;, &apos;[NULL]&apos;);
        END IF;
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (SUBSTRING(result, 1, 1)  IN (&apos;F&apos;, &apos;E&apos;)) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 3

    -- start test 4
    --
    test_block_4: 
    BEGIN INDEPENDENT TRANSACTION
        -- test folder
        --
        SET resourcePath = /shared/ASAssets/Utilities_regression_tests/Constants.TMP_FOLDER || &apos;/test_folder/test_sql_def_set&apos;;
        SET resourceType = ResourceDefs.RESOURCE_TYPE_DEFINITION_SET;
        SET annotation = &apos;procedure annotation test&apos;;
        SET childAnnotations = NULL;

        SET args = &apos;&apos;&apos;&apos; || resourcePath || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || resourceType || &apos;&apos;&apos;, &apos; ||
                   &apos;&apos;&apos;&apos; || annotation || &apos;&apos;&apos;, &apos; ||
                   &apos;[NULL]&apos;;
    
        SET numTests = numTests + 1;

        CALL /lib/resource/ResourceExists(
             resourcePath,
             resourceType,
             NULL,
             resourceExists
        );

        IF (NOT resourceExists) THEN
            SET result = &apos;SKIPPING, resource doesn&apos;&apos;t exist&apos;;
            SET numSkipped = numSkipped + 1;
            LEAVE test_block_4;
        END IF;

        CALL /shared/ASAssets/Utilities/repository/updateResourceAnnotations(
            resourcePath,
            resourceType,
            annotation,
            childAnnotations,
            success,
            responseXML,
            faultXML
        ); 

        SELECT
            annotation
        INTO
            testAnnotation1
        FROM
            /shared/ASAssets/Utilities/repository/getResourceAnnotations(
                resourcePath,
                resourceType
            );

        IF (testAnnotation1 = annotation) THEN
            SET result = &apos;OK&apos;;
        ELSE
            SET result = &apos;FAILED: expected annotation = &quot;&apos; || annotation || &apos;&quot;, actual annotation = &apos; || coalesce(&apos;&quot;&apos; || testAnnotation1 || &apos;&quot;&apos;, &apos;[NULL]&apos;);
        END IF;
    EXCEPTION
        ELSE
            SET result = &apos;EXCEPTION: &apos; || CURRENT_EXCEPTION.MESSAGE;
    END;

    CALL PRINT (test_name || &apos;: args = &apos; || args || &apos;: &apos; || result);

    IF (SUBSTRING(result, 1, 1)  IN (&apos;F&apos;, &apos;E&apos;)) THEN
        SET numErrors = numErrors + 1;
    END IF;
    --
    -- end test 4

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1424305677656</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/88</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">28/34</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>resource</item>
        <item>ResourceDefs</item>
      </value>
    </item>
    <item>
      <key type="STRING">28/103</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>resource</item>
        <item>ResourceDefs</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/19</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">20/21</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/286</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">31/20</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/355</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">26/14</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>resource</item>
        <item>ResourceDefs</item>
      </value>
    </item>
    <item>
      <key type="STRING">26/13</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>resource</item>
        <item>ResourceDefs</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/180</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">28/301</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>resource</item>
        <item>ResourceDefs</item>
      </value>
    </item>
    <item>
      <key type="STRING">28/211</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>resource</item>
        <item>ResourceDefs</item>
      </value>
    </item>
  </attribute>
</metadata>